
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000548c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a4  080056a4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080056a4  080056a4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056a4  080056a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000084  08005730  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005730  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe05  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000275e  00000000  00000000  0002feb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00032610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00033498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001912c  00000000  00000000  000341c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4f6  00000000  00000000  0004d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096e55  00000000  00000000  000597ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f063f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000f06bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	080055b0 	.word	0x080055b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	080055b0 	.word	0x080055b0

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fdb8 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f003 ff6f 	bl	8004080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fdc6 	bl	8000d66 <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 fd90 	bl	8000d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	2000001c 	.word	0x2000001c
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200000b8 	.word	0x200000b8
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	200000b8 	.word	0x200000b8

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000270:	d004      	beq.n	800027c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_Delay+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4413      	add	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027c:	bf00      	nop
 800027e:	f7ff ffe1 	bl	8000244 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f7      	bhi.n	800027e <HAL_Delay+0x26>
  {
  }
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004

0800029c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08e      	sub	sp, #56	; 0x38
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e127      	b.n	800050c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d115      	bne.n	80002f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d8:	4b8e      	ldr	r3, [pc, #568]	; (8000514 <HAL_ADC_Init+0x278>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a8d      	ldr	r2, [pc, #564]	; (8000514 <HAL_ADC_Init+0x278>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6213      	str	r3, [r2, #32]
 80002e4:	4b8b      	ldr	r3, [pc, #556]	; (8000514 <HAL_ADC_Init+0x278>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f002 fe9f 	bl	8003034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 80ff 	bne.w	8000502 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800030c:	f023 0302 	bic.w	r3, r3, #2
 8000310:	f043 0202 	orr.w	r2, r3, #2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000318:	4b7f      	ldr	r3, [pc, #508]	; (8000518 <HAL_ADC_Init+0x27c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	497c      	ldr	r1, [pc, #496]	; (8000518 <HAL_ADC_Init+0x27c>)
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000332:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800033a:	4619      	mov	r1, r3
 800033c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000340:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000342:	6a3b      	ldr	r3, [r7, #32]
 8000344:	fa93 f3a3 	rbit	r3, r3
 8000348:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	fab3 f383 	clz	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000356:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800035c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000364:	4619      	mov	r1, r3
 8000366:	2302      	movs	r3, #2
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036c:	fa93 f3a3 	rbit	r3, r3
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000374:	fab3 f383 	clz	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800037e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000382:	4313      	orrs	r3, r2
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800038a:	2b10      	cmp	r3, #16
 800038c:	d007      	beq.n	800039e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000396:	4313      	orrs	r3, r2
 8000398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800039a:	4313      	orrs	r3, r2
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a8:	2b40      	cmp	r3, #64	; 0x40
 80003aa:	d04f      	beq.n	800044c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003b2:	4313      	orrs	r3, r2
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6912      	ldr	r2, [r2, #16]
 80003c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80003c8:	d003      	beq.n	80003d2 <HAL_ADC_Init+0x136>
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6912      	ldr	r2, [r2, #16]
 80003ce:	2a01      	cmp	r2, #1
 80003d0:	d102      	bne.n	80003d8 <HAL_ADC_Init+0x13c>
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	e000      	b.n	80003da <HAL_ADC_Init+0x13e>
 80003d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80003da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003de:	4313      	orrs	r3, r2
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d125      	bne.n	8000438 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000402:	69ba      	ldr	r2, [r7, #24]
 8000404:	fa92 f2a2 	rbit	r2, r2
 8000408:	617a      	str	r2, [r7, #20]
  return result;
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	4093      	lsls	r3, r2
 8000414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041a:	4313      	orrs	r3, r2
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
 800041e:	e00b      	b.n	8000438 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f043 0220 	orr.w	r2, r3, #32
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <HAL_ADC_Init+0x280>)
 8000440:	4013      	ands	r3, r2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000448:	430b      	orrs	r3, r1
 800044a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <HAL_ADC_Init+0x284>)
 8000454:	4013      	ands	r3, r2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000468:	d003      	beq.n	8000472 <HAL_ADC_Init+0x1d6>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d119      	bne.n	80004a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	3b01      	subs	r3, #1
 8000482:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	fa92 f2a2 	rbit	r2, r2
 800048e:	60fa      	str	r2, [r7, #12]
  return result;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	fa03 f202 	lsl.w	r2, r3, r2
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
 80004a4:	e007      	b.n	80004b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80004b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_ADC_Init+0x288>)
 80004be:	4013      	ands	r3, r2
 80004c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d10b      	bne.n	80004de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f023 0303 	bic.w	r3, r3, #3
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	64da      	str	r2, [r3, #76]	; 0x4c
 80004dc:	e014      	b.n	8000508 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f023 0312 	bic.w	r3, r3, #18
 80004e6:	f043 0210 	orr.w	r2, r3, #16
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004f2:	f043 0201 	orr.w	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000500:	e002      	b.n	8000508 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800050c:	4618      	mov	r0, r3
 800050e:	3738      	adds	r7, #56	; 0x38
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40023800 	.word	0x40023800
 8000518:	40012700 	.word	0x40012700
 800051c:	fcfc16ff 	.word	0xfcfc16ff
 8000520:	c0fff189 	.word	0xc0fff189
 8000524:	bf80fffe 	.word	0xbf80fffe

08000528 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800053a:	2b01      	cmp	r3, #1
 800053c:	d101      	bne.n	8000542 <HAL_ADC_Start+0x1a>
 800053e:	2302      	movs	r3, #2
 8000540:	e04e      	b.n	80005e0 <HAL_ADC_Start+0xb8>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 fa7a 	bl	8000a44 <ADC_Enable>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d141      	bne.n	80005de <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000598:	d106      	bne.n	80005a8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800059e:	f023 0206 	bic.w	r2, r3, #6
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	651a      	str	r2, [r3, #80]	; 0x50
 80005a6:	e002      	b.n	80005ae <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80005be:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005dc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d101      	bne.n	8000602 <HAL_ADC_Stop+0x1a>
 80005fe:	2302      	movs	r3, #2
 8000600:	e01a      	b.n	8000638 <HAL_ADC_Stop+0x50>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fa70 	bl	8000af0 <ADC_ConversionStop_Disable>
 8000610:	4603      	mov	r3, r0
 8000612:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d109      	bne.n	800062e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	f043 0201 	orr.w	r2, r3, #1
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800065c:	d113      	bne.n	8000686 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800066c:	d10b      	bne.n	8000686 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f043 0220 	orr.w	r2, r3, #32
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e061      	b.n	800074a <HAL_ADC_PollForConversion+0x10a>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000686:	f7ff fddd 	bl	8000244 <HAL_GetTick>
 800068a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800068c:	e01a      	b.n	80006c4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000694:	d016      	beq.n	80006c4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d007      	beq.n	80006ac <HAL_ADC_PollForConversion+0x6c>
 800069c:	f7ff fdd2 	bl	8000244 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d20b      	bcs.n	80006c4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b0:	f043 0204 	orr.w	r2, r3, #4
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	64da      	str	r2, [r3, #76]	; 0x4c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        
        return HAL_TIMEOUT;
 80006c0:	2303      	movs	r3, #3
 80006c2:	e042      	b.n	800074a <HAL_ADC_PollForConversion+0x10a>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0dd      	beq.n	800068e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d104      	bne.n	80006e4 <HAL_ADC_PollForConversion+0xa4>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f06f 0212 	mvn.w	r2, #18
 80006e2:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d124      	bne.n	8000748 <HAL_ADC_PollForConversion+0x108>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000704:	2b00      	cmp	r3, #0
 8000706:	d11f      	bne.n	8000748 <HAL_ADC_PollForConversion+0x108>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000712:	2b00      	cmp	r3, #0
 8000714:	d006      	beq.n	8000724 <HAL_ADC_PollForConversion+0xe4>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000720:	2b00      	cmp	r3, #0
 8000722:	d111      	bne.n	8000748 <HAL_ADC_PollForConversion+0x108>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <HAL_ADC_PollForConversion+0x108>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	f043 0201 	orr.w	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000784:	2b01      	cmp	r3, #1
 8000786:	d101      	bne.n	800078c <HAL_ADC_ConfigChannel+0x20>
 8000788:	2302      	movs	r3, #2
 800078a:	e14f      	b.n	8000a2c <HAL_ADC_ConfigChannel+0x2c0>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b06      	cmp	r3, #6
 800079a:	d81c      	bhi.n	80007d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	4413      	add	r3, r2
 80007ac:	3b05      	subs	r3, #5
 80007ae:	221f      	movs	r2, #31
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4019      	ands	r1, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	3b05      	subs	r3, #5
 80007c8:	fa00 f203 	lsl.w	r2, r0, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
 80007d4:	e07e      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d81c      	bhi.n	8000818 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	3b23      	subs	r3, #35	; 0x23
 80007f0:	221f      	movs	r2, #31
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	4019      	ands	r1, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	3b23      	subs	r3, #35	; 0x23
 800080a:	fa00 f203 	lsl.w	r2, r0, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	430a      	orrs	r2, r1
 8000814:	63da      	str	r2, [r3, #60]	; 0x3c
 8000816:	e05d      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b12      	cmp	r3, #18
 800081e:	d81c      	bhi.n	800085a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	3b41      	subs	r3, #65	; 0x41
 8000832:	221f      	movs	r2, #31
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	4019      	ands	r1, r3
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	3b41      	subs	r3, #65	; 0x41
 800084c:	fa00 f203 	lsl.w	r2, r0, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	430a      	orrs	r2, r1
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
 8000858:	e03c      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b18      	cmp	r3, #24
 8000860:	d81c      	bhi.n	800089c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	3b5f      	subs	r3, #95	; 0x5f
 8000874:	221f      	movs	r2, #31
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	4019      	ands	r1, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	3b5f      	subs	r3, #95	; 0x5f
 800088e:	fa00 f203 	lsl.w	r2, r0, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e01b      	b.n	80008d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	3b7d      	subs	r3, #125	; 0x7d
 80008ae:	221f      	movs	r2, #31
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4019      	ands	r1, r3
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	3b7d      	subs	r3, #125	; 0x7d
 80008c8:	fa00 f203 	lsl.w	r2, r0, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b09      	cmp	r3, #9
 80008da:	d81a      	bhi.n	8000912 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6959      	ldr	r1, [r3, #20]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	2207      	movs	r2, #7
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4019      	ands	r1, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	6898      	ldr	r0, [r3, #8]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	fa00 f203 	lsl.w	r2, r0, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	e05d      	b.n	80009ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b13      	cmp	r3, #19
 8000918:	d81c      	bhi.n	8000954 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6919      	ldr	r1, [r3, #16]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	3b1e      	subs	r3, #30
 800092c:	2207      	movs	r2, #7
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	4019      	ands	r1, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	6898      	ldr	r0, [r3, #8]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	3b1e      	subs	r3, #30
 8000946:	fa00 f203 	lsl.w	r2, r0, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	e03c      	b.n	80009ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b1d      	cmp	r3, #29
 800095a:	d81c      	bhi.n	8000996 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	68d9      	ldr	r1, [r3, #12]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	3b3c      	subs	r3, #60	; 0x3c
 800096e:	2207      	movs	r2, #7
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	4019      	ands	r1, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	6898      	ldr	r0, [r3, #8]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	3b3c      	subs	r3, #60	; 0x3c
 8000988:	fa00 f203 	lsl.w	r2, r0, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	430a      	orrs	r2, r1
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	e01b      	b.n	80009ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	3b5a      	subs	r3, #90	; 0x5a
 80009a8:	2207      	movs	r2, #7
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4019      	ands	r1, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	6898      	ldr	r0, [r3, #8]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	3b5a      	subs	r3, #90	; 0x5a
 80009c2:	fa00 f203 	lsl.w	r2, r0, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b10      	cmp	r3, #16
 80009d4:	d003      	beq.n	80009de <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80009da:	2b11      	cmp	r3, #17
 80009dc:	d121      	bne.n	8000a22 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_ADC_ConfigChannel+0x2cc>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d11b      	bne.n	8000a22 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_ADC_ConfigChannel+0x2cc>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <HAL_ADC_ConfigChannel+0x2cc>)
 80009f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f4:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b10      	cmp	r3, #16
 80009fc:	d111      	bne.n	8000a22 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_ADC_ConfigChannel+0x2d0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <HAL_ADC_ConfigChannel+0x2d4>)
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
 8000a08:	0c9a      	lsrs	r2, r3, #18
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000a14:	e002      	b.n	8000a1c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f9      	bne.n	8000a16 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40012700 	.word	0x40012700
 8000a3c:	2000001c 	.word	0x2000001c
 8000a40:	431bde83 	.word	0x431bde83

08000a44 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5e:	2b40      	cmp	r3, #64	; 0x40
 8000a60:	d03c      	beq.n	8000adc <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f042 0201 	orr.w	r2, r2, #1
 8000a70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <ADC_Enable+0xa4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <ADC_Enable+0xa8>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	0c9a      	lsrs	r2, r3, #18
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000a86:	e002      	b.n	8000a8e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8000a94:	f7ff fbd6 	bl	8000244 <HAL_GetTick>
 8000a98:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a9a:	e018      	b.n	8000ace <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000a9c:	f7ff fbd2 	bl	8000244 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d911      	bls.n	8000ace <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f043 0210 	orr.w	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000aba:	f043 0201 	orr.w	r2, r3, #1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e007      	b.n	8000ade <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad8:	2b40      	cmp	r3, #64	; 0x40
 8000ada:	d1df      	bne.n	8000a9c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000001c 	.word	0x2000001c
 8000aec:	431bde83 	.word	0x431bde83

08000af0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	2b40      	cmp	r3, #64	; 0x40
 8000b08:	d127      	bne.n	8000b5a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0201 	bic.w	r2, r2, #1
 8000b18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b1a:	f7ff fb93 	bl	8000244 <HAL_GetTick>
 8000b1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b20:	e014      	b.n	8000b4c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8000b22:	f7ff fb8f 	bl	8000244 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d90d      	bls.n	8000b4c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f043 0210 	orr.w	r2, r3, #16
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	651a      	str	r2, [r3, #80]	; 0x50
        
        return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e007      	b.n	8000b5c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	2b40      	cmp	r3, #64	; 0x40
 8000b58:	d0e3      	beq.n	8000b22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2d 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff42 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff35 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d96:	e160      	b.n	800105a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8152 	beq.w	8001054 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	6939      	ldr	r1, [r7, #16]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d00b      	beq.n	8000e5c <HAL_GPIO_Init+0xdc>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e50:	2b11      	cmp	r3, #17
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80ac 	beq.w	8001054 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a5c      	ldr	r2, [pc, #368]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000f14:	4a58      	ldr	r2, [pc, #352]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a50      	ldr	r2, [pc, #320]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d025      	beq.n	8000f8c <HAL_GPIO_Init+0x20c>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d01f      	beq.n	8000f88 <HAL_GPIO_Init+0x208>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x304>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d019      	beq.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x308>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d013      	beq.n	8000f80 <HAL_GPIO_Init+0x200>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_GPIO_Init+0x30c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1fc>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <HAL_GPIO_Init+0x310>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1f8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a4a      	ldr	r2, [pc, #296]	; (8001094 <HAL_GPIO_Init+0x314>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1f4>
 8000f70:	2306      	movs	r3, #6
 8000f72:	e00c      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f74:	2307      	movs	r3, #7
 8000f76:	e00a      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f78:	2305      	movs	r3, #5
 8000f7a:	e008      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	e006      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f80:	2303      	movs	r3, #3
 8000f82:	e004      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e002      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f002 0203 	and.w	r2, r2, #3
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f9e:	4936      	ldr	r1, [pc, #216]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <HAL_GPIO_Init+0x318>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd0:	4a31      	ldr	r2, [pc, #196]	; (8001098 <HAL_GPIO_Init+0x318>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_GPIO_Init+0x318>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffa:	4a27      	ldr	r2, [pc, #156]	; (8001098 <HAL_GPIO_Init+0x318>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_GPIO_Init+0x318>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_GPIO_Init+0x318>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_GPIO_Init+0x318>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <HAL_GPIO_Init+0x318>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f ae97 	bne.w	8000d98 <HAL_GPIO_Init+0x18>
  } 
}
 800106a:	bf00      	nop
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40023800 	.word	0x40023800
 8001078:	40010000 	.word	0x40010000
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400
 8001094:	40021800 	.word	0x40021800
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	807b      	strh	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010da:	787b      	ldrb	r3, [r7, #1]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80010e6:	e003      	b.n	80010f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	041a      	lsls	r2, r3, #16
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e31d      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110e:	4b94      	ldr	r3, [pc, #592]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001118:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d07b      	beq.n	8001226 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d006      	beq.n	8001142 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d10f      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06a      	beq.n	8001224 <HAL_RCC_OscConfig+0x128>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d166      	bne.n	8001224 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e2f7      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e02d      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x96>
 8001178:	4b79      	ldr	r3, [pc, #484]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a75      	ldr	r2, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e01c      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b05      	cmp	r3, #5
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0xb8>
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a70      	ldr	r2, [pc, #448]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6d      	ldr	r2, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a69      	ldr	r2, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b67      	ldr	r3, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a66      	ldr	r2, [pc, #408]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff f836 	bl	8000244 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff f832 	bl	8000244 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e2ad      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
 80011fa:	e014      	b.n	8001226 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff f822 	bl	8000244 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff f81e 	bl	8000244 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e299      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d05a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d119      	bne.n	8001272 <HAL_RCC_OscConfig+0x176>
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d116      	bne.n	8001272 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x160>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e276      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	493d      	ldr	r1, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001270:	e03a      	b.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d020      	beq.n	80012bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_RCC_OscConfig+0x268>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7fe ffe0 	bl	8000244 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7fe ffdc 	bl	8000244 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e257      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	492a      	ldr	r1, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_OscConfig+0x268>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7fe ffbf 	bl	8000244 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ca:	f7fe ffbb 	bl	8000244 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e236      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b8 	beq.w	8001466 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d170      	bne.n	80013de <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x218>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e21a      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001320:	429a      	cmp	r2, r3
 8001322:	d921      	bls.n	8001368 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fbd5 	bl	8001ad8 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e208      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	4901      	ldr	r1, [pc, #4]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e020      	b.n	80013a2 <HAL_RCC_OscConfig+0x2a6>
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001368:	4ba4      	ldr	r3, [pc, #656]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	49a1      	ldr	r1, [pc, #644]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137a:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	061b      	lsls	r3, r3, #24
 8001388:	499c      	ldr	r1, [pc, #624]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fba0 	bl	8001ad8 <RCC_SetFlashLatencyFromMSIRange>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1d3      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	3301      	adds	r3, #1
 80013aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013b2:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80013b4:	6892      	ldr	r2, [r2, #8]
 80013b6:	0912      	lsrs	r2, r2, #4
 80013b8:	f002 020f 	and.w	r2, r2, #15
 80013bc:	4990      	ldr	r1, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80013be:	5c8a      	ldrb	r2, [r1, r2]
 80013c0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013c2:	4a90      	ldr	r2, [pc, #576]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 80013c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013c6:	4b90      	ldr	r3, [pc, #576]	; (8001608 <HAL_RCC_OscConfig+0x50c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe feee 	bl	80001ac <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d045      	beq.n	8001466 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	e1b5      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d029      	beq.n	800143a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x510>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7fe ff2a 	bl	8000244 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f4:	f7fe ff26 	bl	8000244 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1a1      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4977      	ldr	r1, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001424:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	4972      	ldr	r1, [pc, #456]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800143a:	4b74      	ldr	r3, [pc, #464]	; (800160c <HAL_RCC_OscConfig+0x510>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7fe ff00 	bl	8000244 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001448:	f7fe fefc 	bl	8000244 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e177      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x514>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7fe fee0 	bl	8000244 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7fe fedc 	bl	8000244 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e157      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x38c>
 80014a6:	e015      	b.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_OscConfig+0x514>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7fe fec9 	bl	8000244 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7fe fec5 	bl	8000244 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e140      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80b5 	beq.w	800164c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b45      	ldr	r3, [pc, #276]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6253      	str	r3, [r2, #36]	; 0x24
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3d      	ldr	r2, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7fe fe8d 	bl	8000244 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7fe fe89 	bl	8000244 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e104      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x466>
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6353      	str	r3, [r2, #52]	; 0x34
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x488>
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001574:	6353      	str	r3, [r2, #52]	; 0x34
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	4a20      	ldr	r2, [pc, #128]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800157c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001580:	6353      	str	r3, [r2, #52]	; 0x34
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6353      	str	r3, [r2, #52]	; 0x34
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6353      	str	r3, [r2, #52]	; 0x34
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6353      	str	r3, [r2, #52]	; 0x34
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015bc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7fe fe3d 	bl	8000244 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7fe fe39 	bl	8000244 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0b2      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x4d2>
 80015f0:	e023      	b.n	800163a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7fe fe27 	bl	8000244 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f8:	e019      	b.n	800162e <HAL_RCC_OscConfig+0x532>
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	080055f4 	.word	0x080055f4
 8001604:	2000001c 	.word	0x2000001c
 8001608:	20000000 	.word	0x20000000
 800160c:	42470020 	.word	0x42470020
 8001610:	42470680 	.word	0x42470680
 8001614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7fe fe14 	bl	8000244 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e08d      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	4a43      	ldr	r2, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	2b00      	cmp	r3, #0
 8001652:	d079      	beq.n	8001748 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d056      	beq.n	8001708 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b02      	cmp	r3, #2
 8001660:	d13b      	bne.n	80016da <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7fe fdec 	bl	8000244 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7fe fde8 	bl	8000244 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e063      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	4319      	orrs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	430b      	orrs	r3, r1
 80016a6:	492b      	ldr	r1, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7fe fdc7 	bl	8000244 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7fe fdc3 	bl	8000244 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03e      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x5be>
 80016d8:	e036      	b.n	8001748 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7fe fdb0 	bl	8000244 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7fe fdac 	bl	8000244 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e027      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5ec>
 8001706:	e01f      	b.n	8001748 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e01a      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	429a      	cmp	r2, r3
 8001726:	d10d      	bne.n	8001744 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e11a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d919      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_ClockConfig+0x34>
 8001784:	4b8a      	ldr	r3, [pc, #552]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a89      	ldr	r2, [pc, #548]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 0201 	bic.w	r2, r3, #1
 8001798:	4985      	ldr	r1, [pc, #532]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a0:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0f9      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017be:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	497a      	ldr	r1, [pc, #488]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 808e 	beq.w	80018fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d121      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0d7      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d115      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0cb      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0bf      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001826:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0b7      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	495c      	ldr	r1, [pc, #368]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7fe fcfc 	bl	8000244 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d112      	bne.n	800187c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7fe fcf4 	bl	8000244 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e09b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_ClockConfig+0xfc>
 800187a:	e03e      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d112      	bne.n	80018aa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	e00a      	b.n	800189c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7fe fcdd 	bl	8000244 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e084      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d1ee      	bne.n	8001886 <HAL_RCC_ClockConfig+0x12a>
 80018a8:	e027      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d11d      	bne.n	80018ee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7fe fcc6 	bl	8000244 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e06d      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d1ee      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x158>
 80018d6:	e010      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7fe fcb4 	bl	8000244 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e05b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d219      	bcs.n	800193c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_ClockConfig+0x1be>
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0201 	bic.w	r2, r3, #1
 8001922:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e034      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4917      	ldr	r1, [pc, #92]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f823 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800197e:	4601      	mov	r1, r0
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_RCC_ClockConfig+0x25c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	fa21 f303 	lsr.w	r3, r1, r3
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_RCC_ClockConfig+0x260>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x264>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc06 	bl	80001ac <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80019a4:	7afb      	ldrb	r3, [r7, #11]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080055f4 	.word	0x080055f4
 80019bc:	2000001c 	.word	0x2000001c
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d006      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x24>
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d007      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x2a>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d12c      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e4:	613b      	str	r3, [r7, #16]
      break;
 80019e6:	e037      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xa8>)
 80019ea:	613b      	str	r3, [r7, #16]
      break;
 80019ec:	e034      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xac>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	0d9b      	lsrs	r3, r3, #22
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	3301      	adds	r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a18:	fb02 f203 	mul.w	r2, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e007      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a2a:	fb02 f203 	mul.w	r2, r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	613b      	str	r3, [r7, #16]
      break;
 8001a3a:	e00d      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	0b5b      	lsrs	r3, r3, #13
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	613b      	str	r3, [r7, #16]
      break;
 8001a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a58:	693b      	ldr	r3, [r7, #16]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	016e3600 	.word	0x016e3600
 8001a70:	080055e8 	.word	0x080055e8

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	2000001c 	.word	0x2000001c

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08005604 	.word	0x08005604

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4601      	mov	r1, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08005604 	.word	0x08005604

08001ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12c      	bne.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e016      	b.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6253      	str	r3, [r2, #36]	; 0x24
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b3c:	d105      	bne.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b44:	d101      	bne.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b46:	2301      	movs	r3, #1
 8001b48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 0201 	bic.w	r2, r3, #1
 8001b64:	490b      	ldr	r1, [pc, #44]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e056      	b.n	8001c58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f002 fa17 	bl	8003ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	ea42 0103 	orr.w	r1, r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	f003 0104 	and.w	r1, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_SPI_Transmit+0x22>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e11e      	b.n	8001ec0 <HAL_SPI_Transmit+0x260>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c8a:	f7fe fadb 	bl	8000244 <HAL_GetTick>
 8001c8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d002      	beq.n	8001ca6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ca4:	e103      	b.n	8001eae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_Transmit+0x52>
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cb6:	e0fa      	b.n	8001eae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	88fa      	ldrh	r2, [r7, #6]
 8001cd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfe:	d107      	bne.n	8001d10 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d007      	beq.n	8001d2e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d36:	d14b      	bne.n	8001dd0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_SPI_Transmit+0xe6>
 8001d40:	8afb      	ldrh	r3, [r7, #22]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d13e      	bne.n	8001dc4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	1c9a      	adds	r2, r3, #2
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d6a:	e02b      	b.n	8001dc4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d112      	bne.n	8001da0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	1c9a      	adds	r2, r3, #2
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d9e:	e011      	b.n	8001dc4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da0:	f7fe fa50 	bl	8000244 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d803      	bhi.n	8001db8 <HAL_SPI_Transmit+0x158>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db6:	d102      	bne.n	8001dbe <HAL_SPI_Transmit+0x15e>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dc2:	e074      	b.n	8001eae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ce      	bne.n	8001d6c <HAL_SPI_Transmit+0x10c>
 8001dce:	e04c      	b.n	8001e6a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_SPI_Transmit+0x17e>
 8001dd8:	8afb      	ldrh	r3, [r7, #22]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d140      	bne.n	8001e60 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	330c      	adds	r3, #12
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e04:	e02c      	b.n	8001e60 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d113      	bne.n	8001e3c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e3a:	e011      	b.n	8001e60 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e3c:	f7fe fa02 	bl	8000244 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d803      	bhi.n	8001e54 <HAL_SPI_Transmit+0x1f4>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e52:	d102      	bne.n	8001e5a <HAL_SPI_Transmit+0x1fa>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e5e:	e026      	b.n	8001eae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1cd      	bne.n	8001e06 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f894 	bl	8001f9c <SPI_EndRxTxTransaction>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]
 8001eaa:	e000      	b.n	8001eae <HAL_SPI_Transmit+0x24e>
  }

error:
 8001eac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ed8:	e04c      	b.n	8001f74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ee0:	d048      	beq.n	8001f74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ee2:	f7fe f9af 	bl	8000244 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d902      	bls.n	8001ef8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d13d      	bne.n	8001f74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f10:	d111      	bne.n	8001f36 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1a:	d004      	beq.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f24:	d107      	bne.n	8001f36 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	d10f      	bne.n	8001f60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e00f      	b.n	8001f94 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d1a3      	bne.n	8001eda <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb0:	d112      	bne.n	8001fd8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff83 	bl	8001ec8 <SPI_WaitFlagStateUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e019      	b.n	800200c <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d112      	bne.n	800200a <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	2101      	movs	r1, #1
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff ff6a 	bl	8001ec8 <SPI_WaitFlagStateUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e000      	b.n	800200c <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d007      	beq.n	800204e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e01d      	b.n	80020a8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f002 fa2d 	bl	80044e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f000 fadd 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e01d      	b.n	80020fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f002 f9e4 	bl	80044a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fab2 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fc02 	bl	8002922 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b06      	cmp	r3, #6
 800212e:	d007      	beq.n	8002140 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fbe0 	bl	8002922 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	f241 1311 	movw	r3, #4369	; 0x1111
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_TIM_PWM_Stop+0x38>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e02d      	b.n	8002204 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f002 f9b5 	bl	800452c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f000 fa3f 	bl	8002658 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d122      	bne.n	8002268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b02      	cmp	r3, #2
 800222e:	d11b      	bne.n	8002268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0202 	mvn.w	r2, #2
 8002238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f9e7 	bl	8002622 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f9da 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9e9 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b04      	cmp	r3, #4
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b04      	cmp	r3, #4
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0204 	mvn.w	r2, #4
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f9bd 	bl	8002622 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9b0 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9bf 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0208 	mvn.w	r2, #8
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2204      	movs	r2, #4
 80022e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f993 	bl	8002622 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f986 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f995 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b10      	cmp	r3, #16
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b10      	cmp	r3, #16
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0210 	mvn.w	r2, #16
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2208      	movs	r2, #8
 800233a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f969 	bl	8002622 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f95c 	bl	8002610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f96b 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0201 	mvn.w	r2, #1
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f8c0 	bl	8003510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f945 	bl	8002646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_TIM_OC_ConfigChannel+0x1a>
 80023da:	2302      	movs	r3, #2
 80023dc:	e04e      	b.n	800247c <HAL_TIM_OC_ConfigChannel+0xb8>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d839      	bhi.n	8002468 <HAL_TIM_OC_ConfigChannel+0xa4>
 80023f4:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_TIM_OC_ConfigChannel+0x38>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	08002431 	.word	0x08002431
 8002400:	08002469 	.word	0x08002469
 8002404:	08002469 	.word	0x08002469
 8002408:	08002469 	.word	0x08002469
 800240c:	0800243f 	.word	0x0800243f
 8002410:	08002469 	.word	0x08002469
 8002414:	08002469 	.word	0x08002469
 8002418:	08002469 	.word	0x08002469
 800241c:	0800244d 	.word	0x0800244d
 8002420:	08002469 	.word	0x08002469
 8002424:	08002469 	.word	0x08002469
 8002428:	08002469 	.word	0x08002469
 800242c:	0800245b 	.word	0x0800245b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f97e 	bl	8002738 <TIM_OC1_SetConfig>
      break;
 800243c:	e015      	b.n	800246a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f9b3 	bl	80027b0 <TIM_OC2_SetConfig>
      break;
 800244a:	e00e      	b.n	800246a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f9ea 	bl	800282c <TIM_OC3_SetConfig>
      break;
 8002458:	e007      	b.n	800246a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fa20 	bl	80028a6 <TIM_OC4_SetConfig>
      break;
 8002466:	e000      	b.n	800246a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002468:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800249a:	2302      	movs	r3, #2
 800249c:	e0b4      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x184>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	f200 809f 	bhi.w	80025f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	080025f5 	.word	0x080025f5
 80024c4:	080025f5 	.word	0x080025f5
 80024c8:	080025f5 	.word	0x080025f5
 80024cc:	08002531 	.word	0x08002531
 80024d0:	080025f5 	.word	0x080025f5
 80024d4:	080025f5 	.word	0x080025f5
 80024d8:	080025f5 	.word	0x080025f5
 80024dc:	08002573 	.word	0x08002573
 80024e0:	080025f5 	.word	0x080025f5
 80024e4:	080025f5 	.word	0x080025f5
 80024e8:	080025f5 	.word	0x080025f5
 80024ec:	080025b3 	.word	0x080025b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f91e 	bl	8002738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
      break;
 800252e:	e062      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f93a 	bl	80027b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
      break;
 8002570:	e041      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f957 	bl	800282c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0208 	orr.w	r2, r2, #8
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	61da      	str	r2, [r3, #28]
      break;
 80025b0:	e021      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f974 	bl	80028a6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69d9      	ldr	r1, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	61da      	str	r2, [r3, #28]
      break;
 80025f2:	e000      	b.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80025f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d00f      	beq.n	8002690 <TIM_Base_SetConfig+0x38>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <TIM_Base_SetConfig+0xc8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <TIM_Base_SetConfig+0x38>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <TIM_Base_SetConfig+0xcc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <TIM_Base_SetConfig+0x38>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <TIM_Base_SetConfig+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0x38>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a28      	ldr	r2, [pc, #160]	; (800272c <TIM_Base_SetConfig+0xd4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d108      	bne.n	80026a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d017      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <TIM_Base_SetConfig+0xc8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <TIM_Base_SetConfig+0xcc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00f      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <TIM_Base_SetConfig+0xd0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00b      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <TIM_Base_SetConfig+0xd4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <TIM_Base_SetConfig+0xd8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d003      	beq.n	80026da <TIM_Base_SetConfig+0x82>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <TIM_Base_SetConfig+0xdc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d108      	bne.n	80026ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40010800 	.word	0x40010800
 8002730:	40010c00 	.word	0x40010c00
 8002734:	40011000 	.word	0x40011000

08002738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0210 	bic.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0320 	bic.w	r3, r3, #32
 80027fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	621a      	str	r2, [r3, #32]
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	031b      	lsls	r3, r3, #12
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2201      	movs	r2, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	43db      	mvns	r3, r3
 8002944:	401a      	ands	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1a      	ldr	r2, [r3, #32]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	431a      	orrs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	621a      	str	r2, [r3, #32]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800297e:	2302      	movs	r3, #2
 8002980:	e032      	b.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e03f      	b.n	8002a84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f001 fe2d 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2224      	movs	r2, #36	; 0x24
 8002a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f90c 	bl	8002c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	f040 8083 	bne.w	8002bb4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_UART_Transmit+0x2e>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07b      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x40>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e074      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2221      	movs	r2, #33	; 0x21
 8002ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ae2:	f7fd fbaf 	bl	8000244 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002af4:	e042      	b.n	8002b7c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d122      	bne.n	8002b54 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f850 	bl	8002bbe <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e046      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3302      	adds	r3, #2
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e017      	b.n	8002b7c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	e013      	b.n	8002b7c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f82d 	bl	8002bbe <UART_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e023      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	60ba      	str	r2, [r7, #8]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1b7      	bne.n	8002af6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f814 	bl	8002bbe <UART_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e00a      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bce:	e02c      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd6:	d028      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <UART_WaitOnFlagUntilTimeout+0x30>
 8002bde:	f7fd fb31 	bl	8000244 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d21d      	bcs.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e00f      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0c3      	beq.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c94:	f023 030c 	bic.w	r3, r3, #12
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	f040 80a5 	bne.w	8002e0e <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4aa4      	ldr	r2, [pc, #656]	; (8002f5c <UART_SetConfig+0x308>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d14f      	bne.n	8002d6e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cce:	f7fe feef 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002cd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4a9d      	ldr	r2, [pc, #628]	; (8002f60 <UART_SetConfig+0x30c>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	0119      	lsls	r1, r3, #4
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d0a:	4b95      	ldr	r3, [pc, #596]	; (8002f60 <UART_SetConfig+0x30c>)
 8002d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2064      	movs	r0, #100	; 0x64
 8002d14:	fb00 f303 	mul.w	r3, r0, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a90      	ldr	r2, [pc, #576]	; (8002f60 <UART_SetConfig+0x30c>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2c:	4419      	add	r1, r3
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009a      	lsls	r2, r3, #2
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d44:	4b86      	ldr	r3, [pc, #536]	; (8002f60 <UART_SetConfig+0x30c>)
 8002d46:	fba3 0302 	umull	r0, r3, r3, r2
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2064      	movs	r0, #100	; 0x64
 8002d4e:	fb00 f303 	mul.w	r3, r0, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	3332      	adds	r3, #50	; 0x32
 8002d58:	4a81      	ldr	r2, [pc, #516]	; (8002f60 <UART_SetConfig+0x30c>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	f003 0207 	and.w	r2, r3, #7
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	440a      	add	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d6c:	e0f1      	b.n	8002f52 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d6e:	f7fe fe8b 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002d72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009a      	lsls	r2, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <UART_SetConfig+0x30c>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	0119      	lsls	r1, r3, #4
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009a      	lsls	r2, r3, #2
 8002d9e:	441a      	add	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <UART_SetConfig+0x30c>)
 8002dac:	fba3 0302 	umull	r0, r3, r3, r2
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	2064      	movs	r0, #100	; 0x64
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	3332      	adds	r3, #50	; 0x32
 8002dbe:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <UART_SetConfig+0x30c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dcc:	4419      	add	r1, r3
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <UART_SetConfig+0x30c>)
 8002de6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2064      	movs	r0, #100	; 0x64
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	3332      	adds	r3, #50	; 0x32
 8002df8:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <UART_SetConfig+0x30c>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	f003 0207 	and.w	r2, r3, #7
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	440a      	add	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	e0a1      	b.n	8002f52 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <UART_SetConfig+0x308>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d14e      	bne.n	8002eb6 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e18:	f7fe fe4a 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <UART_SetConfig+0x30c>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	0119      	lsls	r1, r3, #4
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <UART_SetConfig+0x30c>)
 8002e56:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2064      	movs	r0, #100	; 0x64
 8002e5e:	fb00 f303 	mul.w	r3, r0, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a3d      	ldr	r2, [pc, #244]	; (8002f60 <UART_SetConfig+0x30c>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	4419      	add	r1, r3
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <UART_SetConfig+0x30c>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <UART_SetConfig+0x30c>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	e04d      	b.n	8002f52 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eb6:	f7fe fde7 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <UART_SetConfig+0x30c>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	0119      	lsls	r1, r3, #4
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <UART_SetConfig+0x30c>)
 8002ef4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	2064      	movs	r0, #100	; 0x64
 8002efc:	fb00 f303 	mul.w	r3, r0, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	3332      	adds	r3, #50	; 0x32
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <UART_SetConfig+0x30c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f12:	4419      	add	r1, r3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009a      	lsls	r2, r3, #2
 8002f1e:	441a      	add	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <UART_SetConfig+0x30c>)
 8002f2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2064      	movs	r0, #100	; 0x64
 8002f34:	fb00 f303 	mul.w	r3, r0, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <UART_SetConfig+0x30c>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	440a      	add	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	51eb851f 	.word	0x51eb851f

08002f64 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <MX_ADC_Init+0xc8>)
 8002f76:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <MX_ADC_Init+0xcc>)
 8002f78:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <MX_ADC_Init+0xc8>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <MX_ADC_Init+0xc8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <MX_ADC_Init+0xc8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <MX_ADC_Init+0xc8>)
 8002f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f92:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <MX_ADC_Init+0xc8>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <MX_ADC_Init+0xc8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <MX_ADC_Init+0xc8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <MX_ADC_Init+0xc8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <MX_ADC_Init+0xc8>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <MX_ADC_Init+0xc8>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <MX_ADC_Init+0xc8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <MX_ADC_Init+0xc8>)
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <MX_ADC_Init+0xc8>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_ADC_Init+0xc8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002fd6:	4815      	ldr	r0, [pc, #84]	; (800302c <MX_ADC_Init+0xc8>)
 8002fd8:	f7fd f960 	bl	800029c <HAL_ADC_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8002fe2:	f000 ffcc 	bl	8003f7e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <MX_ADC_Init+0xc8>)
 8002ff8:	f7fd fbb8 	bl	800076c <HAL_ADC_ConfigChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8003002:	f000 ffbc 	bl	8003f7e <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800300a:	2302      	movs	r3, #2
 800300c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4806      	ldr	r0, [pc, #24]	; (800302c <MX_ADC_Init+0xc8>)
 8003014:	f7fd fbaa 	bl	800076c <HAL_ADC_ConfigChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800301e:	f000 ffae 	bl	8003f7e <Error_Handler>
  }

}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200000bc 	.word	0x200000bc
 8003030:	40012400 	.word	0x40012400

08003034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_ADC_MspInit+0x74>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d123      	bne.n	800309e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_ADC_MspInit+0x78>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_ADC_MspInit+0x78>)
 800305c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003060:	6213      	str	r3, [r2, #32]
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_ADC_MspInit+0x78>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <HAL_ADC_MspInit+0x78>)
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <HAL_ADC_MspInit+0x78>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	61d3      	str	r3, [r2, #28]
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_ADC_MspInit+0x78>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = RV2_Pin|RV1_Pin;
 8003086:	2303      	movs	r3, #3
 8003088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308a:	2303      	movs	r3, #3
 800308c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <HAL_ADC_MspInit+0x7c>)
 800309a:	f7fd fe71 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800309e:	bf00      	nop
 80030a0:	3728      	adds	r7, #40	; 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40012400 	.word	0x40012400
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020000 	.word	0x40020000

080030b4 <SPI_write>:
 */

#include "../Inc/display.h"

void SPI_write(uint8_t add, uint8_t data)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	460a      	mov	r2, r1
 80030be:	71fb      	strb	r3, [r7, #7]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 80030c4:	2201      	movs	r2, #1
 80030c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ca:	480f      	ldr	r0, [pc, #60]	; (8003108 <SPI_write+0x54>)
 80030cc:	f7fd fffd 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030d6:	480c      	ldr	r0, [pc, #48]	; (8003108 <SPI_write+0x54>)
 80030d8:	f7fd fff7 	bl	80010ca <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&add, sizeof(uint8_t), 10);
 80030dc:	1df9      	adds	r1, r7, #7
 80030de:	230a      	movs	r3, #10
 80030e0:	2201      	movs	r2, #1
 80030e2:	480a      	ldr	r0, [pc, #40]	; (800310c <SPI_write+0x58>)
 80030e4:	f7fe fdbc 	bl	8001c60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data, sizeof(uint8_t), 10);
 80030e8:	1db9      	adds	r1, r7, #6
 80030ea:	230a      	movs	r3, #10
 80030ec:	2201      	movs	r2, #1
 80030ee:	4807      	ldr	r0, [pc, #28]	; (800310c <SPI_write+0x58>)
 80030f0:	f7fe fdb6 	bl	8001c60 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 80030f4:	2201      	movs	r2, #1
 80030f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fa:	4803      	ldr	r0, [pc, #12]	; (8003108 <SPI_write+0x54>)
 80030fc:	f7fd ffe5 	bl	80010ca <HAL_GPIO_WritePin>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40020000 	.word	0x40020000
 800310c:	20000120 	.word	0x20000120

08003110 <MAX7219_Config>:

void MAX7219_Config(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	/* Max 7219 configuration */

	SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8003114:	2101      	movs	r1, #1
 8003116:	200c      	movs	r0, #12
 8003118:	f7ff ffcc 	bl	80030b4 <SPI_write>
	SPI_write(0x0A, 0x0F);//Intensité lumineuse au MAAAX
 800311c:	210f      	movs	r1, #15
 800311e:	200a      	movs	r0, #10
 8003120:	f7ff ffc8 	bl	80030b4 <SPI_write>

	SPI_write(0x09, 0x0F);
 8003124:	210f      	movs	r1, #15
 8003126:	2009      	movs	r0, #9
 8003128:	f7ff ffc4 	bl	80030b4 <SPI_write>
	SPI_write(0x0B, 0x03);//Utiliser 4 afficheurs (Scan limit à 0x03 : Afficher digits 0 1 2 3)
 800312c:	2103      	movs	r1, #3
 800312e:	200b      	movs	r0, #11
 8003130:	f7ff ffc0 	bl	80030b4 <SPI_write>
	SPI_write(0x0F, 0x00);//Display Test à 0 : Mode test off, mode affichage normal on
 8003134:	2100      	movs	r1, #0
 8003136:	200f      	movs	r0, #15
 8003138:	f7ff ffbc 	bl	80030b4 <SPI_write>
	SPI_write(0x01, 0x0F);
 800313c:	210f      	movs	r1, #15
 800313e:	2001      	movs	r0, #1
 8003140:	f7ff ffb8 	bl	80030b4 <SPI_write>
	SPI_write(0x02, 0x0F);
 8003144:	210f      	movs	r1, #15
 8003146:	2002      	movs	r0, #2
 8003148:	f7ff ffb4 	bl	80030b4 <SPI_write>
	SPI_write(0x03, 0x0F);
 800314c:	210f      	movs	r1, #15
 800314e:	2003      	movs	r0, #3
 8003150:	f7ff ffb0 	bl	80030b4 <SPI_write>
	SPI_write(0x04, 0x0F);
 8003154:	210f      	movs	r1, #15
 8003156:	2004      	movs	r0, #4
 8003158:	f7ff ffac 	bl	80030b4 <SPI_write>

}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <Segment_Display>:

void Segment_Display(uint16_t fq)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
	uint8_t unite= 0, dizaine = 0, centaine = 0, millier = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	2300      	movs	r3, #0
 8003170:	73bb      	strb	r3, [r7, #14]
 8003172:	2300      	movs	r3, #0
 8003174:	737b      	strb	r3, [r7, #13]
 8003176:	2300      	movs	r3, #0
 8003178:	733b      	strb	r3, [r7, #12]

	unite = (fq%10);
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <Segment_Display+0x118>)
 800317e:	fba3 1302 	umull	r1, r3, r3, r2
 8003182:	08d9      	lsrs	r1, r3, #3
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	73fb      	strb	r3, [r7, #15]
	dizaine = ((fq%100)-(fq%10))/10;
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4a39      	ldr	r2, [pc, #228]	; (800327c <Segment_Display+0x11c>)
 8003196:	fba2 1203 	umull	r1, r2, r2, r3
 800319a:	0952      	lsrs	r2, r2, #5
 800319c:	2164      	movs	r1, #100	; 0x64
 800319e:	fb01 f202 	mul.w	r2, r1, r2
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	88fa      	ldrh	r2, [r7, #6]
 80031aa:	4b33      	ldr	r3, [pc, #204]	; (8003278 <Segment_Display+0x118>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	08d9      	lsrs	r1, r3, #3
 80031b2:	460b      	mov	r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ac3      	subs	r3, r0, r3
 80031c0:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <Segment_Display+0x120>)
 80031c2:	fb82 1203 	smull	r1, r2, r2, r3
 80031c6:	1092      	asrs	r2, r2, #2
 80031c8:	17db      	asrs	r3, r3, #31
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	73bb      	strb	r3, [r7, #14]
	centaine = ((fq%1000)-(fq%100))/100;
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <Segment_Display+0x124>)
 80031d2:	fba2 1203 	umull	r1, r2, r2, r3
 80031d6:	0992      	lsrs	r2, r2, #6
 80031d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80031dc:	fb01 f202 	mul.w	r2, r1, r2
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <Segment_Display+0x11c>)
 80031ea:	fba2 1203 	umull	r1, r2, r2, r3
 80031ee:	0952      	lsrs	r2, r2, #5
 80031f0:	2164      	movs	r1, #100	; 0x64
 80031f2:	fb01 f202 	mul.w	r2, r1, r2
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	1ac3      	subs	r3, r0, r3
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <Segment_Display+0x11c>)
 80031fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003202:	1152      	asrs	r2, r2, #5
 8003204:	17db      	asrs	r3, r3, #31
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	737b      	strb	r3, [r7, #13]
	millier = ((fq%10000)-(fq%1000))/1000;
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <Segment_Display+0x128>)
 800320e:	fba2 1203 	umull	r1, r2, r2, r3
 8003212:	0b52      	lsrs	r2, r2, #13
 8003214:	f242 7110 	movw	r1, #10000	; 0x2710
 8003218:	fb01 f202 	mul.w	r2, r1, r2
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	4a17      	ldr	r2, [pc, #92]	; (8003284 <Segment_Display+0x124>)
 8003226:	fba2 1203 	umull	r1, r2, r2, r3
 800322a:	0992      	lsrs	r2, r2, #6
 800322c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003230:	fb01 f202 	mul.w	r2, r1, r2
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	1ac3      	subs	r3, r0, r3
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <Segment_Display+0x124>)
 800323c:	fb82 1203 	smull	r1, r2, r2, r3
 8003240:	1192      	asrs	r2, r2, #6
 8003242:	17db      	asrs	r3, r3, #31
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	733b      	strb	r3, [r7, #12]


	//	printf("fq = %d%d%d%d\n",millier,centaine,dizaine,unite);

	SPI_write(0x04,unite);
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	4619      	mov	r1, r3
 800324c:	2004      	movs	r0, #4
 800324e:	f7ff ff31 	bl	80030b4 <SPI_write>
	SPI_write(0x03,dizaine);
 8003252:	7bbb      	ldrb	r3, [r7, #14]
 8003254:	4619      	mov	r1, r3
 8003256:	2003      	movs	r0, #3
 8003258:	f7ff ff2c 	bl	80030b4 <SPI_write>
	SPI_write(0x02, centaine);
 800325c:	7b7b      	ldrb	r3, [r7, #13]
 800325e:	4619      	mov	r1, r3
 8003260:	2002      	movs	r0, #2
 8003262:	f7ff ff27 	bl	80030b4 <SPI_write>
	SPI_write(0x01, millier);
 8003266:	7b3b      	ldrb	r3, [r7, #12]
 8003268:	4619      	mov	r1, r3
 800326a:	2001      	movs	r0, #1
 800326c:	f7ff ff22 	bl	80030b4 <SPI_write>
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	cccccccd 	.word	0xcccccccd
 800327c:	51eb851f 	.word	0x51eb851f
 8003280:	66666667 	.word	0x66666667
 8003284:	10624dd3 	.word	0x10624dd3
 8003288:	d1b71759 	.word	0xd1b71759

0800328c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	4b61      	ldr	r3, [pc, #388]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a60      	ldr	r2, [pc, #384]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b5e      	ldr	r3, [pc, #376]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032c0:	f043 0320 	orr.w	r3, r3, #32
 80032c4:	61d3      	str	r3, [r2, #28]
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b55      	ldr	r3, [pc, #340]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a54      	ldr	r2, [pc, #336]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	61d3      	str	r3, [r2, #28]
 80032de:	4b52      	ldr	r3, [pc, #328]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <MX_GPIO_Init+0x19c>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003302:	4b49      	ldr	r3, [pc, #292]	; (8003428 <MX_GPIO_Init+0x19c>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4a48      	ldr	r2, [pc, #288]	; (8003428 <MX_GPIO_Init+0x19c>)
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	61d3      	str	r3, [r2, #28]
 800330e:	4b46      	ldr	r3, [pc, #280]	; (8003428 <MX_GPIO_Init+0x19c>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 800331a:	2200      	movs	r2, #0
 800331c:	f64f 4106 	movw	r1, #64518	; 0xfc06
 8003320:	4842      	ldr	r0, [pc, #264]	; (800342c <MX_GPIO_Init+0x1a0>)
 8003322:	f7fd fed2 	bl	80010ca <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003326:	2200      	movs	r2, #0
 8003328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800332c:	4840      	ldr	r0, [pc, #256]	; (8003430 <MX_GPIO_Init+0x1a4>)
 800332e:	f7fd fecc 	bl	80010ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003332:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003336:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003338:	2303      	movs	r3, #3
 800333a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	483b      	ldr	r0, [pc, #236]	; (8003434 <MX_GPIO_Init+0x1a8>)
 8003348:	f7fd fd1a 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800334c:	2303      	movs	r3, #3
 800334e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003350:	2303      	movs	r3, #3
 8003352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4836      	ldr	r0, [pc, #216]	; (8003438 <MX_GPIO_Init+0x1ac>)
 8003360:	f7fd fd0e 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 PA10 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
 8003364:	f24e 6310 	movw	r3, #58896	; 0xe610
 8003368:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336a:	2303      	movs	r3, #3
 800336c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	482d      	ldr	r0, [pc, #180]	; (8003430 <MX_GPIO_Init+0x1a4>)
 800337a:	f7fd fd01 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800337e:	2360      	movs	r3, #96	; 0x60
 8003380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4828      	ldr	r0, [pc, #160]	; (8003434 <MX_GPIO_Init+0x1a8>)
 8003392:	f7fd fcf5 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
 8003396:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800339a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339c:	2303      	movs	r3, #3
 800339e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	4820      	ldr	r0, [pc, #128]	; (800342c <MX_GPIO_Init+0x1a0>)
 80033ac:	f7fd fce8 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 80033b0:	f64f 4306 	movw	r3, #64518	; 0xfc06
 80033b4:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	4818      	ldr	r0, [pc, #96]	; (800342c <MX_GPIO_Init+0x1a0>)
 80033ca:	f7fd fcd9 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80033ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d4:	2301      	movs	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	4812      	ldr	r0, [pc, #72]	; (8003430 <MX_GPIO_Init+0x1a4>)
 80033e8:	f7fd fcca 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80033ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <MX_GPIO_Init+0x1a4>)
 8003402:	f7fd fcbd 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003406:	2304      	movs	r3, #4
 8003408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340a:	2303      	movs	r3, #3
 800340c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <MX_GPIO_Init+0x1b0>)
 800341a:	f7fd fcb1 	bl	8000d80 <HAL_GPIO_Init>

}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40020400 	.word	0x40020400
 8003430:	40020000 	.word	0x40020000
 8003434:	40020800 	.word	0x40020800
 8003438:	40021400 	.word	0x40021400
 800343c:	40020c00 	.word	0x40020c00

08003440 <turnOnLED>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void turnOnLED()
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8003444:	2201      	movs	r2, #1
 8003446:	2102      	movs	r1, #2
 8003448:	4816      	ldr	r0, [pc, #88]	; (80034a4 <turnOnLED+0x64>)
 800344a:	f7fd fe3e 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800344e:	2201      	movs	r2, #1
 8003450:	2104      	movs	r1, #4
 8003452:	4814      	ldr	r0, [pc, #80]	; (80034a4 <turnOnLED+0x64>)
 8003454:	f7fd fe39 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8003458:	2201      	movs	r2, #1
 800345a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800345e:	4811      	ldr	r0, [pc, #68]	; (80034a4 <turnOnLED+0x64>)
 8003460:	f7fd fe33 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003464:	2201      	movs	r2, #1
 8003466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800346a:	480e      	ldr	r0, [pc, #56]	; (80034a4 <turnOnLED+0x64>)
 800346c:	f7fd fe2d 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003476:	480b      	ldr	r0, [pc, #44]	; (80034a4 <turnOnLED+0x64>)
 8003478:	f7fd fe27 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800347c:	2201      	movs	r2, #1
 800347e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003482:	4808      	ldr	r0, [pc, #32]	; (80034a4 <turnOnLED+0x64>)
 8003484:	f7fd fe21 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8003488:	2201      	movs	r2, #1
 800348a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <turnOnLED+0x64>)
 8003490:	f7fd fe1b 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 1);
 8003494:	2201      	movs	r2, #1
 8003496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <turnOnLED+0x64>)
 800349c:	f7fd fe15 	bl	80010ca <HAL_GPIO_WritePin>
}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40020400 	.word	0x40020400

080034a8 <turnOffLED>:

void turnOffLED()
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	2102      	movs	r1, #2
 80034b0:	4816      	ldr	r0, [pc, #88]	; (800350c <turnOffLED+0x64>)
 80034b2:	f7fd fe0a 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2104      	movs	r1, #4
 80034ba:	4814      	ldr	r0, [pc, #80]	; (800350c <turnOffLED+0x64>)
 80034bc:	f7fd fe05 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034c6:	4811      	ldr	r0, [pc, #68]	; (800350c <turnOffLED+0x64>)
 80034c8:	f7fd fdff 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034d2:	480e      	ldr	r0, [pc, #56]	; (800350c <turnOffLED+0x64>)
 80034d4:	f7fd fdf9 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034de:	480b      	ldr	r0, [pc, #44]	; (800350c <turnOffLED+0x64>)
 80034e0:	f7fd fdf3 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ea:	4808      	ldr	r0, [pc, #32]	; (800350c <turnOffLED+0x64>)
 80034ec:	f7fd fded 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034f6:	4805      	ldr	r0, [pc, #20]	; (800350c <turnOffLED+0x64>)
 80034f8:	f7fd fde7 	bl	80010ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003502:	4802      	ldr	r0, [pc, #8]	; (800350c <turnOffLED+0x64>)
 8003504:	f7fd fde1 	bl	80010ca <HAL_GPIO_WritePin>
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40020400 	.word	0x40020400

08003510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d104      	bne.n	800352c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
//		printf("TIMER4\n");
		HAL_TIM_Base_Start_IT(&htim5);
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003524:	f7fe fd76 	bl	8002014 <HAL_TIM_Base_Start_IT>
		turnOnLED();
 8003528:	f7ff ff8a 	bl	8003440 <turnOnLED>
//		printf("TIMER4\n");
	}

	if (htim->Instance == TIM5)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a06      	ldr	r2, [pc, #24]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
//		printf("TIMER5\n");
		turnOffLED();
 8003536:	f7ff ffb7 	bl	80034a8 <turnOffLED>
//		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
//		printf("TIMER5\n");
	}


}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40000800 	.word	0x40000800
 8003548:	200001b4 	.word	0x200001b4
 800354c:	40000c00 	.word	0x40000c00

08003550 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b083      	sub	sp, #12
 8003554:	af02      	add	r7, sp, #8


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003556:	f7fc fe11 	bl	800017c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800355a:	f000 fcaf 	bl	8003ebc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800355e:	f7ff fe95 	bl	800328c <MX_GPIO_Init>
	MX_ADC_Init();
 8003562:	f7ff fcff 	bl	8002f64 <MX_ADC_Init>
	MX_TIM3_Init();
 8003566:	f000 fec1 	bl	80042ec <MX_TIM3_Init>
	MX_USART2_UART_Init();
 800356a:	f001 f85b 	bl	8004624 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800356e:	f000 fd0d 	bl	8003f8c <MX_SPI1_Init>
	MX_TIM4_Init();
 8003572:	f000 ff1f 	bl	80043b4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003576:	f000 ff71 	bl	800445c <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	MAX7219_Config();
 800357a:	f7ff fdc9 	bl	8003110 <MAX7219_Config>
	HAL_TIM_Base_Start_IT(&htim4);
 800357e:	48b1      	ldr	r0, [pc, #708]	; (8003844 <main+0x2f4>)
 8003580:	f7fe fd48 	bl	8002014 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8003584:	e0e5      	b.n	8003752 <main+0x202>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8003586:	2101      	movs	r1, #1
 8003588:	200c      	movs	r0, #12
 800358a:	f7ff fd93 	bl	80030b4 <SPI_write>

			HAL_ADC_Start(&hadc);
 800358e:	48ae      	ldr	r0, [pc, #696]	; (8003848 <main+0x2f8>)
 8003590:	f7fc ffca 	bl	8000528 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc, 50);
 8003594:	2132      	movs	r1, #50	; 0x32
 8003596:	48ac      	ldr	r0, [pc, #688]	; (8003848 <main+0x2f8>)
 8003598:	f7fd f852 	bl	8000640 <HAL_ADC_PollForConversion>
			adc2 = HAL_ADC_GetValue(&hadc);
 800359c:	48aa      	ldr	r0, [pc, #680]	; (8003848 <main+0x2f8>)
 800359e:	f7fd f8d8 	bl	8000752 <HAL_ADC_GetValue>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4ba9      	ldr	r3, [pc, #676]	; (800384c <main+0x2fc>)
 80035a8:	601a      	str	r2, [r3, #0]

			HAL_ADC_PollForConversion(&hadc, 50);
 80035aa:	2132      	movs	r1, #50	; 0x32
 80035ac:	48a6      	ldr	r0, [pc, #664]	; (8003848 <main+0x2f8>)
 80035ae:	f7fd f847 	bl	8000640 <HAL_ADC_PollForConversion>
			adc1 = HAL_ADC_GetValue(&hadc);
 80035b2:	48a5      	ldr	r0, [pc, #660]	; (8003848 <main+0x2f8>)
 80035b4:	f7fd f8cd 	bl	8000752 <HAL_ADC_GetValue>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4ba4      	ldr	r3, [pc, #656]	; (8003850 <main+0x300>)
 80035be:	601a      	str	r2, [r3, #0]

			HAL_Delay(50);
 80035c0:	2032      	movs	r0, #50	; 0x32
 80035c2:	f7fc fe49 	bl	8000258 <HAL_Delay>

			HAL_ADC_Stop(&hadc);
 80035c6:	48a0      	ldr	r0, [pc, #640]	; (8003848 <main+0x2f8>)
 80035c8:	f7fd f80e 	bl	80005e8 <HAL_ADC_Stop>

			gamme = map(adc1,0,4096,3,13);
 80035cc:	4ba0      	ldr	r3, [pc, #640]	; (8003850 <main+0x300>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	230d      	movs	r3, #13
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2303      	movs	r3, #3
 80035d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035da:	2100      	movs	r1, #0
 80035dc:	f000 fcb4 	bl	8003f48 <map>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b9c      	ldr	r3, [pc, #624]	; (8003854 <main+0x304>)
 80035e4:	601a      	str	r2, [r3, #0]
			psc2 = map(adc2,0,4096,500,250);
 80035e6:	4b99      	ldr	r3, [pc, #612]	; (800384c <main+0x2fc>)
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	23fa      	movs	r3, #250	; 0xfa
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035f6:	2100      	movs	r1, #0
 80035f8:	f000 fca6 	bl	8003f48 <map>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b96      	ldr	r3, [pc, #600]	; (8003858 <main+0x308>)
 8003600:	601a      	str	r2, [r3, #0]

			switch (gamme)
 8003602:	4b94      	ldr	r3, [pc, #592]	; (8003854 <main+0x304>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d873      	bhi.n	80036f2 <main+0x1a2>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <main+0xc0>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	080036e5 	.word	0x080036e5
 8003614:	080036d7 	.word	0x080036d7
 8003618:	080036c7 	.word	0x080036c7
 800361c:	080036b7 	.word	0x080036b7
 8003620:	080036a7 	.word	0x080036a7
 8003624:	08003697 	.word	0x08003697
 8003628:	08003687 	.word	0x08003687
 800362c:	08003677 	.word	0x08003677
 8003630:	08003667 	.word	0x08003667
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003655 	.word	0x08003655
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003645 	.word	0x08003645
			{

			case 12:
				La = 3635/64;
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <main+0x30c>)
 8003646:	2238      	movs	r2, #56	; 0x38
 8003648:	601a      	str	r2, [r3, #0]
				break;
 800364a:	e056      	b.n	80036fa <main+0x1aa>

			case 11:
				La = 3635/32;
 800364c:	4b83      	ldr	r3, [pc, #524]	; (800385c <main+0x30c>)
 800364e:	2271      	movs	r2, #113	; 0x71
 8003650:	601a      	str	r2, [r3, #0]
				break;
 8003652:	e052      	b.n	80036fa <main+0x1aa>

			case 10:
				La = 3635/16;
 8003654:	4b81      	ldr	r3, [pc, #516]	; (800385c <main+0x30c>)
 8003656:	22e3      	movs	r2, #227	; 0xe3
 8003658:	601a      	str	r2, [r3, #0]
				break;
 800365a:	e04e      	b.n	80036fa <main+0x1aa>

			case 9:
				La = 3635/8;
 800365c:	4b7f      	ldr	r3, [pc, #508]	; (800385c <main+0x30c>)
 800365e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8003662:	601a      	str	r2, [r3, #0]
				break;
 8003664:	e049      	b.n	80036fa <main+0x1aa>

			case 8:
				La = 3635/4;
 8003666:	4b7d      	ldr	r3, [pc, #500]	; (800385c <main+0x30c>)
 8003668:	f44f 7263 	mov.w	r2, #908	; 0x38c
 800366c:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 800366e:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <main+0x310>)
 8003670:	2204      	movs	r2, #4
 8003672:	601a      	str	r2, [r3, #0]
				break;
 8003674:	e041      	b.n	80036fa <main+0x1aa>

			case 7:
				La = 3635/2;
 8003676:	4b79      	ldr	r3, [pc, #484]	; (800385c <main+0x30c>)
 8003678:	f240 7219 	movw	r2, #1817	; 0x719
 800367c:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 800367e:	4b78      	ldr	r3, [pc, #480]	; (8003860 <main+0x310>)
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
				break;
 8003684:	e039      	b.n	80036fa <main+0x1aa>

			case 6:
				La = 3635/1;
 8003686:	4b75      	ldr	r3, [pc, #468]	; (800385c <main+0x30c>)
 8003688:	f640 6233 	movw	r2, #3635	; 0xe33
 800368c:	601a      	str	r2, [r3, #0]
				multiplier = 1;
 800368e:	4b74      	ldr	r3, [pc, #464]	; (8003860 <main+0x310>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
				break;
 8003694:	e031      	b.n	80036fa <main+0x1aa>

			case 5:
				La = 3635*2;
 8003696:	4b71      	ldr	r3, [pc, #452]	; (800385c <main+0x30c>)
 8003698:	f641 4266 	movw	r2, #7270	; 0x1c66
 800369c:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 800369e:	4b70      	ldr	r3, [pc, #448]	; (8003860 <main+0x310>)
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
				break;
 80036a4:	e029      	b.n	80036fa <main+0x1aa>

			case 4:
				La = 3635*4;
 80036a6:	4b6d      	ldr	r3, [pc, #436]	; (800385c <main+0x30c>)
 80036a8:	f643 02cc 	movw	r2, #14540	; 0x38cc
 80036ac:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <main+0x310>)
 80036b0:	2204      	movs	r2, #4
 80036b2:	601a      	str	r2, [r3, #0]
				break;
 80036b4:	e021      	b.n	80036fa <main+0x1aa>

			case 3:
				La = 3635*8;
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <main+0x30c>)
 80036b8:	f247 1298 	movw	r2, #29080	; 0x7198
 80036bc:	601a      	str	r2, [r3, #0]
				multiplier = 8;
 80036be:	4b68      	ldr	r3, [pc, #416]	; (8003860 <main+0x310>)
 80036c0:	2208      	movs	r2, #8
 80036c2:	601a      	str	r2, [r3, #0]
				break;
 80036c4:	e019      	b.n	80036fa <main+0x1aa>

			case 2:
				La = 3635*16;
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <main+0x30c>)
 80036c8:	f24e 3230 	movw	r2, #58160	; 0xe330
 80036cc:	601a      	str	r2, [r3, #0]
				multiplier = 16;
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <main+0x310>)
 80036d0:	2210      	movs	r2, #16
 80036d2:	601a      	str	r2, [r3, #0]
				break;
 80036d4:	e011      	b.n	80036fa <main+0x1aa>

			case 1:
				La = 3635*32;
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <main+0x30c>)
 80036d8:	4a62      	ldr	r2, [pc, #392]	; (8003864 <main+0x314>)
 80036da:	601a      	str	r2, [r3, #0]
				multiplier = 32;
 80036dc:	4b60      	ldr	r3, [pc, #384]	; (8003860 <main+0x310>)
 80036de:	2220      	movs	r2, #32
 80036e0:	601a      	str	r2, [r3, #0]
				break;
 80036e2:	e00a      	b.n	80036fa <main+0x1aa>

			case 0:
				La = 3635*64;
 80036e4:	4b5d      	ldr	r3, [pc, #372]	; (800385c <main+0x30c>)
 80036e6:	4a60      	ldr	r2, [pc, #384]	; (8003868 <main+0x318>)
 80036e8:	601a      	str	r2, [r3, #0]
				multiplier = 64;
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <main+0x310>)
 80036ec:	2240      	movs	r2, #64	; 0x40
 80036ee:	601a      	str	r2, [r3, #0]
				break;
 80036f0:	e003      	b.n	80036fa <main+0x1aa>

			default:

				La = 3635;
 80036f2:	4b5a      	ldr	r3, [pc, #360]	; (800385c <main+0x30c>)
 80036f4:	f640 6233 	movw	r2, #3635	; 0xe33
 80036f8:	601a      	str	r2, [r3, #0]

			}

			fq = (16000000/(La+1))/10;
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <main+0x30c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a5a      	ldr	r2, [pc, #360]	; (800386c <main+0x31c>)
 8003702:	fb92 f3f3 	sdiv	r3, r2, r3
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <main+0x320>)
 800370a:	801a      	strh	r2, [r3, #0]


			Segment_Display(fq);
 800370c:	4b58      	ldr	r3, [pc, #352]	; (8003870 <main+0x320>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fd25 	bl	8003160 <Segment_Display>

			printf("PSC Value : %d\tFrequence : %d\n",gamme,fq);
 8003716:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <main+0x304>)
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	4b55      	ldr	r3, [pc, #340]	; (8003870 <main+0x320>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	4854      	ldr	r0, [pc, #336]	; (8003874 <main+0x324>)
 8003722:	f001 f857 	bl	80047d4 <iprintf>

			__HAL_TIM_SET_PRESCALER(&htim3,La);
 8003726:	4b4d      	ldr	r3, [pc, #308]	; (800385c <main+0x30c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b53      	ldr	r3, [pc, #332]	; (8003878 <main+0x328>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_AUTORELOAD(&htim4,psc2);
 8003730:	4b49      	ldr	r3, [pc, #292]	; (8003858 <main+0x308>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <main+0x2f4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <main+0x308>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4b40      	ldr	r3, [pc, #256]	; (8003844 <main+0x2f4>)
 8003742:	60da      	str	r2, [r3, #12]

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003744:	2104      	movs	r1, #4
 8003746:	484c      	ldr	r0, [pc, #304]	; (8003878 <main+0x328>)
 8003748:	f7fe fcdd 	bl	8002106 <HAL_TIM_PWM_Start>

			HAL_Delay(50);
 800374c:	2032      	movs	r0, #50	; 0x32
 800374e:	f7fc fd83 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8003752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003756:	4849      	ldr	r0, [pc, #292]	; (800387c <main+0x32c>)
 8003758:	f7fd fca0 	bl	800109c <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	f43f af11 	beq.w	8003586 <main+0x36>
		}

		while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 0)
 8003764:	e100      	b.n	8003968 <main+0x418>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8003766:	2101      	movs	r1, #1
 8003768:	200c      	movs	r0, #12
 800376a:	f7ff fca3 	bl	80030b4 <SPI_write>

			HAL_ADC_Start(&hadc);
 800376e:	4836      	ldr	r0, [pc, #216]	; (8003848 <main+0x2f8>)
 8003770:	f7fc feda 	bl	8000528 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc, 50);
 8003774:	2132      	movs	r1, #50	; 0x32
 8003776:	4834      	ldr	r0, [pc, #208]	; (8003848 <main+0x2f8>)
 8003778:	f7fc ff62 	bl	8000640 <HAL_ADC_PollForConversion>
			adc2 = HAL_ADC_GetValue(&hadc);
 800377c:	4832      	ldr	r0, [pc, #200]	; (8003848 <main+0x2f8>)
 800377e:	f7fc ffe8 	bl	8000752 <HAL_ADC_GetValue>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <main+0x2fc>)
 8003788:	601a      	str	r2, [r3, #0]

			HAL_ADC_PollForConversion(&hadc, 50);
 800378a:	2132      	movs	r1, #50	; 0x32
 800378c:	482e      	ldr	r0, [pc, #184]	; (8003848 <main+0x2f8>)
 800378e:	f7fc ff57 	bl	8000640 <HAL_ADC_PollForConversion>
			adc1 = HAL_ADC_GetValue(&hadc);
 8003792:	482d      	ldr	r0, [pc, #180]	; (8003848 <main+0x2f8>)
 8003794:	f7fc ffdd 	bl	8000752 <HAL_ADC_GetValue>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <main+0x300>)
 800379e:	601a      	str	r2, [r3, #0]

			HAL_Delay(50);
 80037a0:	2032      	movs	r0, #50	; 0x32
 80037a2:	f7fc fd59 	bl	8000258 <HAL_Delay>

			HAL_ADC_Stop(&hadc);
 80037a6:	4828      	ldr	r0, [pc, #160]	; (8003848 <main+0x2f8>)
 80037a8:	f7fc ff1e 	bl	80005e8 <HAL_ADC_Stop>

			gamme = map(adc1,0,4096,3,13);
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <main+0x300>)
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	230d      	movs	r3, #13
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2303      	movs	r3, #3
 80037b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ba:	2100      	movs	r1, #0
 80037bc:	f000 fbc4 	bl	8003f48 <map>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <main+0x304>)
 80037c4:	601a      	str	r2, [r3, #0]
//			psc = map(adc1,0,4096,200,8000);
			psc2 = map(adc2,0,4096,500,250);
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <main+0x2fc>)
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	23fa      	movs	r3, #250	; 0xfa
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037d6:	2100      	movs	r1, #0
 80037d8:	f000 fbb6 	bl	8003f48 <map>
 80037dc:	4602      	mov	r2, r0
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <main+0x308>)
 80037e0:	601a      	str	r2, [r3, #0]

			switch (gamme)
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <main+0x304>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	f200 8096 	bhi.w	8003918 <main+0x3c8>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <main+0x2a4>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	0800390b 	.word	0x0800390b
 80037f8:	080038fd 	.word	0x080038fd
 80037fc:	080038ef 	.word	0x080038ef
 8003800:	080038df 	.word	0x080038df
 8003804:	080038cf 	.word	0x080038cf
 8003808:	080038bf 	.word	0x080038bf
 800380c:	080038af 	.word	0x080038af
 8003810:	0800389f 	.word	0x0800389f
 8003814:	0800388f 	.word	0x0800388f
 8003818:	08003885 	.word	0x08003885
 800381c:	08003839 	.word	0x08003839
 8003820:	08003831 	.word	0x08003831
 8003824:	08003829 	.word	0x08003829
			{

			case 12:
				Do = 6109/64;
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <main+0x330>)
 800382a:	225f      	movs	r2, #95	; 0x5f
 800382c:	601a      	str	r2, [r3, #0]
				break;
 800382e:	e077      	b.n	8003920 <main+0x3d0>

			case 11:
				Do = 6109/32;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <main+0x330>)
 8003832:	22be      	movs	r2, #190	; 0xbe
 8003834:	601a      	str	r2, [r3, #0]
				break;
 8003836:	e073      	b.n	8003920 <main+0x3d0>

			case 10:
				Do = 6109/16;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <main+0x330>)
 800383a:	f240 127d 	movw	r2, #381	; 0x17d
 800383e:	601a      	str	r2, [r3, #0]
				break;
 8003840:	e06e      	b.n	8003920 <main+0x3d0>
 8003842:	bf00      	nop
 8003844:	20000178 	.word	0x20000178
 8003848:	200000bc 	.word	0x200000bc
 800384c:	2000011c 	.word	0x2000011c
 8003850:	20000110 	.word	0x20000110
 8003854:	200000a0 	.word	0x200000a0
 8003858:	200000a8 	.word	0x200000a8
 800385c:	20000008 	.word	0x20000008
 8003860:	20000018 	.word	0x20000018
 8003864:	0001c660 	.word	0x0001c660
 8003868:	00038cc0 	.word	0x00038cc0
 800386c:	00186a00 	.word	0x00186a00
 8003870:	200000a4 	.word	0x200000a4
 8003874:	080055c8 	.word	0x080055c8
 8003878:	200001f0 	.word	0x200001f0
 800387c:	40020000 	.word	0x40020000
 8003880:	2000000c 	.word	0x2000000c

			case 9:
				Do = 6109/8;
 8003884:	4b99      	ldr	r3, [pc, #612]	; (8003aec <main+0x59c>)
 8003886:	f240 22fb 	movw	r2, #763	; 0x2fb
 800388a:	601a      	str	r2, [r3, #0]
				break;
 800388c:	e048      	b.n	8003920 <main+0x3d0>

			case 8:
				Do = 6109/4;
 800388e:	4b97      	ldr	r3, [pc, #604]	; (8003aec <main+0x59c>)
 8003890:	f240 52f7 	movw	r2, #1527	; 0x5f7
 8003894:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 8003896:	4b96      	ldr	r3, [pc, #600]	; (8003af0 <main+0x5a0>)
 8003898:	2204      	movs	r2, #4
 800389a:	601a      	str	r2, [r3, #0]
				break;
 800389c:	e040      	b.n	8003920 <main+0x3d0>

			case 7:
				Do = 6109/2;
 800389e:	4b93      	ldr	r3, [pc, #588]	; (8003aec <main+0x59c>)
 80038a0:	f640 32ee 	movw	r2, #3054	; 0xbee
 80038a4:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 80038a6:	4b92      	ldr	r3, [pc, #584]	; (8003af0 <main+0x5a0>)
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
				break;
 80038ac:	e038      	b.n	8003920 <main+0x3d0>

			case 6:
				Do = 6109/1;
 80038ae:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <main+0x59c>)
 80038b0:	f241 72dd 	movw	r2, #6109	; 0x17dd
 80038b4:	601a      	str	r2, [r3, #0]
				multiplier = 1;
 80038b6:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <main+0x5a0>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
				break;
 80038bc:	e030      	b.n	8003920 <main+0x3d0>

			case 5:
				Do = 6109*2;
 80038be:	4b8b      	ldr	r3, [pc, #556]	; (8003aec <main+0x59c>)
 80038c0:	f642 72ba 	movw	r2, #12218	; 0x2fba
 80038c4:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 80038c6:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <main+0x5a0>)
 80038c8:	2202      	movs	r2, #2
 80038ca:	601a      	str	r2, [r3, #0]
				break;
 80038cc:	e028      	b.n	8003920 <main+0x3d0>

			case 4:
				Do = 6109*4;
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <main+0x59c>)
 80038d0:	f645 7274 	movw	r2, #24436	; 0x5f74
 80038d4:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 80038d6:	4b86      	ldr	r3, [pc, #536]	; (8003af0 <main+0x5a0>)
 80038d8:	2204      	movs	r2, #4
 80038da:	601a      	str	r2, [r3, #0]
				break;
 80038dc:	e020      	b.n	8003920 <main+0x3d0>

			case 3:
				Do = 6109*8;
 80038de:	4b83      	ldr	r3, [pc, #524]	; (8003aec <main+0x59c>)
 80038e0:	f64b 62e8 	movw	r2, #48872	; 0xbee8
 80038e4:	601a      	str	r2, [r3, #0]
				multiplier = 8;
 80038e6:	4b82      	ldr	r3, [pc, #520]	; (8003af0 <main+0x5a0>)
 80038e8:	2208      	movs	r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
				break;
 80038ec:	e018      	b.n	8003920 <main+0x3d0>

			case 2:
				Do = 6109*16;
 80038ee:	4b7f      	ldr	r3, [pc, #508]	; (8003aec <main+0x59c>)
 80038f0:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <main+0x5a4>)
 80038f2:	601a      	str	r2, [r3, #0]
				multiplier = 16;
 80038f4:	4b7e      	ldr	r3, [pc, #504]	; (8003af0 <main+0x5a0>)
 80038f6:	2210      	movs	r2, #16
 80038f8:	601a      	str	r2, [r3, #0]
				break;
 80038fa:	e011      	b.n	8003920 <main+0x3d0>

			case 1:
				Do = 6109*32;
 80038fc:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <main+0x59c>)
 80038fe:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <main+0x5a8>)
 8003900:	601a      	str	r2, [r3, #0]
				multiplier = 32;
 8003902:	4b7b      	ldr	r3, [pc, #492]	; (8003af0 <main+0x5a0>)
 8003904:	2220      	movs	r2, #32
 8003906:	601a      	str	r2, [r3, #0]
				break;
 8003908:	e00a      	b.n	8003920 <main+0x3d0>

			case 0:
				Do = 6109*64;
 800390a:	4b78      	ldr	r3, [pc, #480]	; (8003aec <main+0x59c>)
 800390c:	4a7b      	ldr	r2, [pc, #492]	; (8003afc <main+0x5ac>)
 800390e:	601a      	str	r2, [r3, #0]
				multiplier = 64;
 8003910:	4b77      	ldr	r3, [pc, #476]	; (8003af0 <main+0x5a0>)
 8003912:	2240      	movs	r2, #64	; 0x40
 8003914:	601a      	str	r2, [r3, #0]
				break;
 8003916:	e003      	b.n	8003920 <main+0x3d0>

			default:

				Do = 6109;
 8003918:	4b74      	ldr	r3, [pc, #464]	; (8003aec <main+0x59c>)
 800391a:	f241 72dd 	movw	r2, #6109	; 0x17dd
 800391e:	601a      	str	r2, [r3, #0]

			}

			fq = (16000000/(Do+1))/10;
 8003920:	4b72      	ldr	r3, [pc, #456]	; (8003aec <main+0x59c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a76      	ldr	r2, [pc, #472]	; (8003b00 <main+0x5b0>)
 8003928:	fb92 f3f3 	sdiv	r3, r2, r3
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <main+0x5b4>)
 8003930:	801a      	strh	r2, [r3, #0]

//			fq = (16000000/(psc+1))/10;

			Segment_Display(fq);
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <main+0x5b4>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fc12 	bl	8003160 <Segment_Display>

//			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
			__HAL_TIM_SET_PRESCALER(&htim3,Do);
 800393c:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <main+0x59c>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <main+0x5b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_AUTORELOAD(&htim4,psc2);
 8003946:	4b71      	ldr	r3, [pc, #452]	; (8003b0c <main+0x5bc>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b71      	ldr	r3, [pc, #452]	; (8003b10 <main+0x5c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003950:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <main+0x5bc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b6e      	ldr	r3, [pc, #440]	; (8003b10 <main+0x5c0>)
 8003958:	60da      	str	r2, [r3, #12]

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800395a:	2104      	movs	r1, #4
 800395c:	486a      	ldr	r0, [pc, #424]	; (8003b08 <main+0x5b8>)
 800395e:	f7fe fbd2 	bl	8002106 <HAL_TIM_PWM_Start>

			HAL_Delay(50);
 8003962:	2032      	movs	r0, #50	; 0x32
 8003964:	f7fc fc78 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 0)
 8003968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800396c:	4869      	ldr	r0, [pc, #420]	; (8003b14 <main+0x5c4>)
 800396e:	f7fd fb95 	bl	800109c <HAL_GPIO_ReadPin>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	f43f aef6 	beq.w	8003766 <main+0x216>
		}

		while (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 0)
 800397a:	e105      	b.n	8003b88 <main+0x638>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 800397c:	2101      	movs	r1, #1
 800397e:	200c      	movs	r0, #12
 8003980:	f7ff fb98 	bl	80030b4 <SPI_write>

			HAL_ADC_Start(&hadc);
 8003984:	4864      	ldr	r0, [pc, #400]	; (8003b18 <main+0x5c8>)
 8003986:	f7fc fdcf 	bl	8000528 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc, 10);
 800398a:	210a      	movs	r1, #10
 800398c:	4862      	ldr	r0, [pc, #392]	; (8003b18 <main+0x5c8>)
 800398e:	f7fc fe57 	bl	8000640 <HAL_ADC_PollForConversion>
			adc2 = HAL_ADC_GetValue(&hadc);
 8003992:	4861      	ldr	r0, [pc, #388]	; (8003b18 <main+0x5c8>)
 8003994:	f7fc fedd 	bl	8000752 <HAL_ADC_GetValue>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <main+0x5cc>)
 800399e:	601a      	str	r2, [r3, #0]

			HAL_ADC_PollForConversion(&hadc, 10);
 80039a0:	210a      	movs	r1, #10
 80039a2:	485d      	ldr	r0, [pc, #372]	; (8003b18 <main+0x5c8>)
 80039a4:	f7fc fe4c 	bl	8000640 <HAL_ADC_PollForConversion>
			adc1 = HAL_ADC_GetValue(&hadc);
 80039a8:	485b      	ldr	r0, [pc, #364]	; (8003b18 <main+0x5c8>)
 80039aa:	f7fc fed2 	bl	8000752 <HAL_ADC_GetValue>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <main+0x5d0>)
 80039b4:	601a      	str	r2, [r3, #0]

			HAL_Delay(50);
 80039b6:	2032      	movs	r0, #50	; 0x32
 80039b8:	f7fc fc4e 	bl	8000258 <HAL_Delay>

			HAL_ADC_Stop(&hadc);
 80039bc:	4856      	ldr	r0, [pc, #344]	; (8003b18 <main+0x5c8>)
 80039be:	f7fc fe13 	bl	80005e8 <HAL_ADC_Stop>

			gamme = map(adc1,0,4096,3,13);
 80039c2:	4b57      	ldr	r3, [pc, #348]	; (8003b20 <main+0x5d0>)
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	230d      	movs	r3, #13
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2303      	movs	r3, #3
 80039cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039d0:	2100      	movs	r1, #0
 80039d2:	f000 fab9 	bl	8003f48 <map>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b52      	ldr	r3, [pc, #328]	; (8003b24 <main+0x5d4>)
 80039da:	601a      	str	r2, [r3, #0]
			psc2 = map(adc2,0,4096,500,250);
 80039dc:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <main+0x5cc>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	23fa      	movs	r3, #250	; 0xfa
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039ec:	2100      	movs	r1, #0
 80039ee:	f000 faab 	bl	8003f48 <map>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <main+0x5bc>)
 80039f6:	601a      	str	r2, [r3, #0]

			switch (gamme)
 80039f8:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <main+0x5d4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	f200 809b 	bhi.w	8003b38 <main+0x5e8>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <main+0x4b8>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003add 	.word	0x08003add
 8003a0c:	08003acf 	.word	0x08003acf
 8003a10:	08003ac1 	.word	0x08003ac1
 8003a14:	08003ab1 	.word	0x08003ab1
 8003a18:	08003aa1 	.word	0x08003aa1
 8003a1c:	08003a91 	.word	0x08003a91
 8003a20:	08003a81 	.word	0x08003a81
 8003a24:	08003a71 	.word	0x08003a71
 8003a28:	08003a61 	.word	0x08003a61
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a4d 	.word	0x08003a4d
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a3d 	.word	0x08003a3d
			{

			case 12:
				Re = 5455/64;
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <main+0x5d8>)
 8003a3e:	2255      	movs	r2, #85	; 0x55
 8003a40:	601a      	str	r2, [r3, #0]
				break;
 8003a42:	e07d      	b.n	8003b40 <main+0x5f0>

			case 11:
				Re = 5455/32;
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <main+0x5d8>)
 8003a46:	22aa      	movs	r2, #170	; 0xaa
 8003a48:	601a      	str	r2, [r3, #0]
				break;
 8003a4a:	e079      	b.n	8003b40 <main+0x5f0>

			case 10:
				Re = 5455/16;
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <main+0x5d8>)
 8003a4e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8003a52:	601a      	str	r2, [r3, #0]
				break;
 8003a54:	e074      	b.n	8003b40 <main+0x5f0>

			case 9:
				Re = 5455/8;
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <main+0x5d8>)
 8003a58:	f240 22a9 	movw	r2, #681	; 0x2a9
 8003a5c:	601a      	str	r2, [r3, #0]
				break;
 8003a5e:	e06f      	b.n	8003b40 <main+0x5f0>

			case 8:
				Re = 5455/4;
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <main+0x5d8>)
 8003a62:	f240 5253 	movw	r2, #1363	; 0x553
 8003a66:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <main+0x5a0>)
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	601a      	str	r2, [r3, #0]
				break;
 8003a6e:	e067      	b.n	8003b40 <main+0x5f0>

			case 7:
				Re = 5455/2;
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <main+0x5d8>)
 8003a72:	f640 22a7 	movw	r2, #2727	; 0xaa7
 8003a76:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <main+0x5a0>)
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	601a      	str	r2, [r3, #0]
				break;
 8003a7e:	e05f      	b.n	8003b40 <main+0x5f0>

			case 6:
				Re = 5455/1;
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <main+0x5d8>)
 8003a82:	f241 524f 	movw	r2, #5455	; 0x154f
 8003a86:	601a      	str	r2, [r3, #0]
				multiplier = 1;
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <main+0x5a0>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
				break;
 8003a8e:	e057      	b.n	8003b40 <main+0x5f0>

			case 5:
				Re = 5455*2;
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <main+0x5d8>)
 8003a92:	f642 229e 	movw	r2, #10910	; 0x2a9e
 8003a96:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <main+0x5a0>)
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	601a      	str	r2, [r3, #0]
				break;
 8003a9e:	e04f      	b.n	8003b40 <main+0x5f0>

			case 4:
				Re = 5455*4;
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <main+0x5d8>)
 8003aa2:	f245 523c 	movw	r2, #21820	; 0x553c
 8003aa6:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <main+0x5a0>)
 8003aaa:	2204      	movs	r2, #4
 8003aac:	601a      	str	r2, [r3, #0]
				break;
 8003aae:	e047      	b.n	8003b40 <main+0x5f0>

			case 3:
				Re = 5455*8;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <main+0x5d8>)
 8003ab2:	f64a 2278 	movw	r2, #43640	; 0xaa78
 8003ab6:	601a      	str	r2, [r3, #0]
				multiplier = 8;
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <main+0x5a0>)
 8003aba:	2208      	movs	r2, #8
 8003abc:	601a      	str	r2, [r3, #0]
				break;
 8003abe:	e03f      	b.n	8003b40 <main+0x5f0>

			case 2:
				Re = 5455*16;
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <main+0x5d8>)
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <main+0x5dc>)
 8003ac4:	601a      	str	r2, [r3, #0]
				multiplier = 16;
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <main+0x5a0>)
 8003ac8:	2210      	movs	r2, #16
 8003aca:	601a      	str	r2, [r3, #0]
				break;
 8003acc:	e038      	b.n	8003b40 <main+0x5f0>

			case 1:
				Re = 5455*32;
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <main+0x5d8>)
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <main+0x5e0>)
 8003ad2:	601a      	str	r2, [r3, #0]
				multiplier = 32;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <main+0x5a0>)
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	601a      	str	r2, [r3, #0]
				break;
 8003ada:	e031      	b.n	8003b40 <main+0x5f0>

			case 0:
				Re = 5455*64;
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <main+0x5d8>)
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <main+0x5e4>)
 8003ae0:	601a      	str	r2, [r3, #0]
				multiplier = 64;
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <main+0x5a0>)
 8003ae4:	2240      	movs	r2, #64	; 0x40
 8003ae6:	601a      	str	r2, [r3, #0]
				break;
 8003ae8:	e02a      	b.n	8003b40 <main+0x5f0>
 8003aea:	bf00      	nop
 8003aec:	2000000c 	.word	0x2000000c
 8003af0:	20000018 	.word	0x20000018
 8003af4:	00017dd0 	.word	0x00017dd0
 8003af8:	0002fba0 	.word	0x0002fba0
 8003afc:	0005f740 	.word	0x0005f740
 8003b00:	00186a00 	.word	0x00186a00
 8003b04:	200000a4 	.word	0x200000a4
 8003b08:	200001f0 	.word	0x200001f0
 8003b0c:	200000a8 	.word	0x200000a8
 8003b10:	20000178 	.word	0x20000178
 8003b14:	40020000 	.word	0x40020000
 8003b18:	200000bc 	.word	0x200000bc
 8003b1c:	2000011c 	.word	0x2000011c
 8003b20:	20000110 	.word	0x20000110
 8003b24:	200000a0 	.word	0x200000a0
 8003b28:	20000010 	.word	0x20000010
 8003b2c:	000154f0 	.word	0x000154f0
 8003b30:	0002a9e0 	.word	0x0002a9e0
 8003b34:	000553c0 	.word	0x000553c0

			default:

				Re = 5455;
 8003b38:	4b74      	ldr	r3, [pc, #464]	; (8003d0c <main+0x7bc>)
 8003b3a:	f241 524f 	movw	r2, #5455	; 0x154f
 8003b3e:	601a      	str	r2, [r3, #0]

			}

			fq = (16000000/(Re+1))/10;
 8003b40:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <main+0x7bc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a72      	ldr	r2, [pc, #456]	; (8003d10 <main+0x7c0>)
 8003b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b71      	ldr	r3, [pc, #452]	; (8003d14 <main+0x7c4>)
 8003b50:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 8003b52:	4b70      	ldr	r3, [pc, #448]	; (8003d14 <main+0x7c4>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fb02 	bl	8003160 <Segment_Display>

//			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
			__HAL_TIM_SET_PRESCALER(&htim3,Re);
 8003b5c:	4b6b      	ldr	r3, [pc, #428]	; (8003d0c <main+0x7bc>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <main+0x7c8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_AUTORELOAD(&htim4,psc2);
 8003b66:	4b6d      	ldr	r3, [pc, #436]	; (8003d1c <main+0x7cc>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <main+0x7d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <main+0x7cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <main+0x7d0>)
 8003b78:	60da      	str	r2, [r3, #12]

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	4866      	ldr	r0, [pc, #408]	; (8003d18 <main+0x7c8>)
 8003b7e:	f7fe fac2 	bl	8002106 <HAL_TIM_PWM_Start>

			HAL_Delay(50);
 8003b82:	2032      	movs	r0, #50	; 0x32
 8003b84:	f7fc fb68 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 0)
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	4866      	ldr	r0, [pc, #408]	; (8003d24 <main+0x7d4>)
 8003b8c:	f7fd fa86 	bl	800109c <HAL_GPIO_ReadPin>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f43f aef2 	beq.w	800397c <main+0x42c>
		}

		while (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 0)
 8003b98:	e100      	b.n	8003d9c <main+0x84c>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	200c      	movs	r0, #12
 8003b9e:	f7ff fa89 	bl	80030b4 <SPI_write>

			HAL_ADC_Start(&hadc);
 8003ba2:	4861      	ldr	r0, [pc, #388]	; (8003d28 <main+0x7d8>)
 8003ba4:	f7fc fcc0 	bl	8000528 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc, 50);
 8003ba8:	2132      	movs	r1, #50	; 0x32
 8003baa:	485f      	ldr	r0, [pc, #380]	; (8003d28 <main+0x7d8>)
 8003bac:	f7fc fd48 	bl	8000640 <HAL_ADC_PollForConversion>
			adc2 = HAL_ADC_GetValue(&hadc);
 8003bb0:	485d      	ldr	r0, [pc, #372]	; (8003d28 <main+0x7d8>)
 8003bb2:	f7fc fdce 	bl	8000752 <HAL_ADC_GetValue>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <main+0x7dc>)
 8003bbc:	601a      	str	r2, [r3, #0]

			HAL_ADC_PollForConversion(&hadc, 50);
 8003bbe:	2132      	movs	r1, #50	; 0x32
 8003bc0:	4859      	ldr	r0, [pc, #356]	; (8003d28 <main+0x7d8>)
 8003bc2:	f7fc fd3d 	bl	8000640 <HAL_ADC_PollForConversion>
			adc1 = HAL_ADC_GetValue(&hadc);
 8003bc6:	4858      	ldr	r0, [pc, #352]	; (8003d28 <main+0x7d8>)
 8003bc8:	f7fc fdc3 	bl	8000752 <HAL_ADC_GetValue>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b57      	ldr	r3, [pc, #348]	; (8003d30 <main+0x7e0>)
 8003bd2:	601a      	str	r2, [r3, #0]

			HAL_Delay(50);
 8003bd4:	2032      	movs	r0, #50	; 0x32
 8003bd6:	f7fc fb3f 	bl	8000258 <HAL_Delay>

			HAL_ADC_Stop(&hadc);
 8003bda:	4853      	ldr	r0, [pc, #332]	; (8003d28 <main+0x7d8>)
 8003bdc:	f7fc fd04 	bl	80005e8 <HAL_ADC_Stop>

			gamme = map(adc1,0,4096,3,13);
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <main+0x7e0>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	230d      	movs	r3, #13
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2303      	movs	r3, #3
 8003bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f000 f9aa 	bl	8003f48 <map>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <main+0x7e4>)
 8003bf8:	601a      	str	r2, [r3, #0]
			psc2 = map(adc2,0,4096,500,250);
 8003bfa:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <main+0x7dc>)
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	23fa      	movs	r3, #250	; 0xfa
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	f000 f99c 	bl	8003f48 <map>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <main+0x7cc>)
 8003c14:	601a      	str	r2, [r3, #0]

			switch (gamme)
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <main+0x7e4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	f200 8096 	bhi.w	8003d4c <main+0x7fc>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <main+0x6d8>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003cfd 	.word	0x08003cfd
 8003c2c:	08003cef 	.word	0x08003cef
 8003c30:	08003ce1 	.word	0x08003ce1
 8003c34:	08003cd1 	.word	0x08003cd1
 8003c38:	08003cc1 	.word	0x08003cc1
 8003c3c:	08003cb1 	.word	0x08003cb1
 8003c40:	08003ca1 	.word	0x08003ca1
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c6d 	.word	0x08003c6d
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c5d 	.word	0x08003c5d
			{

			case 12:
				Mi = 4848/64;
 8003c5c:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <main+0x7e8>)
 8003c5e:	224b      	movs	r2, #75	; 0x4b
 8003c60:	601a      	str	r2, [r3, #0]
				break;
 8003c62:	e077      	b.n	8003d54 <main+0x804>

			case 11:
				Mi = 4848/32;
 8003c64:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <main+0x7e8>)
 8003c66:	2297      	movs	r2, #151	; 0x97
 8003c68:	601a      	str	r2, [r3, #0]
				break;
 8003c6a:	e073      	b.n	8003d54 <main+0x804>

			case 10:
				Mi = 4848/16;
 8003c6c:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <main+0x7e8>)
 8003c6e:	f240 122f 	movw	r2, #303	; 0x12f
 8003c72:	601a      	str	r2, [r3, #0]
				break;
 8003c74:	e06e      	b.n	8003d54 <main+0x804>

			case 9:
				Mi = 4848/8;
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <main+0x7e8>)
 8003c78:	f240 225e 	movw	r2, #606	; 0x25e
 8003c7c:	601a      	str	r2, [r3, #0]
				break;
 8003c7e:	e069      	b.n	8003d54 <main+0x804>

			case 8:
				Mi = 4848/4;
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <main+0x7e8>)
 8003c82:	f240 42bc 	movw	r2, #1212	; 0x4bc
 8003c86:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <main+0x7ec>)
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	601a      	str	r2, [r3, #0]
				break;
 8003c8e:	e061      	b.n	8003d54 <main+0x804>

			case 7:
				Mi = 4848/2;
 8003c90:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <main+0x7e8>)
 8003c92:	f640 1278 	movw	r2, #2424	; 0x978
 8003c96:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <main+0x7ec>)
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	601a      	str	r2, [r3, #0]
				break;
 8003c9e:	e059      	b.n	8003d54 <main+0x804>

			case 6:
				Mi = 4848/1;
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <main+0x7e8>)
 8003ca2:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8003ca6:	601a      	str	r2, [r3, #0]
				multiplier = 1;
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <main+0x7ec>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
				break;
 8003cae:	e051      	b.n	8003d54 <main+0x804>

			case 5:
				Mi = 4848*2;
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <main+0x7e8>)
 8003cb2:	f242 52e0 	movw	r2, #9696	; 0x25e0
 8003cb6:	601a      	str	r2, [r3, #0]
				multiplier = 2;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <main+0x7ec>)
 8003cba:	2202      	movs	r2, #2
 8003cbc:	601a      	str	r2, [r3, #0]
				break;
 8003cbe:	e049      	b.n	8003d54 <main+0x804>

			case 4:
				Mi = 4848*4;
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <main+0x7e8>)
 8003cc2:	f644 32c0 	movw	r2, #19392	; 0x4bc0
 8003cc6:	601a      	str	r2, [r3, #0]
				multiplier = 4;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <main+0x7ec>)
 8003cca:	2204      	movs	r2, #4
 8003ccc:	601a      	str	r2, [r3, #0]
				break;
 8003cce:	e041      	b.n	8003d54 <main+0x804>

			case 3:
				Mi = 4848*8;
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <main+0x7e8>)
 8003cd2:	f249 7280 	movw	r2, #38784	; 0x9780
 8003cd6:	601a      	str	r2, [r3, #0]
				multiplier = 8;
 8003cd8:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <main+0x7ec>)
 8003cda:	2208      	movs	r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
				break;
 8003cde:	e039      	b.n	8003d54 <main+0x804>

			case 2:
				Mi = 4848*16;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <main+0x7e8>)
 8003ce2:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <main+0x7f0>)
 8003ce4:	601a      	str	r2, [r3, #0]
				multiplier = 16;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <main+0x7ec>)
 8003ce8:	2210      	movs	r2, #16
 8003cea:	601a      	str	r2, [r3, #0]
				break;
 8003cec:	e032      	b.n	8003d54 <main+0x804>

			case 1:
				Mi = 4848*32;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <main+0x7e8>)
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <main+0x7f4>)
 8003cf2:	601a      	str	r2, [r3, #0]
				multiplier = 32;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <main+0x7ec>)
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	601a      	str	r2, [r3, #0]
				break;
 8003cfa:	e02b      	b.n	8003d54 <main+0x804>

			case 0:
				Mi = 4848*64;
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <main+0x7e8>)
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <main+0x7f8>)
 8003d00:	601a      	str	r2, [r3, #0]
				multiplier = 64;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <main+0x7ec>)
 8003d04:	2240      	movs	r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
				break;
 8003d08:	e024      	b.n	8003d54 <main+0x804>
 8003d0a:	bf00      	nop
 8003d0c:	20000010 	.word	0x20000010
 8003d10:	00186a00 	.word	0x00186a00
 8003d14:	200000a4 	.word	0x200000a4
 8003d18:	200001f0 	.word	0x200001f0
 8003d1c:	200000a8 	.word	0x200000a8
 8003d20:	20000178 	.word	0x20000178
 8003d24:	40020800 	.word	0x40020800
 8003d28:	200000bc 	.word	0x200000bc
 8003d2c:	2000011c 	.word	0x2000011c
 8003d30:	20000110 	.word	0x20000110
 8003d34:	200000a0 	.word	0x200000a0
 8003d38:	20000014 	.word	0x20000014
 8003d3c:	20000018 	.word	0x20000018
 8003d40:	00012f00 	.word	0x00012f00
 8003d44:	00025e00 	.word	0x00025e00
 8003d48:	0004bc00 	.word	0x0004bc00

			default:

				Mi = 4848;
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <main+0x940>)
 8003d4e:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8003d52:	601a      	str	r2, [r3, #0]

			}

			fq = (16000000/(Mi+1))/10;
 8003d54:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <main+0x940>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4a4e      	ldr	r2, [pc, #312]	; (8003e94 <main+0x944>)
 8003d5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <main+0x948>)
 8003d64:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 8003d66:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <main+0x948>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f9f8 	bl	8003160 <Segment_Display>

//			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
			__HAL_TIM_SET_PRESCALER(&htim3,Mi);
 8003d70:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <main+0x940>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <main+0x94c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
			__HAL_TIM_SET_AUTORELOAD(&htim4,psc2);
 8003d7a:	4b49      	ldr	r3, [pc, #292]	; (8003ea0 <main+0x950>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <main+0x954>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d84:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <main+0x950>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <main+0x954>)
 8003d8c:	60da      	str	r2, [r3, #12]

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003d8e:	2104      	movs	r1, #4
 8003d90:	4842      	ldr	r0, [pc, #264]	; (8003e9c <main+0x94c>)
 8003d92:	f7fe f9b8 	bl	8002106 <HAL_TIM_PWM_Start>

			HAL_Delay(50);
 8003d96:	2032      	movs	r0, #50	; 0x32
 8003d98:	f7fc fa5e 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 0)
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	4842      	ldr	r0, [pc, #264]	; (8003ea8 <main+0x958>)
 8003da0:	f7fd f97c 	bl	800109c <HAL_GPIO_ReadPin>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f43f aef7 	beq.w	8003b9a <main+0x64a>
		}

		if ((HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1) | (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 1) | (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 1) | (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 1))
 8003dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003db0:	483e      	ldr	r0, [pc, #248]	; (8003eac <main+0x95c>)
 8003db2:	f7fd f973 	bl	800109c <HAL_GPIO_ReadPin>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2dc      	uxtb	r4, r3
 8003dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dc6:	4839      	ldr	r0, [pc, #228]	; (8003eac <main+0x95c>)
 8003dc8:	f7fd f968 	bl	800109c <HAL_GPIO_ReadPin>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461c      	mov	r4, r3
 8003dde:	2140      	movs	r1, #64	; 0x40
 8003de0:	4831      	ldr	r0, [pc, #196]	; (8003ea8 <main+0x958>)
 8003de2:	f7fd f95b 	bl	800109c <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	431c      	orrs	r4, r3
 8003df4:	2120      	movs	r1, #32
 8003df6:	482c      	ldr	r0, [pc, #176]	; (8003ea8 <main+0x958>)
 8003df8:	f7fd f950 	bl	800109c <HAL_GPIO_ReadPin>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4323      	orrs	r3, r4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f43f aca1 	beq.w	8003752 <main+0x202>
		{
			SPI_write(0x0C, 0x00);//Shutdown à 1 (Mode activé)
 8003e10:	2100      	movs	r1, #0
 8003e12:	200c      	movs	r0, #12
 8003e14:	f7ff f94e 	bl	80030b4 <SPI_write>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4820      	ldr	r0, [pc, #128]	; (8003e9c <main+0x94c>)
 8003e1c:	f7fe f995 	bl	800214a <HAL_TIM_PWM_Stop>

			HAL_ADC_Start(&hadc);
 8003e20:	4823      	ldr	r0, [pc, #140]	; (8003eb0 <main+0x960>)
 8003e22:	f7fc fb81 	bl	8000528 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc, 10);
 8003e26:	210a      	movs	r1, #10
 8003e28:	4821      	ldr	r0, [pc, #132]	; (8003eb0 <main+0x960>)
 8003e2a:	f7fc fc09 	bl	8000640 <HAL_ADC_PollForConversion>
			adc2 = HAL_ADC_GetValue(&hadc);
 8003e2e:	4820      	ldr	r0, [pc, #128]	; (8003eb0 <main+0x960>)
 8003e30:	f7fc fc8f 	bl	8000752 <HAL_ADC_GetValue>
 8003e34:	4603      	mov	r3, r0
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <main+0x964>)
 8003e3a:	601a      	str	r2, [r3, #0]

			HAL_ADC_PollForConversion(&hadc, 10);
 8003e3c:	210a      	movs	r1, #10
 8003e3e:	481c      	ldr	r0, [pc, #112]	; (8003eb0 <main+0x960>)
 8003e40:	f7fc fbfe 	bl	8000640 <HAL_ADC_PollForConversion>
			adc1 = HAL_ADC_GetValue(&hadc);
 8003e44:	481a      	ldr	r0, [pc, #104]	; (8003eb0 <main+0x960>)
 8003e46:	f7fc fc84 	bl	8000752 <HAL_ADC_GetValue>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <main+0x968>)
 8003e50:	601a      	str	r2, [r3, #0]

			HAL_Delay(50);
 8003e52:	2032      	movs	r0, #50	; 0x32
 8003e54:	f7fc fa00 	bl	8000258 <HAL_Delay>

			HAL_ADC_Stop(&hadc);
 8003e58:	4815      	ldr	r0, [pc, #84]	; (8003eb0 <main+0x960>)
 8003e5a:	f7fc fbc5 	bl	80005e8 <HAL_ADC_Stop>

//			printf("adc1 : %d \tadc2 : %d\n",adc1,adc2);

			psc2 = map(adc2,0,4096,500,250);
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <main+0x964>)
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	23fa      	movs	r3, #250	; 0xfa
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f000 f86a 	bl	8003f48 <map>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <main+0x950>)
 8003e78:	601a      	str	r2, [r3, #0]

//			printf("psc2 : %d\n",psc2);

//			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,psc2/2);
			__HAL_TIM_SET_AUTORELOAD(&htim4,psc2);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <main+0x950>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <main+0x954>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <main+0x950>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <main+0x954>)
 8003e8c:	60da      	str	r2, [r3, #12]
		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8003e8e:	e460      	b.n	8003752 <main+0x202>
 8003e90:	20000014 	.word	0x20000014
 8003e94:	00186a00 	.word	0x00186a00
 8003e98:	200000a4 	.word	0x200000a4
 8003e9c:	200001f0 	.word	0x200001f0
 8003ea0:	200000a8 	.word	0x200000a8
 8003ea4:	20000178 	.word	0x20000178
 8003ea8:	40020800 	.word	0x40020800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	200000bc 	.word	0x200000bc
 8003eb4:	2000011c 	.word	0x2000011c
 8003eb8:	20000110 	.word	0x20000110

08003ebc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b092      	sub	sp, #72	; 0x48
 8003ec0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	2234      	movs	r2, #52	; 0x34
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fc7a 	bl	80047c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <SystemClock_Config+0x88>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <SystemClock_Config+0x88>)
 8003ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eec:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efe:	f107 0314 	add.w	r3, r7, #20
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd f8fa 	bl	80010fc <HAL_RCC_OscConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SystemClock_Config+0x56>
	{
		Error_Handler();
 8003f0e:	f000 f836 	bl	8003f7e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f12:	230f      	movs	r3, #15
 8003f14:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f16:	2301      	movs	r3, #1
 8003f18:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f26:	463b      	mov	r3, r7
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fd fc16 	bl	800175c <HAL_RCC_ClockConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8003f36:	f000 f822 	bl	8003f7e <Error_Handler>
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	3748      	adds	r7, #72	; 0x48
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40007000 	.word	0x40007000

08003f48 <map>:

/* USER CODE BEGIN 4 */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	1a8a      	subs	r2, r1, r2
 8003f62:	fb02 f203 	mul.w	r2, r2, r3
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4413      	add	r3, r2
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <MX_SPI1_Init+0x68>)
 8003f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fd8:	220a      	movs	r2, #10
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fdc:	4804      	ldr	r0, [pc, #16]	; (8003ff0 <MX_SPI1_Init+0x64>)
 8003fde:	f7fd fddb 	bl	8001b98 <HAL_SPI_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fe8:	f7ff ffc9 	bl	8003f7e <Error_Handler>
  }

}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000120 	.word	0x20000120
 8003ff4:	40013000 	.word	0x40013000

08003ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_SPI_MspInit+0x7c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d127      	bne.n	800406a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_SPI_MspInit+0x80>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <HAL_SPI_MspInit+0x80>)
 8004020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_SPI_MspInit+0x80>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_SPI_MspInit+0x80>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_SPI_MspInit+0x80>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	61d3      	str	r3, [r2, #28]
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_SPI_MspInit+0x80>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800404a:	23e0      	movs	r3, #224	; 0xe0
 800404c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004056:	2303      	movs	r3, #3
 8004058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800405a:	2305      	movs	r3, #5
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	f107 0314 	add.w	r3, r7, #20
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <HAL_SPI_MspInit+0x84>)
 8004066:	f7fc fe8b 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800406a:	bf00      	nop
 800406c:	3728      	adds	r7, #40	; 0x28
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40013000 	.word	0x40013000
 8004078:	40023800 	.word	0x40023800
 800407c:	40020000 	.word	0x40020000

08004080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004086:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_MspInit+0x58>)
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <HAL_MspInit+0x58>)
 800408c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004090:	6253      	str	r3, [r2, #36]	; 0x24
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <HAL_MspInit+0x58>)
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <HAL_MspInit+0x58>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a0d      	ldr	r2, [pc, #52]	; (80040d8 <HAL_MspInit+0x58>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_MspInit+0x58>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_MspInit+0x58>)
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_MspInit+0x58>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6253      	str	r3, [r2, #36]	; 0x24
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_MspInit+0x58>)
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	40023800 	.word	0x40023800

080040dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ec:	e7fe      	b.n	80040ec <HardFault_Handler+0x4>

080040ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f2:	e7fe      	b.n	80040f2 <MemManage_Handler+0x4>

080040f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f8:	e7fe      	b.n	80040f8 <BusFault_Handler+0x4>

080040fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040fe:	e7fe      	b.n	80040fe <UsageFault_Handler+0x4>

08004100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004128:	f7fc f87a 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}

08004130 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <TIM4_IRQHandler+0x10>)
 8004136:	f7fe f869 	bl	800220c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000178 	.word	0x20000178

08004144 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <TIM5_IRQHandler+0x10>)
 800414a:	f7fe f85f 	bl	800220c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001b4 	.word	0x200001b4

08004158 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e00a      	b.n	8004180 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800416a:	f3af 8000 	nop.w
 800416e:	4601      	mov	r1, r0
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	60ba      	str	r2, [r7, #8]
 8004176:	b2ca      	uxtb	r2, r1
 8004178:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3301      	adds	r3, #1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	dbf0      	blt.n	800416a <_read+0x12>
	}

return len;
 8004188:	687b      	ldr	r3, [r7, #4]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e009      	b.n	80041b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	60ba      	str	r2, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 faa7 	bl	8004700 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3301      	adds	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	dbf1      	blt.n	80041a4 <_write+0x12>
	}
	return len;
 80041c0:	687b      	ldr	r3, [r7, #4]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_close>:

int _close(int file)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
	return -1;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041f0:	605a      	str	r2, [r3, #4]
	return 0;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <_isatty>:

int _isatty(int file)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	return 1;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
	return 0;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
	...

0800422c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <_sbrk+0x50>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <_sbrk+0x16>
		heap_end = &end;
 800423c:	4b0f      	ldr	r3, [pc, #60]	; (800427c <_sbrk+0x50>)
 800423e:	4a10      	ldr	r2, [pc, #64]	; (8004280 <_sbrk+0x54>)
 8004240:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <_sbrk+0x50>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004248:	4b0c      	ldr	r3, [pc, #48]	; (800427c <_sbrk+0x50>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4413      	add	r3, r2
 8004250:	466a      	mov	r2, sp
 8004252:	4293      	cmp	r3, r2
 8004254:	d907      	bls.n	8004266 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004256:	f000 fa8b 	bl	8004770 <__errno>
 800425a:	4602      	mov	r2, r0
 800425c:	230c      	movs	r3, #12
 800425e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004264:	e006      	b.n	8004274 <_sbrk+0x48>
	}

	heap_end += incr;
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <_sbrk+0x50>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	4a03      	ldr	r2, [pc, #12]	; (800427c <_sbrk+0x50>)
 8004270:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004272:	68fb      	ldr	r3, [r7, #12]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	200000ac 	.word	0x200000ac
 8004280:	20000270 	.word	0x20000270

08004284 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <SystemInit+0x5c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <SystemInit+0x5c>)
 800428e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004292:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <SystemInit+0x5c>)
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4911      	ldr	r1, [pc, #68]	; (80042e0 <SystemInit+0x5c>)
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <SystemInit+0x60>)
 800429c:	4013      	ands	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <SystemInit+0x5c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <SystemInit+0x5c>)
 80042a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80042aa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80042ae:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <SystemInit+0x5c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <SystemInit+0x5c>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <SystemInit+0x5c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <SystemInit+0x5c>)
 80042c2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80042c6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <SystemInit+0x5c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <SystemInit+0x64>)
 80042d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042d4:	609a      	str	r2, [r3, #8]
#endif
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	88ffc00c 	.word	0x88ffc00c
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042f2:	f107 0310 	add.w	r3, r7, #16
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042fc:	463b      	mov	r3, r7
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <MX_TIM3_Init+0xc0>)
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <MX_TIM3_Init+0xc4>)
 800430c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 665;
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <MX_TIM3_Init+0xc0>)
 8004310:	f240 2299 	movw	r2, #665	; 0x299
 8004314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <MX_TIM3_Init+0xc0>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <MX_TIM3_Init+0xc0>)
 800431e:	220a      	movs	r2, #10
 8004320:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <MX_TIM3_Init+0xc0>)
 8004324:	2200      	movs	r2, #0
 8004326:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <MX_TIM3_Init+0xc0>)
 800432a:	2200      	movs	r2, #0
 800432c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800432e:	481f      	ldr	r0, [pc, #124]	; (80043ac <MX_TIM3_Init+0xc0>)
 8004330:	f7fd febe 	bl	80020b0 <HAL_TIM_PWM_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800433a:	f7ff fe20 	bl	8003f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004346:	f107 0310 	add.w	r3, r7, #16
 800434a:	4619      	mov	r1, r3
 800434c:	4817      	ldr	r0, [pc, #92]	; (80043ac <MX_TIM3_Init+0xc0>)
 800434e:	f7fe fb0c 	bl	800296a <HAL_TIMEx_MasterConfigSynchronization>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004358:	f7ff fe11 	bl	8003f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800435c:	2360      	movs	r3, #96	; 0x60
 800435e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800436c:	463b      	mov	r3, r7
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	480e      	ldr	r0, [pc, #56]	; (80043ac <MX_TIM3_Init+0xc0>)
 8004374:	f7fe f886 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800437e:	f7ff fdfe 	bl	8003f7e <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 8004382:	2305      	movs	r3, #5
 8004384:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004386:	463b      	mov	r3, r7
 8004388:	2204      	movs	r2, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <MX_TIM3_Init+0xc0>)
 800438e:	f7fe f879 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004398:	f7ff fdf1 	bl	8003f7e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800439c:	4803      	ldr	r0, [pc, #12]	; (80043ac <MX_TIM3_Init+0xc0>)
 800439e:	f000 f8eb 	bl	8004578 <HAL_TIM_MspPostInit>

}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200001f0 	.word	0x200001f0
 80043b0:	40000400 	.word	0x40000400

080043b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043c4:	463b      	mov	r3, r7
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <MX_TIM4_Init+0xa4>)
 80043d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043d8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80043dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80043f8:	4816      	ldr	r0, [pc, #88]	; (8004454 <MX_TIM4_Init+0xa0>)
 80043fa:	f7fd fe2e 	bl	800205a <HAL_TIM_OC_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004404:	f7ff fdbb 	bl	8003f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004410:	f107 0310 	add.w	r3, r7, #16
 8004414:	4619      	mov	r1, r3
 8004416:	480f      	ldr	r0, [pc, #60]	; (8004454 <MX_TIM4_Init+0xa0>)
 8004418:	f7fe faa7 	bl	800296a <HAL_TIMEx_MasterConfigSynchronization>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8004422:	f7ff fdac 	bl	8003f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004426:	2300      	movs	r3, #0
 8004428:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 800442a:	23fa      	movs	r3, #250	; 0xfa
 800442c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004436:	463b      	mov	r3, r7
 8004438:	2200      	movs	r2, #0
 800443a:	4619      	mov	r1, r3
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_TIM4_Init+0xa0>)
 800443e:	f7fd ffc1 	bl	80023c4 <HAL_TIM_OC_ConfigChannel>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004448:	f7ff fd99 	bl	8003f7e <Error_Handler>
  }

}
 800444c:	bf00      	nop
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000178 	.word	0x20000178
 8004458:	40000800 	.word	0x40000800

0800445c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0

  htim5.Instance = TIM5;
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MX_TIM5_Init+0x40>)
 8004462:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <MX_TIM5_Init+0x44>)
 8004464:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15999;
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <MX_TIM5_Init+0x40>)
 8004468:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800446c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <MX_TIM5_Init+0x40>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50;
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <MX_TIM5_Init+0x40>)
 8004476:	2232      	movs	r2, #50	; 0x32
 8004478:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <MX_TIM5_Init+0x40>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <MX_TIM5_Init+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8004486:	2108      	movs	r1, #8
 8004488:	4804      	ldr	r0, [pc, #16]	; (800449c <MX_TIM5_Init+0x40>)
 800448a:	f7fd fe83 	bl	8002194 <HAL_TIM_OnePulse_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM5_Init+0x3c>
  {
    Error_Handler();
 8004494:	f7ff fd73 	bl	8003f7e <Error_Handler>
  }

}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200001b4 	.word	0x200001b4
 80044a0:	40000c00 	.word	0x40000c00

080044a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_TIM_PWM_MspInit+0x34>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10b      	bne.n	80044ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_TIM_PWM_MspInit+0x38>)
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	4a08      	ldr	r2, [pc, #32]	; (80044dc <HAL_TIM_PWM_MspInit+0x38>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6253      	str	r3, [r2, #36]	; 0x24
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_TIM_PWM_MspInit+0x38>)
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40023800 	.word	0x40023800

080044e0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_TIM_OC_MspInit+0x44>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d113      	bne.n	800451a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_TIM_OC_MspInit+0x48>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <HAL_TIM_OC_MspInit+0x48>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6253      	str	r3, [r2, #36]	; 0x24
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_TIM_OC_MspInit+0x48>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	2100      	movs	r1, #0
 800450e:	201e      	movs	r0, #30
 8004510:	f7fc fbff 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004514:	201e      	movs	r0, #30
 8004516:	f7fc fc18 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40000800 	.word	0x40000800
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM5)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_TIM_OnePulse_MspInit+0x44>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d113      	bne.n	8004566 <HAL_TIM_OnePulse_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <HAL_TIM_OnePulse_MspInit+0x48>)
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <HAL_TIM_OnePulse_MspInit+0x48>)
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	6253      	str	r3, [r2, #36]	; 0x24
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_TIM_OnePulse_MspInit+0x48>)
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004556:	2200      	movs	r2, #0
 8004558:	2100      	movs	r1, #0
 800455a:	202e      	movs	r0, #46	; 0x2e
 800455c:	f7fc fbd9 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004560:	202e      	movs	r0, #46	; 0x2e
 8004562:	f7fc fbf2 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40023800 	.word	0x40023800

08004578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_TIM_MspPostInit+0x9c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d137      	bne.n	800460a <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459a:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	61d3      	str	r3, [r2, #28]
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	61d3      	str	r3, [r2, #28]
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <HAL_TIM_MspPostInit+0xa0>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ce:	2302      	movs	r3, #2
 80045d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045da:	2302      	movs	r3, #2
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4619      	mov	r1, r3
 80045e4:	480d      	ldr	r0, [pc, #52]	; (800461c <HAL_TIM_MspPostInit+0xa4>)
 80045e6:	f7fc fbcb 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_Pin;
 80045ea:	2310      	movs	r3, #16
 80045ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045fa:	2302      	movs	r3, #2
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	4619      	mov	r1, r3
 8004604:	4806      	ldr	r0, [pc, #24]	; (8004620 <HAL_TIM_MspPostInit+0xa8>)
 8004606:	f7fc fbbb 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800460a:	bf00      	nop
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40000400 	.word	0x40000400
 8004618:	40023800 	.word	0x40023800
 800461c:	40020800 	.word	0x40020800
 8004620:	40020400 	.word	0x40020400

08004624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 800462a:	4a12      	ldr	r2, [pc, #72]	; (8004674 <MX_USART2_UART_Init+0x50>)
 800462c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 8004630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 800464a:	220c      	movs	r2, #12
 800464c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 8004656:	2200      	movs	r2, #0
 8004658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <MX_USART2_UART_Init+0x4c>)
 800465c:	f7fe f9c9 	bl	80029f2 <HAL_UART_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004666:	f7ff fc8a 	bl	8003f7e <Error_Handler>
  }

}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000022c 	.word	0x2000022c
 8004674:	40004400 	.word	0x40004400

08004678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_UART_MspInit+0x7c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d127      	bne.n	80046ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <HAL_UART_MspInit+0x80>)
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_UART_MspInit+0x80>)
 80046a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a4:	6253      	str	r3, [r2, #36]	; 0x24
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <HAL_UART_MspInit+0x80>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <HAL_UART_MspInit+0x80>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a10      	ldr	r2, [pc, #64]	; (80046f8 <HAL_UART_MspInit+0x80>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	61d3      	str	r3, [r2, #28]
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <HAL_UART_MspInit+0x80>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046ca:	230c      	movs	r3, #12
 80046cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d6:	2303      	movs	r3, #3
 80046d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046da:	2307      	movs	r3, #7
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	4619      	mov	r1, r3
 80046e4:	4805      	ldr	r0, [pc, #20]	; (80046fc <HAL_UART_MspInit+0x84>)
 80046e6:	f7fc fb4b 	bl	8000d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046ea:	bf00      	nop
 80046ec:	3728      	adds	r7, #40	; 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40004400 	.word	0x40004400
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40020000 	.word	0x40020000

08004700 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8004708:	1d39      	adds	r1, r7, #4
 800470a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800470e:	2201      	movs	r2, #1
 8004710:	4803      	ldr	r0, [pc, #12]	; (8004720 <__io_putchar+0x20>)
 8004712:	f7fe f9bb 	bl	8002a8c <HAL_UART_Transmit>

  return ch;
 8004716:	687b      	ldr	r3, [r7, #4]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	2000022c 	.word	0x2000022c

08004724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004726:	e003      	b.n	8004730 <LoopCopyDataInit>

08004728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800472a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800472c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800472e:	3104      	adds	r1, #4

08004730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004730:	480a      	ldr	r0, [pc, #40]	; (800475c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004738:	d3f6      	bcc.n	8004728 <CopyDataInit>
  ldr r2, =_sbss
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800473c:	e002      	b.n	8004744 <LoopFillZerobss>

0800473e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004740:	f842 3b04 	str.w	r3, [r2], #4

08004744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004744:	4b08      	ldr	r3, [pc, #32]	; (8004768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004748:	d3f9      	bcc.n	800473e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800474a:	f7ff fd9b 	bl	8004284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474e:	f000 f815 	bl	800477c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004752:	f7fe fefd 	bl	8003550 <main>
  bx lr
 8004756:	4770      	bx	lr
  ldr r3, =_sidata
 8004758:	080056ac 	.word	0x080056ac
  ldr r0, =_sdata
 800475c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004760:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8004764:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8004768:	20000270 	.word	0x20000270

0800476c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800476c:	e7fe      	b.n	800476c <ADC1_IRQHandler>
	...

08004770 <__errno>:
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <__errno+0x8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000020 	.word	0x20000020

0800477c <__libc_init_array>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	2500      	movs	r5, #0
 8004780:	4e0c      	ldr	r6, [pc, #48]	; (80047b4 <__libc_init_array+0x38>)
 8004782:	4c0d      	ldr	r4, [pc, #52]	; (80047b8 <__libc_init_array+0x3c>)
 8004784:	1ba4      	subs	r4, r4, r6
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	42a5      	cmp	r5, r4
 800478a:	d109      	bne.n	80047a0 <__libc_init_array+0x24>
 800478c:	f000 ff10 	bl	80055b0 <_init>
 8004790:	2500      	movs	r5, #0
 8004792:	4e0a      	ldr	r6, [pc, #40]	; (80047bc <__libc_init_array+0x40>)
 8004794:	4c0a      	ldr	r4, [pc, #40]	; (80047c0 <__libc_init_array+0x44>)
 8004796:	1ba4      	subs	r4, r4, r6
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	42a5      	cmp	r5, r4
 800479c:	d105      	bne.n	80047aa <__libc_init_array+0x2e>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a4:	4798      	blx	r3
 80047a6:	3501      	adds	r5, #1
 80047a8:	e7ee      	b.n	8004788 <__libc_init_array+0xc>
 80047aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ae:	4798      	blx	r3
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7f2      	b.n	800479a <__libc_init_array+0x1e>
 80047b4:	080056a4 	.word	0x080056a4
 80047b8:	080056a4 	.word	0x080056a4
 80047bc:	080056a4 	.word	0x080056a4
 80047c0:	080056a8 	.word	0x080056a8

080047c4 <memset>:
 80047c4:	4603      	mov	r3, r0
 80047c6:	4402      	add	r2, r0
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d100      	bne.n	80047ce <memset+0xa>
 80047cc:	4770      	bx	lr
 80047ce:	f803 1b01 	strb.w	r1, [r3], #1
 80047d2:	e7f9      	b.n	80047c8 <memset+0x4>

080047d4 <iprintf>:
 80047d4:	b40f      	push	{r0, r1, r2, r3}
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <iprintf+0x2c>)
 80047d8:	b513      	push	{r0, r1, r4, lr}
 80047da:	681c      	ldr	r4, [r3, #0]
 80047dc:	b124      	cbz	r4, 80047e8 <iprintf+0x14>
 80047de:	69a3      	ldr	r3, [r4, #24]
 80047e0:	b913      	cbnz	r3, 80047e8 <iprintf+0x14>
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f84e 	bl	8004884 <__sinit>
 80047e8:	ab05      	add	r3, sp, #20
 80047ea:	9a04      	ldr	r2, [sp, #16]
 80047ec:	68a1      	ldr	r1, [r4, #8]
 80047ee:	4620      	mov	r0, r4
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	f000 f953 	bl	8004a9c <_vfiprintf_r>
 80047f6:	b002      	add	sp, #8
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	b004      	add	sp, #16
 80047fe:	4770      	bx	lr
 8004800:	20000020 	.word	0x20000020

08004804 <std>:
 8004804:	2300      	movs	r3, #0
 8004806:	b510      	push	{r4, lr}
 8004808:	4604      	mov	r4, r0
 800480a:	e9c0 3300 	strd	r3, r3, [r0]
 800480e:	6083      	str	r3, [r0, #8]
 8004810:	8181      	strh	r1, [r0, #12]
 8004812:	6643      	str	r3, [r0, #100]	; 0x64
 8004814:	81c2      	strh	r2, [r0, #14]
 8004816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800481a:	6183      	str	r3, [r0, #24]
 800481c:	4619      	mov	r1, r3
 800481e:	2208      	movs	r2, #8
 8004820:	305c      	adds	r0, #92	; 0x5c
 8004822:	f7ff ffcf 	bl	80047c4 <memset>
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <std+0x38>)
 8004828:	6224      	str	r4, [r4, #32]
 800482a:	6263      	str	r3, [r4, #36]	; 0x24
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <std+0x3c>)
 800482e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <std+0x40>)
 8004832:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <std+0x44>)
 8004836:	6323      	str	r3, [r4, #48]	; 0x30
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	08004ff9 	.word	0x08004ff9
 8004840:	0800501b 	.word	0x0800501b
 8004844:	08005053 	.word	0x08005053
 8004848:	08005077 	.word	0x08005077

0800484c <_cleanup_r>:
 800484c:	4901      	ldr	r1, [pc, #4]	; (8004854 <_cleanup_r+0x8>)
 800484e:	f000 b885 	b.w	800495c <_fwalk_reent>
 8004852:	bf00      	nop
 8004854:	08005351 	.word	0x08005351

08004858 <__sfmoreglue>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	2568      	movs	r5, #104	; 0x68
 800485c:	1e4a      	subs	r2, r1, #1
 800485e:	4355      	muls	r5, r2
 8004860:	460e      	mov	r6, r1
 8004862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004866:	f000 f897 	bl	8004998 <_malloc_r>
 800486a:	4604      	mov	r4, r0
 800486c:	b140      	cbz	r0, 8004880 <__sfmoreglue+0x28>
 800486e:	2100      	movs	r1, #0
 8004870:	e9c0 1600 	strd	r1, r6, [r0]
 8004874:	300c      	adds	r0, #12
 8004876:	60a0      	str	r0, [r4, #8]
 8004878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800487c:	f7ff ffa2 	bl	80047c4 <memset>
 8004880:	4620      	mov	r0, r4
 8004882:	bd70      	pop	{r4, r5, r6, pc}

08004884 <__sinit>:
 8004884:	6983      	ldr	r3, [r0, #24]
 8004886:	b510      	push	{r4, lr}
 8004888:	4604      	mov	r4, r0
 800488a:	bb33      	cbnz	r3, 80048da <__sinit+0x56>
 800488c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004890:	6503      	str	r3, [r0, #80]	; 0x50
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <__sinit+0x58>)
 8004894:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <__sinit+0x5c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6282      	str	r2, [r0, #40]	; 0x28
 800489a:	4298      	cmp	r0, r3
 800489c:	bf04      	itt	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	6183      	streq	r3, [r0, #24]
 80048a2:	f000 f81f 	bl	80048e4 <__sfp>
 80048a6:	6060      	str	r0, [r4, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 f81b 	bl	80048e4 <__sfp>
 80048ae:	60a0      	str	r0, [r4, #8]
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 f817 	bl	80048e4 <__sfp>
 80048b6:	2200      	movs	r2, #0
 80048b8:	60e0      	str	r0, [r4, #12]
 80048ba:	2104      	movs	r1, #4
 80048bc:	6860      	ldr	r0, [r4, #4]
 80048be:	f7ff ffa1 	bl	8004804 <std>
 80048c2:	2201      	movs	r2, #1
 80048c4:	2109      	movs	r1, #9
 80048c6:	68a0      	ldr	r0, [r4, #8]
 80048c8:	f7ff ff9c 	bl	8004804 <std>
 80048cc:	2202      	movs	r2, #2
 80048ce:	2112      	movs	r1, #18
 80048d0:	68e0      	ldr	r0, [r4, #12]
 80048d2:	f7ff ff97 	bl	8004804 <std>
 80048d6:	2301      	movs	r3, #1
 80048d8:	61a3      	str	r3, [r4, #24]
 80048da:	bd10      	pop	{r4, pc}
 80048dc:	0800560c 	.word	0x0800560c
 80048e0:	0800484d 	.word	0x0800484d

080048e4 <__sfp>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <__sfp+0x70>)
 80048e8:	4607      	mov	r7, r0
 80048ea:	681e      	ldr	r6, [r3, #0]
 80048ec:	69b3      	ldr	r3, [r6, #24]
 80048ee:	b913      	cbnz	r3, 80048f6 <__sfp+0x12>
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff ffc7 	bl	8004884 <__sinit>
 80048f6:	3648      	adds	r6, #72	; 0x48
 80048f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	d503      	bpl.n	8004908 <__sfp+0x24>
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	b133      	cbz	r3, 8004912 <__sfp+0x2e>
 8004904:	6836      	ldr	r6, [r6, #0]
 8004906:	e7f7      	b.n	80048f8 <__sfp+0x14>
 8004908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800490c:	b16d      	cbz	r5, 800492a <__sfp+0x46>
 800490e:	3468      	adds	r4, #104	; 0x68
 8004910:	e7f4      	b.n	80048fc <__sfp+0x18>
 8004912:	2104      	movs	r1, #4
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff ff9f 	bl	8004858 <__sfmoreglue>
 800491a:	6030      	str	r0, [r6, #0]
 800491c:	2800      	cmp	r0, #0
 800491e:	d1f1      	bne.n	8004904 <__sfp+0x20>
 8004920:	230c      	movs	r3, #12
 8004922:	4604      	mov	r4, r0
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4620      	mov	r0, r4
 8004928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <__sfp+0x74>)
 800492c:	6665      	str	r5, [r4, #100]	; 0x64
 800492e:	e9c4 5500 	strd	r5, r5, [r4]
 8004932:	60a5      	str	r5, [r4, #8]
 8004934:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004938:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800493c:	2208      	movs	r2, #8
 800493e:	4629      	mov	r1, r5
 8004940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004944:	f7ff ff3e 	bl	80047c4 <memset>
 8004948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800494c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004950:	e7e9      	b.n	8004926 <__sfp+0x42>
 8004952:	bf00      	nop
 8004954:	0800560c 	.word	0x0800560c
 8004958:	ffff0001 	.word	0xffff0001

0800495c <_fwalk_reent>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	4680      	mov	r8, r0
 8004962:	4689      	mov	r9, r1
 8004964:	2600      	movs	r6, #0
 8004966:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800496a:	b914      	cbnz	r4, 8004972 <_fwalk_reent+0x16>
 800496c:	4630      	mov	r0, r6
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004972:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004976:	3f01      	subs	r7, #1
 8004978:	d501      	bpl.n	800497e <_fwalk_reent+0x22>
 800497a:	6824      	ldr	r4, [r4, #0]
 800497c:	e7f5      	b.n	800496a <_fwalk_reent+0xe>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d907      	bls.n	8004994 <_fwalk_reent+0x38>
 8004984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004988:	3301      	adds	r3, #1
 800498a:	d003      	beq.n	8004994 <_fwalk_reent+0x38>
 800498c:	4629      	mov	r1, r5
 800498e:	4640      	mov	r0, r8
 8004990:	47c8      	blx	r9
 8004992:	4306      	orrs	r6, r0
 8004994:	3568      	adds	r5, #104	; 0x68
 8004996:	e7ee      	b.n	8004976 <_fwalk_reent+0x1a>

08004998 <_malloc_r>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	1ccd      	adds	r5, r1, #3
 800499c:	f025 0503 	bic.w	r5, r5, #3
 80049a0:	3508      	adds	r5, #8
 80049a2:	2d0c      	cmp	r5, #12
 80049a4:	bf38      	it	cc
 80049a6:	250c      	movcc	r5, #12
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	4606      	mov	r6, r0
 80049ac:	db01      	blt.n	80049b2 <_malloc_r+0x1a>
 80049ae:	42a9      	cmp	r1, r5
 80049b0:	d903      	bls.n	80049ba <_malloc_r+0x22>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	2000      	movs	r0, #0
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	f000 fd77 	bl	80054ac <__malloc_lock>
 80049be:	4a21      	ldr	r2, [pc, #132]	; (8004a44 <_malloc_r+0xac>)
 80049c0:	6814      	ldr	r4, [r2, #0]
 80049c2:	4621      	mov	r1, r4
 80049c4:	b991      	cbnz	r1, 80049ec <_malloc_r+0x54>
 80049c6:	4c20      	ldr	r4, [pc, #128]	; (8004a48 <_malloc_r+0xb0>)
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	b91b      	cbnz	r3, 80049d4 <_malloc_r+0x3c>
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fb03 	bl	8004fd8 <_sbrk_r>
 80049d2:	6020      	str	r0, [r4, #0]
 80049d4:	4629      	mov	r1, r5
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 fafe 	bl	8004fd8 <_sbrk_r>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d124      	bne.n	8004a2a <_malloc_r+0x92>
 80049e0:	230c      	movs	r3, #12
 80049e2:	4630      	mov	r0, r6
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	f000 fd62 	bl	80054ae <__malloc_unlock>
 80049ea:	e7e4      	b.n	80049b6 <_malloc_r+0x1e>
 80049ec:	680b      	ldr	r3, [r1, #0]
 80049ee:	1b5b      	subs	r3, r3, r5
 80049f0:	d418      	bmi.n	8004a24 <_malloc_r+0x8c>
 80049f2:	2b0b      	cmp	r3, #11
 80049f4:	d90f      	bls.n	8004a16 <_malloc_r+0x7e>
 80049f6:	600b      	str	r3, [r1, #0]
 80049f8:	18cc      	adds	r4, r1, r3
 80049fa:	50cd      	str	r5, [r1, r3]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 fd56 	bl	80054ae <__malloc_unlock>
 8004a02:	f104 000b 	add.w	r0, r4, #11
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	f020 0007 	bic.w	r0, r0, #7
 8004a0c:	1ac3      	subs	r3, r0, r3
 8004a0e:	d0d3      	beq.n	80049b8 <_malloc_r+0x20>
 8004a10:	425a      	negs	r2, r3
 8004a12:	50e2      	str	r2, [r4, r3]
 8004a14:	e7d0      	b.n	80049b8 <_malloc_r+0x20>
 8004a16:	684b      	ldr	r3, [r1, #4]
 8004a18:	428c      	cmp	r4, r1
 8004a1a:	bf16      	itet	ne
 8004a1c:	6063      	strne	r3, [r4, #4]
 8004a1e:	6013      	streq	r3, [r2, #0]
 8004a20:	460c      	movne	r4, r1
 8004a22:	e7eb      	b.n	80049fc <_malloc_r+0x64>
 8004a24:	460c      	mov	r4, r1
 8004a26:	6849      	ldr	r1, [r1, #4]
 8004a28:	e7cc      	b.n	80049c4 <_malloc_r+0x2c>
 8004a2a:	1cc4      	adds	r4, r0, #3
 8004a2c:	f024 0403 	bic.w	r4, r4, #3
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d005      	beq.n	8004a40 <_malloc_r+0xa8>
 8004a34:	1a21      	subs	r1, r4, r0
 8004a36:	4630      	mov	r0, r6
 8004a38:	f000 face 	bl	8004fd8 <_sbrk_r>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d0cf      	beq.n	80049e0 <_malloc_r+0x48>
 8004a40:	6025      	str	r5, [r4, #0]
 8004a42:	e7db      	b.n	80049fc <_malloc_r+0x64>
 8004a44:	200000b0 	.word	0x200000b0
 8004a48:	200000b4 	.word	0x200000b4

08004a4c <__sfputc_r>:
 8004a4c:	6893      	ldr	r3, [r2, #8]
 8004a4e:	b410      	push	{r4}
 8004a50:	3b01      	subs	r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	6093      	str	r3, [r2, #8]
 8004a56:	da07      	bge.n	8004a68 <__sfputc_r+0x1c>
 8004a58:	6994      	ldr	r4, [r2, #24]
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	db01      	blt.n	8004a62 <__sfputc_r+0x16>
 8004a5e:	290a      	cmp	r1, #10
 8004a60:	d102      	bne.n	8004a68 <__sfputc_r+0x1c>
 8004a62:	bc10      	pop	{r4}
 8004a64:	f000 bb0c 	b.w	8005080 <__swbuf_r>
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	1c58      	adds	r0, r3, #1
 8004a6c:	6010      	str	r0, [r2, #0]
 8004a6e:	7019      	strb	r1, [r3, #0]
 8004a70:	4608      	mov	r0, r1
 8004a72:	bc10      	pop	{r4}
 8004a74:	4770      	bx	lr

08004a76 <__sfputs_r>:
 8004a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a78:	4606      	mov	r6, r0
 8004a7a:	460f      	mov	r7, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	18d5      	adds	r5, r2, r3
 8004a80:	42ac      	cmp	r4, r5
 8004a82:	d101      	bne.n	8004a88 <__sfputs_r+0x12>
 8004a84:	2000      	movs	r0, #0
 8004a86:	e007      	b.n	8004a98 <__sfputs_r+0x22>
 8004a88:	463a      	mov	r2, r7
 8004a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ffdc 	bl	8004a4c <__sfputc_r>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d1f3      	bne.n	8004a80 <__sfputs_r+0xa>
 8004a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a9c <_vfiprintf_r>:
 8004a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	b09d      	sub	sp, #116	; 0x74
 8004aa4:	4617      	mov	r7, r2
 8004aa6:	461d      	mov	r5, r3
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	b118      	cbz	r0, 8004ab4 <_vfiprintf_r+0x18>
 8004aac:	6983      	ldr	r3, [r0, #24]
 8004aae:	b90b      	cbnz	r3, 8004ab4 <_vfiprintf_r+0x18>
 8004ab0:	f7ff fee8 	bl	8004884 <__sinit>
 8004ab4:	4b7c      	ldr	r3, [pc, #496]	; (8004ca8 <_vfiprintf_r+0x20c>)
 8004ab6:	429c      	cmp	r4, r3
 8004ab8:	d158      	bne.n	8004b6c <_vfiprintf_r+0xd0>
 8004aba:	6874      	ldr	r4, [r6, #4]
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	0718      	lsls	r0, r3, #28
 8004ac0:	d55e      	bpl.n	8004b80 <_vfiprintf_r+0xe4>
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d05b      	beq.n	8004b80 <_vfiprintf_r+0xe4>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
 8004acc:	2320      	movs	r3, #32
 8004ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ad2:	2330      	movs	r3, #48	; 0x30
 8004ad4:	f04f 0b01 	mov.w	fp, #1
 8004ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004adc:	9503      	str	r5, [sp, #12]
 8004ade:	46b8      	mov	r8, r7
 8004ae0:	4645      	mov	r5, r8
 8004ae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ae6:	b10b      	cbz	r3, 8004aec <_vfiprintf_r+0x50>
 8004ae8:	2b25      	cmp	r3, #37	; 0x25
 8004aea:	d154      	bne.n	8004b96 <_vfiprintf_r+0xfa>
 8004aec:	ebb8 0a07 	subs.w	sl, r8, r7
 8004af0:	d00b      	beq.n	8004b0a <_vfiprintf_r+0x6e>
 8004af2:	4653      	mov	r3, sl
 8004af4:	463a      	mov	r2, r7
 8004af6:	4621      	mov	r1, r4
 8004af8:	4630      	mov	r0, r6
 8004afa:	f7ff ffbc 	bl	8004a76 <__sfputs_r>
 8004afe:	3001      	adds	r0, #1
 8004b00:	f000 80c2 	beq.w	8004c88 <_vfiprintf_r+0x1ec>
 8004b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b06:	4453      	add	r3, sl
 8004b08:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0a:	f898 3000 	ldrb.w	r3, [r8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80ba 	beq.w	8004c88 <_vfiprintf_r+0x1ec>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b26:	931a      	str	r3, [sp, #104]	; 0x68
 8004b28:	46a8      	mov	r8, r5
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004b30:	485e      	ldr	r0, [pc, #376]	; (8004cac <_vfiprintf_r+0x210>)
 8004b32:	f000 fcad 	bl	8005490 <memchr>
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	bb78      	cbnz	r0, 8004b9a <_vfiprintf_r+0xfe>
 8004b3a:	06d9      	lsls	r1, r3, #27
 8004b3c:	bf44      	itt	mi
 8004b3e:	2220      	movmi	r2, #32
 8004b40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b44:	071a      	lsls	r2, r3, #28
 8004b46:	bf44      	itt	mi
 8004b48:	222b      	movmi	r2, #43	; 0x2b
 8004b4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b4e:	782a      	ldrb	r2, [r5, #0]
 8004b50:	2a2a      	cmp	r2, #42	; 0x2a
 8004b52:	d02a      	beq.n	8004baa <_vfiprintf_r+0x10e>
 8004b54:	46a8      	mov	r8, r5
 8004b56:	2000      	movs	r0, #0
 8004b58:	250a      	movs	r5, #10
 8004b5a:	9a07      	ldr	r2, [sp, #28]
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b62:	3b30      	subs	r3, #48	; 0x30
 8004b64:	2b09      	cmp	r3, #9
 8004b66:	d969      	bls.n	8004c3c <_vfiprintf_r+0x1a0>
 8004b68:	b360      	cbz	r0, 8004bc4 <_vfiprintf_r+0x128>
 8004b6a:	e024      	b.n	8004bb6 <_vfiprintf_r+0x11a>
 8004b6c:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <_vfiprintf_r+0x214>)
 8004b6e:	429c      	cmp	r4, r3
 8004b70:	d101      	bne.n	8004b76 <_vfiprintf_r+0xda>
 8004b72:	68b4      	ldr	r4, [r6, #8]
 8004b74:	e7a2      	b.n	8004abc <_vfiprintf_r+0x20>
 8004b76:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <_vfiprintf_r+0x218>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	bf08      	it	eq
 8004b7c:	68f4      	ldreq	r4, [r6, #12]
 8004b7e:	e79d      	b.n	8004abc <_vfiprintf_r+0x20>
 8004b80:	4621      	mov	r1, r4
 8004b82:	4630      	mov	r0, r6
 8004b84:	f000 fae0 	bl	8005148 <__swsetup_r>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d09d      	beq.n	8004ac8 <_vfiprintf_r+0x2c>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b90:	b01d      	add	sp, #116	; 0x74
 8004b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b96:	46a8      	mov	r8, r5
 8004b98:	e7a2      	b.n	8004ae0 <_vfiprintf_r+0x44>
 8004b9a:	4a44      	ldr	r2, [pc, #272]	; (8004cac <_vfiprintf_r+0x210>)
 8004b9c:	4645      	mov	r5, r8
 8004b9e:	1a80      	subs	r0, r0, r2
 8004ba0:	fa0b f000 	lsl.w	r0, fp, r0
 8004ba4:	4318      	orrs	r0, r3
 8004ba6:	9004      	str	r0, [sp, #16]
 8004ba8:	e7be      	b.n	8004b28 <_vfiprintf_r+0x8c>
 8004baa:	9a03      	ldr	r2, [sp, #12]
 8004bac:	1d11      	adds	r1, r2, #4
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	9103      	str	r1, [sp, #12]
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	db01      	blt.n	8004bba <_vfiprintf_r+0x11e>
 8004bb6:	9207      	str	r2, [sp, #28]
 8004bb8:	e004      	b.n	8004bc4 <_vfiprintf_r+0x128>
 8004bba:	4252      	negs	r2, r2
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	9207      	str	r2, [sp, #28]
 8004bc2:	9304      	str	r3, [sp, #16]
 8004bc4:	f898 3000 	ldrb.w	r3, [r8]
 8004bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bca:	d10e      	bne.n	8004bea <_vfiprintf_r+0x14e>
 8004bcc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd2:	d138      	bne.n	8004c46 <_vfiprintf_r+0x1aa>
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	f108 0802 	add.w	r8, r8, #2
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	9203      	str	r2, [sp, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfb8      	it	lt
 8004be4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004be8:	9305      	str	r3, [sp, #20]
 8004bea:	4d33      	ldr	r5, [pc, #204]	; (8004cb8 <_vfiprintf_r+0x21c>)
 8004bec:	2203      	movs	r2, #3
 8004bee:	f898 1000 	ldrb.w	r1, [r8]
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 fc4c 	bl	8005490 <memchr>
 8004bf8:	b140      	cbz	r0, 8004c0c <_vfiprintf_r+0x170>
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	1b40      	subs	r0, r0, r5
 8004bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8004c02:	9b04      	ldr	r3, [sp, #16]
 8004c04:	f108 0801 	add.w	r8, r8, #1
 8004c08:	4303      	orrs	r3, r0
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	f898 1000 	ldrb.w	r1, [r8]
 8004c10:	2206      	movs	r2, #6
 8004c12:	482a      	ldr	r0, [pc, #168]	; (8004cbc <_vfiprintf_r+0x220>)
 8004c14:	f108 0701 	add.w	r7, r8, #1
 8004c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c1c:	f000 fc38 	bl	8005490 <memchr>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d037      	beq.n	8004c94 <_vfiprintf_r+0x1f8>
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <_vfiprintf_r+0x224>)
 8004c26:	bb1b      	cbnz	r3, 8004c70 <_vfiprintf_r+0x1d4>
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	3308      	adds	r3, #8
 8004c32:	9303      	str	r3, [sp, #12]
 8004c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c36:	444b      	add	r3, r9
 8004c38:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3a:	e750      	b.n	8004ade <_vfiprintf_r+0x42>
 8004c3c:	fb05 3202 	mla	r2, r5, r2, r3
 8004c40:	2001      	movs	r0, #1
 8004c42:	4688      	mov	r8, r1
 8004c44:	e78a      	b.n	8004b5c <_vfiprintf_r+0xc0>
 8004c46:	2300      	movs	r3, #0
 8004c48:	250a      	movs	r5, #10
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f108 0801 	add.w	r8, r8, #1
 8004c50:	9305      	str	r3, [sp, #20]
 8004c52:	4640      	mov	r0, r8
 8004c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c58:	3a30      	subs	r2, #48	; 0x30
 8004c5a:	2a09      	cmp	r2, #9
 8004c5c:	d903      	bls.n	8004c66 <_vfiprintf_r+0x1ca>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0c3      	beq.n	8004bea <_vfiprintf_r+0x14e>
 8004c62:	9105      	str	r1, [sp, #20]
 8004c64:	e7c1      	b.n	8004bea <_vfiprintf_r+0x14e>
 8004c66:	fb05 2101 	mla	r1, r5, r1, r2
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	e7f0      	b.n	8004c52 <_vfiprintf_r+0x1b6>
 8004c70:	ab03      	add	r3, sp, #12
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4622      	mov	r2, r4
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <_vfiprintf_r+0x228>)
 8004c78:	a904      	add	r1, sp, #16
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f3af 8000 	nop.w
 8004c80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004c84:	4681      	mov	r9, r0
 8004c86:	d1d5      	bne.n	8004c34 <_vfiprintf_r+0x198>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	065b      	lsls	r3, r3, #25
 8004c8c:	f53f af7e 	bmi.w	8004b8c <_vfiprintf_r+0xf0>
 8004c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c92:	e77d      	b.n	8004b90 <_vfiprintf_r+0xf4>
 8004c94:	ab03      	add	r3, sp, #12
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4622      	mov	r2, r4
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <_vfiprintf_r+0x228>)
 8004c9c:	a904      	add	r1, sp, #16
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 f888 	bl	8004db4 <_printf_i>
 8004ca4:	e7ec      	b.n	8004c80 <_vfiprintf_r+0x1e4>
 8004ca6:	bf00      	nop
 8004ca8:	08005630 	.word	0x08005630
 8004cac:	08005670 	.word	0x08005670
 8004cb0:	08005650 	.word	0x08005650
 8004cb4:	08005610 	.word	0x08005610
 8004cb8:	08005676 	.word	0x08005676
 8004cbc:	0800567a 	.word	0x0800567a
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	08004a77 	.word	0x08004a77

08004cc8 <_printf_common>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	4691      	mov	r9, r2
 8004cce:	461f      	mov	r7, r3
 8004cd0:	688a      	ldr	r2, [r1, #8]
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bfb8      	it	lt
 8004cda:	4613      	movlt	r3, r2
 8004cdc:	f8c9 3000 	str.w	r3, [r9]
 8004ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cea:	b112      	cbz	r2, 8004cf2 <_printf_common+0x2a>
 8004cec:	3301      	adds	r3, #1
 8004cee:	f8c9 3000 	str.w	r3, [r9]
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	0699      	lsls	r1, r3, #26
 8004cf6:	bf42      	ittt	mi
 8004cf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cfc:	3302      	addmi	r3, #2
 8004cfe:	f8c9 3000 	strmi.w	r3, [r9]
 8004d02:	6825      	ldr	r5, [r4, #0]
 8004d04:	f015 0506 	ands.w	r5, r5, #6
 8004d08:	d107      	bne.n	8004d1a <_printf_common+0x52>
 8004d0a:	f104 0a19 	add.w	sl, r4, #25
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	f8d9 2000 	ldr.w	r2, [r9]
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	42ab      	cmp	r3, r5
 8004d18:	dc29      	bgt.n	8004d6e <_printf_common+0xa6>
 8004d1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	3300      	adds	r3, #0
 8004d22:	bf18      	it	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	0692      	lsls	r2, r2, #26
 8004d28:	d42e      	bmi.n	8004d88 <_printf_common+0xc0>
 8004d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d2e:	4639      	mov	r1, r7
 8004d30:	4630      	mov	r0, r6
 8004d32:	47c0      	blx	r8
 8004d34:	3001      	adds	r0, #1
 8004d36:	d021      	beq.n	8004d7c <_printf_common+0xb4>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	68e5      	ldr	r5, [r4, #12]
 8004d3c:	f003 0306 	and.w	r3, r3, #6
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	bf18      	it	ne
 8004d44:	2500      	movne	r5, #0
 8004d46:	f8d9 2000 	ldr.w	r2, [r9]
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	bf08      	it	eq
 8004d50:	1aad      	subeq	r5, r5, r2
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	bf08      	it	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bfc4      	itt	gt
 8004d60:	1a9b      	subgt	r3, r3, r2
 8004d62:	18ed      	addgt	r5, r5, r3
 8004d64:	341a      	adds	r4, #26
 8004d66:	454d      	cmp	r5, r9
 8004d68:	d11a      	bne.n	8004da0 <_printf_common+0xd8>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e008      	b.n	8004d80 <_printf_common+0xb8>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4652      	mov	r2, sl
 8004d72:	4639      	mov	r1, r7
 8004d74:	4630      	mov	r0, r6
 8004d76:	47c0      	blx	r8
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d103      	bne.n	8004d84 <_printf_common+0xbc>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d84:	3501      	adds	r5, #1
 8004d86:	e7c2      	b.n	8004d0e <_printf_common+0x46>
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	18e1      	adds	r1, r4, r3
 8004d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d96:	4422      	add	r2, r4
 8004d98:	3302      	adds	r3, #2
 8004d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d9e:	e7c4      	b.n	8004d2a <_printf_common+0x62>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4622      	mov	r2, r4
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0e6      	beq.n	8004d7c <_printf_common+0xb4>
 8004dae:	f109 0901 	add.w	r9, r9, #1
 8004db2:	e7d8      	b.n	8004d66 <_printf_common+0x9e>

08004db4 <_printf_i>:
 8004db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	7e09      	ldrb	r1, [r1, #24]
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	296e      	cmp	r1, #110	; 0x6e
 8004dc4:	4617      	mov	r7, r2
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	4698      	mov	r8, r3
 8004dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dcc:	f000 80b3 	beq.w	8004f36 <_printf_i+0x182>
 8004dd0:	d822      	bhi.n	8004e18 <_printf_i+0x64>
 8004dd2:	2963      	cmp	r1, #99	; 0x63
 8004dd4:	d036      	beq.n	8004e44 <_printf_i+0x90>
 8004dd6:	d80a      	bhi.n	8004dee <_printf_i+0x3a>
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	f000 80b9 	beq.w	8004f50 <_printf_i+0x19c>
 8004dde:	2958      	cmp	r1, #88	; 0x58
 8004de0:	f000 8083 	beq.w	8004eea <_printf_i+0x136>
 8004de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004dec:	e032      	b.n	8004e54 <_printf_i+0xa0>
 8004dee:	2964      	cmp	r1, #100	; 0x64
 8004df0:	d001      	beq.n	8004df6 <_printf_i+0x42>
 8004df2:	2969      	cmp	r1, #105	; 0x69
 8004df4:	d1f6      	bne.n	8004de4 <_printf_i+0x30>
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	0605      	lsls	r5, r0, #24
 8004dfc:	f103 0104 	add.w	r1, r3, #4
 8004e00:	d52a      	bpl.n	8004e58 <_printf_i+0xa4>
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6011      	str	r1, [r2, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da03      	bge.n	8004e12 <_printf_i+0x5e>
 8004e0a:	222d      	movs	r2, #45	; 0x2d
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e12:	486f      	ldr	r0, [pc, #444]	; (8004fd0 <_printf_i+0x21c>)
 8004e14:	220a      	movs	r2, #10
 8004e16:	e039      	b.n	8004e8c <_printf_i+0xd8>
 8004e18:	2973      	cmp	r1, #115	; 0x73
 8004e1a:	f000 809d 	beq.w	8004f58 <_printf_i+0x1a4>
 8004e1e:	d808      	bhi.n	8004e32 <_printf_i+0x7e>
 8004e20:	296f      	cmp	r1, #111	; 0x6f
 8004e22:	d020      	beq.n	8004e66 <_printf_i+0xb2>
 8004e24:	2970      	cmp	r1, #112	; 0x70
 8004e26:	d1dd      	bne.n	8004de4 <_printf_i+0x30>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	f043 0320 	orr.w	r3, r3, #32
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	e003      	b.n	8004e3a <_printf_i+0x86>
 8004e32:	2975      	cmp	r1, #117	; 0x75
 8004e34:	d017      	beq.n	8004e66 <_printf_i+0xb2>
 8004e36:	2978      	cmp	r1, #120	; 0x78
 8004e38:	d1d4      	bne.n	8004de4 <_printf_i+0x30>
 8004e3a:	2378      	movs	r3, #120	; 0x78
 8004e3c:	4865      	ldr	r0, [pc, #404]	; (8004fd4 <_printf_i+0x220>)
 8004e3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e42:	e055      	b.n	8004ef0 <_printf_i+0x13c>
 8004e44:	6813      	ldr	r3, [r2, #0]
 8004e46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4a:	1d19      	adds	r1, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6011      	str	r1, [r2, #0]
 8004e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e54:	2301      	movs	r3, #1
 8004e56:	e08c      	b.n	8004f72 <_printf_i+0x1be>
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e5e:	6011      	str	r1, [r2, #0]
 8004e60:	bf18      	it	ne
 8004e62:	b21b      	sxthne	r3, r3
 8004e64:	e7cf      	b.n	8004e06 <_printf_i+0x52>
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6010      	str	r0, [r2, #0]
 8004e6e:	0628      	lsls	r0, r5, #24
 8004e70:	d501      	bpl.n	8004e76 <_printf_i+0xc2>
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <_printf_i+0xc8>
 8004e76:	0668      	lsls	r0, r5, #25
 8004e78:	d5fb      	bpl.n	8004e72 <_printf_i+0xbe>
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	296f      	cmp	r1, #111	; 0x6f
 8004e7e:	bf14      	ite	ne
 8004e80:	220a      	movne	r2, #10
 8004e82:	2208      	moveq	r2, #8
 8004e84:	4852      	ldr	r0, [pc, #328]	; (8004fd0 <_printf_i+0x21c>)
 8004e86:	2100      	movs	r1, #0
 8004e88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e8c:	6865      	ldr	r5, [r4, #4]
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	60a5      	str	r5, [r4, #8]
 8004e92:	f2c0 8095 	blt.w	8004fc0 <_printf_i+0x20c>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	f021 0104 	bic.w	r1, r1, #4
 8004e9c:	6021      	str	r1, [r4, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d13d      	bne.n	8004f1e <_printf_i+0x16a>
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	f040 808e 	bne.w	8004fc4 <_printf_i+0x210>
 8004ea8:	4665      	mov	r5, ip
 8004eaa:	2a08      	cmp	r2, #8
 8004eac:	d10b      	bne.n	8004ec6 <_printf_i+0x112>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	07db      	lsls	r3, r3, #31
 8004eb2:	d508      	bpl.n	8004ec6 <_printf_i+0x112>
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	6862      	ldr	r2, [r4, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bfde      	ittt	le
 8004ebc:	2330      	movle	r3, #48	; 0x30
 8004ebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ec2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ec6:	ebac 0305 	sub.w	r3, ip, r5
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	f8cd 8000 	str.w	r8, [sp]
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	aa03      	add	r2, sp, #12
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff fef6 	bl	8004cc8 <_printf_common>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d14d      	bne.n	8004f7c <_printf_i+0x1c8>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee4:	b005      	add	sp, #20
 8004ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eea:	4839      	ldr	r0, [pc, #228]	; (8004fd0 <_printf_i+0x21c>)
 8004eec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	1d1d      	adds	r5, r3, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6015      	str	r5, [r2, #0]
 8004efa:	060a      	lsls	r2, r1, #24
 8004efc:	d50b      	bpl.n	8004f16 <_printf_i+0x162>
 8004efe:	07ca      	lsls	r2, r1, #31
 8004f00:	bf44      	itt	mi
 8004f02:	f041 0120 	orrmi.w	r1, r1, #32
 8004f06:	6021      	strmi	r1, [r4, #0]
 8004f08:	b91b      	cbnz	r3, 8004f12 <_printf_i+0x15e>
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	f022 0220 	bic.w	r2, r2, #32
 8004f10:	6022      	str	r2, [r4, #0]
 8004f12:	2210      	movs	r2, #16
 8004f14:	e7b7      	b.n	8004e86 <_printf_i+0xd2>
 8004f16:	064d      	lsls	r5, r1, #25
 8004f18:	bf48      	it	mi
 8004f1a:	b29b      	uxthmi	r3, r3
 8004f1c:	e7ef      	b.n	8004efe <_printf_i+0x14a>
 8004f1e:	4665      	mov	r5, ip
 8004f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f24:	fb02 3311 	mls	r3, r2, r1, r3
 8004f28:	5cc3      	ldrb	r3, [r0, r3]
 8004f2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f2e:	460b      	mov	r3, r1
 8004f30:	2900      	cmp	r1, #0
 8004f32:	d1f5      	bne.n	8004f20 <_printf_i+0x16c>
 8004f34:	e7b9      	b.n	8004eaa <_printf_i+0xf6>
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	6825      	ldr	r5, [r4, #0]
 8004f3a:	1d18      	adds	r0, r3, #4
 8004f3c:	6961      	ldr	r1, [r4, #20]
 8004f3e:	6010      	str	r0, [r2, #0]
 8004f40:	0628      	lsls	r0, r5, #24
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	d501      	bpl.n	8004f4a <_printf_i+0x196>
 8004f46:	6019      	str	r1, [r3, #0]
 8004f48:	e002      	b.n	8004f50 <_printf_i+0x19c>
 8004f4a:	066a      	lsls	r2, r5, #25
 8004f4c:	d5fb      	bpl.n	8004f46 <_printf_i+0x192>
 8004f4e:	8019      	strh	r1, [r3, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	4665      	mov	r5, ip
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	e7b9      	b.n	8004ecc <_printf_i+0x118>
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	1d19      	adds	r1, r3, #4
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	681d      	ldr	r5, [r3, #0]
 8004f60:	6862      	ldr	r2, [r4, #4]
 8004f62:	2100      	movs	r1, #0
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 fa93 	bl	8005490 <memchr>
 8004f6a:	b108      	cbz	r0, 8004f70 <_printf_i+0x1bc>
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	6060      	str	r0, [r4, #4]
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	6123      	str	r3, [r4, #16]
 8004f74:	2300      	movs	r3, #0
 8004f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7a:	e7a7      	b.n	8004ecc <_printf_i+0x118>
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	462a      	mov	r2, r5
 8004f80:	4639      	mov	r1, r7
 8004f82:	4630      	mov	r0, r6
 8004f84:	47c0      	blx	r8
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0aa      	beq.n	8004ee0 <_printf_i+0x12c>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	079b      	lsls	r3, r3, #30
 8004f8e:	d413      	bmi.n	8004fb8 <_printf_i+0x204>
 8004f90:	68e0      	ldr	r0, [r4, #12]
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	4298      	cmp	r0, r3
 8004f96:	bfb8      	it	lt
 8004f98:	4618      	movlt	r0, r3
 8004f9a:	e7a3      	b.n	8004ee4 <_printf_i+0x130>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	464a      	mov	r2, r9
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d09a      	beq.n	8004ee0 <_printf_i+0x12c>
 8004faa:	3501      	adds	r5, #1
 8004fac:	68e3      	ldr	r3, [r4, #12]
 8004fae:	9a03      	ldr	r2, [sp, #12]
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	dcf2      	bgt.n	8004f9c <_printf_i+0x1e8>
 8004fb6:	e7eb      	b.n	8004f90 <_printf_i+0x1dc>
 8004fb8:	2500      	movs	r5, #0
 8004fba:	f104 0919 	add.w	r9, r4, #25
 8004fbe:	e7f5      	b.n	8004fac <_printf_i+0x1f8>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ac      	bne.n	8004f1e <_printf_i+0x16a>
 8004fc4:	7803      	ldrb	r3, [r0, #0]
 8004fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fce:	e76c      	b.n	8004eaa <_printf_i+0xf6>
 8004fd0:	08005681 	.word	0x08005681
 8004fd4:	08005692 	.word	0x08005692

08004fd8 <_sbrk_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	2300      	movs	r3, #0
 8004fdc:	4c05      	ldr	r4, [pc, #20]	; (8004ff4 <_sbrk_r+0x1c>)
 8004fde:	4605      	mov	r5, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	f7ff f922 	bl	800422c <_sbrk>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_sbrk_r+0x1a>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_sbrk_r+0x1a>
 8004ff0:	602b      	str	r3, [r5, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	2000026c 	.word	0x2000026c

08004ff8 <__sread>:
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	f000 faa2 	bl	8005548 <_read_r>
 8005004:	2800      	cmp	r0, #0
 8005006:	bfab      	itete	ge
 8005008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800500a:	89a3      	ldrhlt	r3, [r4, #12]
 800500c:	181b      	addge	r3, r3, r0
 800500e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005012:	bfac      	ite	ge
 8005014:	6563      	strge	r3, [r4, #84]	; 0x54
 8005016:	81a3      	strhlt	r3, [r4, #12]
 8005018:	bd10      	pop	{r4, pc}

0800501a <__swrite>:
 800501a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501e:	461f      	mov	r7, r3
 8005020:	898b      	ldrh	r3, [r1, #12]
 8005022:	4605      	mov	r5, r0
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	460c      	mov	r4, r1
 8005028:	4616      	mov	r6, r2
 800502a:	d505      	bpl.n	8005038 <__swrite+0x1e>
 800502c:	2302      	movs	r3, #2
 800502e:	2200      	movs	r2, #0
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 f9b6 	bl	80053a4 <_lseek_r>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	4632      	mov	r2, r6
 800503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005046:	463b      	mov	r3, r7
 8005048:	4628      	mov	r0, r5
 800504a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	f000 b869 	b.w	8005124 <_write_r>

08005052 <__sseek>:
 8005052:	b510      	push	{r4, lr}
 8005054:	460c      	mov	r4, r1
 8005056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505a:	f000 f9a3 	bl	80053a4 <_lseek_r>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	bf15      	itete	ne
 8005064:	6560      	strne	r0, [r4, #84]	; 0x54
 8005066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800506a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800506e:	81a3      	strheq	r3, [r4, #12]
 8005070:	bf18      	it	ne
 8005072:	81a3      	strhne	r3, [r4, #12]
 8005074:	bd10      	pop	{r4, pc}

08005076 <__sclose>:
 8005076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507a:	f000 b8d3 	b.w	8005224 <_close_r>
	...

08005080 <__swbuf_r>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	460e      	mov	r6, r1
 8005084:	4614      	mov	r4, r2
 8005086:	4605      	mov	r5, r0
 8005088:	b118      	cbz	r0, 8005092 <__swbuf_r+0x12>
 800508a:	6983      	ldr	r3, [r0, #24]
 800508c:	b90b      	cbnz	r3, 8005092 <__swbuf_r+0x12>
 800508e:	f7ff fbf9 	bl	8004884 <__sinit>
 8005092:	4b21      	ldr	r3, [pc, #132]	; (8005118 <__swbuf_r+0x98>)
 8005094:	429c      	cmp	r4, r3
 8005096:	d12a      	bne.n	80050ee <__swbuf_r+0x6e>
 8005098:	686c      	ldr	r4, [r5, #4]
 800509a:	69a3      	ldr	r3, [r4, #24]
 800509c:	60a3      	str	r3, [r4, #8]
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	071a      	lsls	r2, r3, #28
 80050a2:	d52e      	bpl.n	8005102 <__swbuf_r+0x82>
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	b363      	cbz	r3, 8005102 <__swbuf_r+0x82>
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	b2f6      	uxtb	r6, r6
 80050ae:	1ac0      	subs	r0, r0, r3
 80050b0:	6963      	ldr	r3, [r4, #20]
 80050b2:	4637      	mov	r7, r6
 80050b4:	4283      	cmp	r3, r0
 80050b6:	dc04      	bgt.n	80050c2 <__swbuf_r+0x42>
 80050b8:	4621      	mov	r1, r4
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 f948 	bl	8005350 <_fflush_r>
 80050c0:	bb28      	cbnz	r0, 800510e <__swbuf_r+0x8e>
 80050c2:	68a3      	ldr	r3, [r4, #8]
 80050c4:	3001      	adds	r0, #1
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60a3      	str	r3, [r4, #8]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	6022      	str	r2, [r4, #0]
 80050d0:	701e      	strb	r6, [r3, #0]
 80050d2:	6963      	ldr	r3, [r4, #20]
 80050d4:	4283      	cmp	r3, r0
 80050d6:	d004      	beq.n	80050e2 <__swbuf_r+0x62>
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	07db      	lsls	r3, r3, #31
 80050dc:	d519      	bpl.n	8005112 <__swbuf_r+0x92>
 80050de:	2e0a      	cmp	r6, #10
 80050e0:	d117      	bne.n	8005112 <__swbuf_r+0x92>
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 f933 	bl	8005350 <_fflush_r>
 80050ea:	b190      	cbz	r0, 8005112 <__swbuf_r+0x92>
 80050ec:	e00f      	b.n	800510e <__swbuf_r+0x8e>
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <__swbuf_r+0x9c>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d101      	bne.n	80050f8 <__swbuf_r+0x78>
 80050f4:	68ac      	ldr	r4, [r5, #8]
 80050f6:	e7d0      	b.n	800509a <__swbuf_r+0x1a>
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <__swbuf_r+0xa0>)
 80050fa:	429c      	cmp	r4, r3
 80050fc:	bf08      	it	eq
 80050fe:	68ec      	ldreq	r4, [r5, #12]
 8005100:	e7cb      	b.n	800509a <__swbuf_r+0x1a>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 f81f 	bl	8005148 <__swsetup_r>
 800510a:	2800      	cmp	r0, #0
 800510c:	d0cc      	beq.n	80050a8 <__swbuf_r+0x28>
 800510e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005112:	4638      	mov	r0, r7
 8005114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005116:	bf00      	nop
 8005118:	08005630 	.word	0x08005630
 800511c:	08005650 	.word	0x08005650
 8005120:	08005610 	.word	0x08005610

08005124 <_write_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4605      	mov	r5, r0
 8005128:	4608      	mov	r0, r1
 800512a:	4611      	mov	r1, r2
 800512c:	2200      	movs	r2, #0
 800512e:	4c05      	ldr	r4, [pc, #20]	; (8005144 <_write_r+0x20>)
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f7ff f82d 	bl	8004192 <_write>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_write_r+0x1e>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	b103      	cbz	r3, 8005142 <_write_r+0x1e>
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	2000026c 	.word	0x2000026c

08005148 <__swsetup_r>:
 8005148:	4b32      	ldr	r3, [pc, #200]	; (8005214 <__swsetup_r+0xcc>)
 800514a:	b570      	push	{r4, r5, r6, lr}
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	4606      	mov	r6, r0
 8005150:	460c      	mov	r4, r1
 8005152:	b125      	cbz	r5, 800515e <__swsetup_r+0x16>
 8005154:	69ab      	ldr	r3, [r5, #24]
 8005156:	b913      	cbnz	r3, 800515e <__swsetup_r+0x16>
 8005158:	4628      	mov	r0, r5
 800515a:	f7ff fb93 	bl	8004884 <__sinit>
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <__swsetup_r+0xd0>)
 8005160:	429c      	cmp	r4, r3
 8005162:	d10f      	bne.n	8005184 <__swsetup_r+0x3c>
 8005164:	686c      	ldr	r4, [r5, #4]
 8005166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800516a:	b29a      	uxth	r2, r3
 800516c:	0715      	lsls	r5, r2, #28
 800516e:	d42c      	bmi.n	80051ca <__swsetup_r+0x82>
 8005170:	06d0      	lsls	r0, r2, #27
 8005172:	d411      	bmi.n	8005198 <__swsetup_r+0x50>
 8005174:	2209      	movs	r2, #9
 8005176:	6032      	str	r2, [r6, #0]
 8005178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005182:	e03e      	b.n	8005202 <__swsetup_r+0xba>
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <__swsetup_r+0xd4>)
 8005186:	429c      	cmp	r4, r3
 8005188:	d101      	bne.n	800518e <__swsetup_r+0x46>
 800518a:	68ac      	ldr	r4, [r5, #8]
 800518c:	e7eb      	b.n	8005166 <__swsetup_r+0x1e>
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <__swsetup_r+0xd8>)
 8005190:	429c      	cmp	r4, r3
 8005192:	bf08      	it	eq
 8005194:	68ec      	ldreq	r4, [r5, #12]
 8005196:	e7e6      	b.n	8005166 <__swsetup_r+0x1e>
 8005198:	0751      	lsls	r1, r2, #29
 800519a:	d512      	bpl.n	80051c2 <__swsetup_r+0x7a>
 800519c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800519e:	b141      	cbz	r1, 80051b2 <__swsetup_r+0x6a>
 80051a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051a4:	4299      	cmp	r1, r3
 80051a6:	d002      	beq.n	80051ae <__swsetup_r+0x66>
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f981 	bl	80054b0 <_free_r>
 80051ae:	2300      	movs	r3, #0
 80051b0:	6363      	str	r3, [r4, #52]	; 0x34
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	2300      	movs	r3, #0
 80051bc:	6063      	str	r3, [r4, #4]
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f043 0308 	orr.w	r3, r3, #8
 80051c8:	81a3      	strh	r3, [r4, #12]
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	b94b      	cbnz	r3, 80051e2 <__swsetup_r+0x9a>
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d003      	beq.n	80051e2 <__swsetup_r+0x9a>
 80051da:	4621      	mov	r1, r4
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f917 	bl	8005410 <__smakebuf_r>
 80051e2:	89a2      	ldrh	r2, [r4, #12]
 80051e4:	f012 0301 	ands.w	r3, r2, #1
 80051e8:	d00c      	beq.n	8005204 <__swsetup_r+0xbc>
 80051ea:	2300      	movs	r3, #0
 80051ec:	60a3      	str	r3, [r4, #8]
 80051ee:	6963      	ldr	r3, [r4, #20]
 80051f0:	425b      	negs	r3, r3
 80051f2:	61a3      	str	r3, [r4, #24]
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	b953      	cbnz	r3, 800520e <__swsetup_r+0xc6>
 80051f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005200:	d1ba      	bne.n	8005178 <__swsetup_r+0x30>
 8005202:	bd70      	pop	{r4, r5, r6, pc}
 8005204:	0792      	lsls	r2, r2, #30
 8005206:	bf58      	it	pl
 8005208:	6963      	ldrpl	r3, [r4, #20]
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	e7f2      	b.n	80051f4 <__swsetup_r+0xac>
 800520e:	2000      	movs	r0, #0
 8005210:	e7f7      	b.n	8005202 <__swsetup_r+0xba>
 8005212:	bf00      	nop
 8005214:	20000020 	.word	0x20000020
 8005218:	08005630 	.word	0x08005630
 800521c:	08005650 	.word	0x08005650
 8005220:	08005610 	.word	0x08005610

08005224 <_close_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	2300      	movs	r3, #0
 8005228:	4c05      	ldr	r4, [pc, #20]	; (8005240 <_close_r+0x1c>)
 800522a:	4605      	mov	r5, r0
 800522c:	4608      	mov	r0, r1
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	f7fe ffcb 	bl	80041ca <_close>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_close_r+0x1a>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	b103      	cbz	r3, 800523e <_close_r+0x1a>
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	2000026c 	.word	0x2000026c

08005244 <__sflush_r>:
 8005244:	898a      	ldrh	r2, [r1, #12]
 8005246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	0710      	lsls	r0, r2, #28
 800524e:	460c      	mov	r4, r1
 8005250:	d458      	bmi.n	8005304 <__sflush_r+0xc0>
 8005252:	684b      	ldr	r3, [r1, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dc05      	bgt.n	8005264 <__sflush_r+0x20>
 8005258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	dc02      	bgt.n	8005264 <__sflush_r+0x20>
 800525e:	2000      	movs	r0, #0
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005266:	2e00      	cmp	r6, #0
 8005268:	d0f9      	beq.n	800525e <__sflush_r+0x1a>
 800526a:	2300      	movs	r3, #0
 800526c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005270:	682f      	ldr	r7, [r5, #0]
 8005272:	6a21      	ldr	r1, [r4, #32]
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	d032      	beq.n	80052de <__sflush_r+0x9a>
 8005278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	075a      	lsls	r2, r3, #29
 800527e:	d505      	bpl.n	800528c <__sflush_r+0x48>
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	1ac0      	subs	r0, r0, r3
 8005284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005286:	b10b      	cbz	r3, 800528c <__sflush_r+0x48>
 8005288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800528a:	1ac0      	subs	r0, r0, r3
 800528c:	2300      	movs	r3, #0
 800528e:	4602      	mov	r2, r0
 8005290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005292:	6a21      	ldr	r1, [r4, #32]
 8005294:	4628      	mov	r0, r5
 8005296:	47b0      	blx	r6
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	d106      	bne.n	80052ac <__sflush_r+0x68>
 800529e:	6829      	ldr	r1, [r5, #0]
 80052a0:	291d      	cmp	r1, #29
 80052a2:	d848      	bhi.n	8005336 <__sflush_r+0xf2>
 80052a4:	4a29      	ldr	r2, [pc, #164]	; (800534c <__sflush_r+0x108>)
 80052a6:	40ca      	lsrs	r2, r1
 80052a8:	07d6      	lsls	r6, r2, #31
 80052aa:	d544      	bpl.n	8005336 <__sflush_r+0xf2>
 80052ac:	2200      	movs	r2, #0
 80052ae:	6062      	str	r2, [r4, #4]
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	04d9      	lsls	r1, r3, #19
 80052b4:	6022      	str	r2, [r4, #0]
 80052b6:	d504      	bpl.n	80052c2 <__sflush_r+0x7e>
 80052b8:	1c42      	adds	r2, r0, #1
 80052ba:	d101      	bne.n	80052c0 <__sflush_r+0x7c>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b903      	cbnz	r3, 80052c2 <__sflush_r+0x7e>
 80052c0:	6560      	str	r0, [r4, #84]	; 0x54
 80052c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052c4:	602f      	str	r7, [r5, #0]
 80052c6:	2900      	cmp	r1, #0
 80052c8:	d0c9      	beq.n	800525e <__sflush_r+0x1a>
 80052ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052ce:	4299      	cmp	r1, r3
 80052d0:	d002      	beq.n	80052d8 <__sflush_r+0x94>
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f8ec 	bl	80054b0 <_free_r>
 80052d8:	2000      	movs	r0, #0
 80052da:	6360      	str	r0, [r4, #52]	; 0x34
 80052dc:	e7c0      	b.n	8005260 <__sflush_r+0x1c>
 80052de:	2301      	movs	r3, #1
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b0      	blx	r6
 80052e4:	1c41      	adds	r1, r0, #1
 80052e6:	d1c8      	bne.n	800527a <__sflush_r+0x36>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0c5      	beq.n	800527a <__sflush_r+0x36>
 80052ee:	2b1d      	cmp	r3, #29
 80052f0:	d001      	beq.n	80052f6 <__sflush_r+0xb2>
 80052f2:	2b16      	cmp	r3, #22
 80052f4:	d101      	bne.n	80052fa <__sflush_r+0xb6>
 80052f6:	602f      	str	r7, [r5, #0]
 80052f8:	e7b1      	b.n	800525e <__sflush_r+0x1a>
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	e7ad      	b.n	8005260 <__sflush_r+0x1c>
 8005304:	690f      	ldr	r7, [r1, #16]
 8005306:	2f00      	cmp	r7, #0
 8005308:	d0a9      	beq.n	800525e <__sflush_r+0x1a>
 800530a:	0793      	lsls	r3, r2, #30
 800530c:	bf18      	it	ne
 800530e:	2300      	movne	r3, #0
 8005310:	680e      	ldr	r6, [r1, #0]
 8005312:	bf08      	it	eq
 8005314:	694b      	ldreq	r3, [r1, #20]
 8005316:	eba6 0807 	sub.w	r8, r6, r7
 800531a:	600f      	str	r7, [r1, #0]
 800531c:	608b      	str	r3, [r1, #8]
 800531e:	f1b8 0f00 	cmp.w	r8, #0
 8005322:	dd9c      	ble.n	800525e <__sflush_r+0x1a>
 8005324:	4643      	mov	r3, r8
 8005326:	463a      	mov	r2, r7
 8005328:	6a21      	ldr	r1, [r4, #32]
 800532a:	4628      	mov	r0, r5
 800532c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800532e:	47b0      	blx	r6
 8005330:	2800      	cmp	r0, #0
 8005332:	dc06      	bgt.n	8005342 <__sflush_r+0xfe>
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005340:	e78e      	b.n	8005260 <__sflush_r+0x1c>
 8005342:	4407      	add	r7, r0
 8005344:	eba8 0800 	sub.w	r8, r8, r0
 8005348:	e7e9      	b.n	800531e <__sflush_r+0xda>
 800534a:	bf00      	nop
 800534c:	20400001 	.word	0x20400001

08005350 <_fflush_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	4605      	mov	r5, r0
 8005356:	460c      	mov	r4, r1
 8005358:	b1db      	cbz	r3, 8005392 <_fflush_r+0x42>
 800535a:	b118      	cbz	r0, 8005364 <_fflush_r+0x14>
 800535c:	6983      	ldr	r3, [r0, #24]
 800535e:	b90b      	cbnz	r3, 8005364 <_fflush_r+0x14>
 8005360:	f7ff fa90 	bl	8004884 <__sinit>
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <_fflush_r+0x48>)
 8005366:	429c      	cmp	r4, r3
 8005368:	d109      	bne.n	800537e <_fflush_r+0x2e>
 800536a:	686c      	ldr	r4, [r5, #4]
 800536c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005370:	b17b      	cbz	r3, 8005392 <_fflush_r+0x42>
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800537a:	f7ff bf63 	b.w	8005244 <__sflush_r>
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <_fflush_r+0x4c>)
 8005380:	429c      	cmp	r4, r3
 8005382:	d101      	bne.n	8005388 <_fflush_r+0x38>
 8005384:	68ac      	ldr	r4, [r5, #8]
 8005386:	e7f1      	b.n	800536c <_fflush_r+0x1c>
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <_fflush_r+0x50>)
 800538a:	429c      	cmp	r4, r3
 800538c:	bf08      	it	eq
 800538e:	68ec      	ldreq	r4, [r5, #12]
 8005390:	e7ec      	b.n	800536c <_fflush_r+0x1c>
 8005392:	2000      	movs	r0, #0
 8005394:	bd38      	pop	{r3, r4, r5, pc}
 8005396:	bf00      	nop
 8005398:	08005630 	.word	0x08005630
 800539c:	08005650 	.word	0x08005650
 80053a0:	08005610 	.word	0x08005610

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4605      	mov	r5, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	2200      	movs	r2, #0
 80053ae:	4c05      	ldr	r4, [pc, #20]	; (80053c4 <_lseek_r+0x20>)
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fe ff2d 	bl	8004212 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000026c 	.word	0x2000026c

080053c8 <__swhatbuf_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	460e      	mov	r6, r1
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	b096      	sub	sp, #88	; 0x58
 80053d2:	2900      	cmp	r1, #0
 80053d4:	4614      	mov	r4, r2
 80053d6:	461d      	mov	r5, r3
 80053d8:	da07      	bge.n	80053ea <__swhatbuf_r+0x22>
 80053da:	2300      	movs	r3, #0
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	89b3      	ldrh	r3, [r6, #12]
 80053e0:	061a      	lsls	r2, r3, #24
 80053e2:	d410      	bmi.n	8005406 <__swhatbuf_r+0x3e>
 80053e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e8:	e00e      	b.n	8005408 <__swhatbuf_r+0x40>
 80053ea:	466a      	mov	r2, sp
 80053ec:	f000 f8be 	bl	800556c <_fstat_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dbf2      	blt.n	80053da <__swhatbuf_r+0x12>
 80053f4:	9a01      	ldr	r2, [sp, #4]
 80053f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053fe:	425a      	negs	r2, r3
 8005400:	415a      	adcs	r2, r3
 8005402:	602a      	str	r2, [r5, #0]
 8005404:	e7ee      	b.n	80053e4 <__swhatbuf_r+0x1c>
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	2000      	movs	r0, #0
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	b016      	add	sp, #88	; 0x58
 800540e:	bd70      	pop	{r4, r5, r6, pc}

08005410 <__smakebuf_r>:
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005414:	079d      	lsls	r5, r3, #30
 8005416:	4606      	mov	r6, r0
 8005418:	460c      	mov	r4, r1
 800541a:	d507      	bpl.n	800542c <__smakebuf_r+0x1c>
 800541c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	2301      	movs	r3, #1
 8005426:	6163      	str	r3, [r4, #20]
 8005428:	b002      	add	sp, #8
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	ab01      	add	r3, sp, #4
 800542e:	466a      	mov	r2, sp
 8005430:	f7ff ffca 	bl	80053c8 <__swhatbuf_r>
 8005434:	9900      	ldr	r1, [sp, #0]
 8005436:	4605      	mov	r5, r0
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff faad 	bl	8004998 <_malloc_r>
 800543e:	b948      	cbnz	r0, 8005454 <__smakebuf_r+0x44>
 8005440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005444:	059a      	lsls	r2, r3, #22
 8005446:	d4ef      	bmi.n	8005428 <__smakebuf_r+0x18>
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	e7e3      	b.n	800541c <__smakebuf_r+0xc>
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <__smakebuf_r+0x7c>)
 8005456:	62b3      	str	r3, [r6, #40]	; 0x28
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	6020      	str	r0, [r4, #0]
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	9b00      	ldr	r3, [sp, #0]
 8005464:	6120      	str	r0, [r4, #16]
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	b15b      	cbz	r3, 8005484 <__smakebuf_r+0x74>
 800546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f88d 	bl	8005590 <_isatty_r>
 8005476:	b128      	cbz	r0, 8005484 <__smakebuf_r+0x74>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	431d      	orrs	r5, r3
 8005488:	81a5      	strh	r5, [r4, #12]
 800548a:	e7cd      	b.n	8005428 <__smakebuf_r+0x18>
 800548c:	0800484d 	.word	0x0800484d

08005490 <memchr>:
 8005490:	b510      	push	{r4, lr}
 8005492:	b2c9      	uxtb	r1, r1
 8005494:	4402      	add	r2, r0
 8005496:	4290      	cmp	r0, r2
 8005498:	4603      	mov	r3, r0
 800549a:	d101      	bne.n	80054a0 <memchr+0x10>
 800549c:	2300      	movs	r3, #0
 800549e:	e003      	b.n	80054a8 <memchr+0x18>
 80054a0:	781c      	ldrb	r4, [r3, #0]
 80054a2:	3001      	adds	r0, #1
 80054a4:	428c      	cmp	r4, r1
 80054a6:	d1f6      	bne.n	8005496 <memchr+0x6>
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd10      	pop	{r4, pc}

080054ac <__malloc_lock>:
 80054ac:	4770      	bx	lr

080054ae <__malloc_unlock>:
 80054ae:	4770      	bx	lr

080054b0 <_free_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4605      	mov	r5, r0
 80054b4:	2900      	cmp	r1, #0
 80054b6:	d043      	beq.n	8005540 <_free_r+0x90>
 80054b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054bc:	1f0c      	subs	r4, r1, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfb8      	it	lt
 80054c2:	18e4      	addlt	r4, r4, r3
 80054c4:	f7ff fff2 	bl	80054ac <__malloc_lock>
 80054c8:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <_free_r+0x94>)
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	4610      	mov	r0, r2
 80054ce:	b933      	cbnz	r3, 80054de <_free_r+0x2e>
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	6014      	str	r4, [r2, #0]
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054da:	f7ff bfe8 	b.w	80054ae <__malloc_unlock>
 80054de:	42a3      	cmp	r3, r4
 80054e0:	d90b      	bls.n	80054fa <_free_r+0x4a>
 80054e2:	6821      	ldr	r1, [r4, #0]
 80054e4:	1862      	adds	r2, r4, r1
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bf01      	itttt	eq
 80054ea:	681a      	ldreq	r2, [r3, #0]
 80054ec:	685b      	ldreq	r3, [r3, #4]
 80054ee:	1852      	addeq	r2, r2, r1
 80054f0:	6022      	streq	r2, [r4, #0]
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6004      	str	r4, [r0, #0]
 80054f6:	e7ed      	b.n	80054d4 <_free_r+0x24>
 80054f8:	4613      	mov	r3, r2
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	b10a      	cbz	r2, 8005502 <_free_r+0x52>
 80054fe:	42a2      	cmp	r2, r4
 8005500:	d9fa      	bls.n	80054f8 <_free_r+0x48>
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	1858      	adds	r0, r3, r1
 8005506:	42a0      	cmp	r0, r4
 8005508:	d10b      	bne.n	8005522 <_free_r+0x72>
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	4401      	add	r1, r0
 800550e:	1858      	adds	r0, r3, r1
 8005510:	4282      	cmp	r2, r0
 8005512:	6019      	str	r1, [r3, #0]
 8005514:	d1de      	bne.n	80054d4 <_free_r+0x24>
 8005516:	6810      	ldr	r0, [r2, #0]
 8005518:	6852      	ldr	r2, [r2, #4]
 800551a:	4401      	add	r1, r0
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	e7d8      	b.n	80054d4 <_free_r+0x24>
 8005522:	d902      	bls.n	800552a <_free_r+0x7a>
 8005524:	230c      	movs	r3, #12
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	e7d4      	b.n	80054d4 <_free_r+0x24>
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	1821      	adds	r1, r4, r0
 800552e:	428a      	cmp	r2, r1
 8005530:	bf01      	itttt	eq
 8005532:	6811      	ldreq	r1, [r2, #0]
 8005534:	6852      	ldreq	r2, [r2, #4]
 8005536:	1809      	addeq	r1, r1, r0
 8005538:	6021      	streq	r1, [r4, #0]
 800553a:	6062      	str	r2, [r4, #4]
 800553c:	605c      	str	r4, [r3, #4]
 800553e:	e7c9      	b.n	80054d4 <_free_r+0x24>
 8005540:	bd38      	pop	{r3, r4, r5, pc}
 8005542:	bf00      	nop
 8005544:	200000b0 	.word	0x200000b0

08005548 <_read_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	2200      	movs	r2, #0
 8005552:	4c05      	ldr	r4, [pc, #20]	; (8005568 <_read_r+0x20>)
 8005554:	6022      	str	r2, [r4, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fe fdfe 	bl	8004158 <_read>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_read_r+0x1e>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	b103      	cbz	r3, 8005566 <_read_r+0x1e>
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	2000026c 	.word	0x2000026c

0800556c <_fstat_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	2300      	movs	r3, #0
 8005570:	4c06      	ldr	r4, [pc, #24]	; (800558c <_fstat_r+0x20>)
 8005572:	4605      	mov	r5, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	f7fe fe31 	bl	80041e0 <_fstat>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d102      	bne.n	8005588 <_fstat_r+0x1c>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	b103      	cbz	r3, 8005588 <_fstat_r+0x1c>
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	bd38      	pop	{r3, r4, r5, pc}
 800558a:	bf00      	nop
 800558c:	2000026c 	.word	0x2000026c

08005590 <_isatty_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	2300      	movs	r3, #0
 8005594:	4c05      	ldr	r4, [pc, #20]	; (80055ac <_isatty_r+0x1c>)
 8005596:	4605      	mov	r5, r0
 8005598:	4608      	mov	r0, r1
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	f7fe fe2f 	bl	80041fe <_isatty>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_isatty_r+0x1a>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_isatty_r+0x1a>
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	2000026c 	.word	0x2000026c

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
