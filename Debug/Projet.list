
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004824  08004824  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004824  08004824  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004824  08004824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800482c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  0800489c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800489c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002661  00000000  00000000  0002f63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00031ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00032ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001912c  00000000  00000000  000337a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c337  00000000  00000000  0004c8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096dba  00000000  00000000  00058c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef9c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000efa40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004730 	.word	0x08004730

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004730 	.word	0x08004730

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fcac 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f003 f907 	bl	80033b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fcac 	bl	8000b32 <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 fc84 	bl	8000afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200000a4 	.word	0x200000a4
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	200000a4 	.word	0x200000a4

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff0 	bl	8000244 <HAL_GetTick>
 8000264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000270:	d004      	beq.n	800027c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <HAL_Delay+0x40>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	4413      	add	r3, r2
 800027a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800027c:	bf00      	nop
 800027e:	f7ff ffe1 	bl	8000244 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	429a      	cmp	r2, r3
 800028c:	d8f7      	bhi.n	800027e <HAL_Delay+0x26>
  {
  }
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004

0800029c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08e      	sub	sp, #56	; 0x38
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002a4:	2300      	movs	r3, #0
 80002a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e127      	b.n	800050c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d115      	bne.n	80002f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2200      	movs	r2, #0
 80002ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d8:	4b8e      	ldr	r3, [pc, #568]	; (8000514 <HAL_ADC_Init+0x278>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a8d      	ldr	r2, [pc, #564]	; (8000514 <HAL_ADC_Init+0x278>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6213      	str	r3, [r2, #32]
 80002e4:	4b8b      	ldr	r3, [pc, #556]	; (8000514 <HAL_ADC_Init+0x278>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f002 fb8b 	bl	8002a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 80ff 	bne.w	8000502 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800030c:	f023 0302 	bic.w	r3, r3, #2
 8000310:	f043 0202 	orr.w	r2, r3, #2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000318:	4b7f      	ldr	r3, [pc, #508]	; (8000518 <HAL_ADC_Init+0x27c>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	497c      	ldr	r1, [pc, #496]	; (8000518 <HAL_ADC_Init+0x27c>)
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000332:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800033a:	4619      	mov	r1, r3
 800033c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000340:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000342:	6a3b      	ldr	r3, [r7, #32]
 8000344:	fa93 f3a3 	rbit	r3, r3
 8000348:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	fab3 f383 	clz	r3, r3
 8000350:	b2db      	uxtb	r3, r3
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000356:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800035c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000364:	4619      	mov	r1, r3
 8000366:	2302      	movs	r3, #2
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036c:	fa93 f3a3 	rbit	r3, r3
 8000370:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000374:	fab3 f383 	clz	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800037e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000382:	4313      	orrs	r3, r2
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800038a:	2b10      	cmp	r3, #16
 800038c:	d007      	beq.n	800039e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000396:	4313      	orrs	r3, r2
 8000398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800039a:	4313      	orrs	r3, r2
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a8:	2b40      	cmp	r3, #64	; 0x40
 80003aa:	d04f      	beq.n	800044c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003b2:	4313      	orrs	r3, r2
 80003b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6912      	ldr	r2, [r2, #16]
 80003c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80003c8:	d003      	beq.n	80003d2 <HAL_ADC_Init+0x136>
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6912      	ldr	r2, [r2, #16]
 80003ce:	2a01      	cmp	r2, #1
 80003d0:	d102      	bne.n	80003d8 <HAL_ADC_Init+0x13c>
 80003d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d6:	e000      	b.n	80003da <HAL_ADC_Init+0x13e>
 80003d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80003da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80003dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003de:	4313      	orrs	r3, r2
 80003e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d125      	bne.n	8000438 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	3b01      	subs	r3, #1
 80003fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000402:	69ba      	ldr	r2, [r7, #24]
 8000404:	fa92 f2a2 	rbit	r2, r2
 8000408:	617a      	str	r2, [r7, #20]
  return result;
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	4093      	lsls	r3, r2
 8000414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041a:	4313      	orrs	r3, r2
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
 800041e:	e00b      	b.n	8000438 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000424:	f043 0220 	orr.w	r2, r3, #32
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <HAL_ADC_Init+0x280>)
 8000440:	4013      	ands	r3, r2
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000448:	430b      	orrs	r3, r1
 800044a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <HAL_ADC_Init+0x284>)
 8000454:	4013      	ands	r3, r2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000468:	d003      	beq.n	8000472 <HAL_ADC_Init+0x1d6>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d119      	bne.n	80004a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	3b01      	subs	r3, #1
 8000482:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	fa92 f2a2 	rbit	r2, r2
 800048e:	60fa      	str	r2, [r7, #12]
  return result;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	b2d2      	uxtb	r2, r2
 8000498:	fa03 f202 	lsl.w	r2, r3, r2
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
 80004a4:	e007      	b.n	80004b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80004b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_ADC_Init+0x288>)
 80004be:	4013      	ands	r3, r2
 80004c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d10b      	bne.n	80004de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f023 0303 	bic.w	r3, r3, #3
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	64da      	str	r2, [r3, #76]	; 0x4c
 80004dc:	e014      	b.n	8000508 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f023 0312 	bic.w	r3, r3, #18
 80004e6:	f043 0210 	orr.w	r2, r3, #16
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004f2:	f043 0201 	orr.w	r2, r3, #1
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
 80004fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000500:	e002      	b.n	8000508 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000502:	2301      	movs	r3, #1
 8000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800050c:	4618      	mov	r0, r3
 800050e:	3738      	adds	r7, #56	; 0x38
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40023800 	.word	0x40023800
 8000518:	40012700 	.word	0x40012700
 800051c:	fcfc16ff 	.word	0xfcfc16ff
 8000520:	c0fff189 	.word	0xc0fff189
 8000524:	bf80fffe 	.word	0xbf80fffe

08000528 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800053a:	2b01      	cmp	r3, #1
 800053c:	d101      	bne.n	8000542 <HAL_ADC_Start+0x1a>
 800053e:	2302      	movs	r3, #2
 8000540:	e04e      	b.n	80005e0 <HAL_ADC_Start+0xb8>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f9c4 	bl	80008d8 <ADC_Enable>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d141      	bne.n	80005de <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000584:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000598:	d106      	bne.n	80005a8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800059e:	f023 0206 	bic.w	r2, r3, #6
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	651a      	str	r2, [r3, #80]	; 0x50
 80005a6:	e002      	b.n	80005ae <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80005be:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80005dc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000618:	2b01      	cmp	r3, #1
 800061a:	d101      	bne.n	8000620 <HAL_ADC_ConfigChannel+0x20>
 800061c:	2302      	movs	r3, #2
 800061e:	e14f      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x2c0>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2201      	movs	r2, #1
 8000624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b06      	cmp	r3, #6
 800062e:	d81c      	bhi.n	800066a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	3b05      	subs	r3, #5
 8000642:	221f      	movs	r2, #31
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	4019      	ands	r1, r3
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	4613      	mov	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	3b05      	subs	r3, #5
 800065c:	fa00 f203 	lsl.w	r2, r0, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	430a      	orrs	r2, r1
 8000666:	641a      	str	r2, [r3, #64]	; 0x40
 8000668:	e07e      	b.n	8000768 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	2b0c      	cmp	r3, #12
 8000670:	d81c      	bhi.n	80006ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	3b23      	subs	r3, #35	; 0x23
 8000684:	221f      	movs	r2, #31
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4019      	ands	r1, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	3b23      	subs	r3, #35	; 0x23
 800069e:	fa00 f203 	lsl.w	r2, r0, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	e05d      	b.n	8000768 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2b12      	cmp	r3, #18
 80006b2:	d81c      	bhi.n	80006ee <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	4613      	mov	r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	3b41      	subs	r3, #65	; 0x41
 80006c6:	221f      	movs	r2, #31
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4019      	ands	r1, r3
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	3b41      	subs	r3, #65	; 0x41
 80006e0:	fa00 f203 	lsl.w	r2, r0, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
 80006ec:	e03c      	b.n	8000768 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	2b18      	cmp	r3, #24
 80006f4:	d81c      	bhi.n	8000730 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	3b5f      	subs	r3, #95	; 0x5f
 8000708:	221f      	movs	r2, #31
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	4019      	ands	r1, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	3b5f      	subs	r3, #95	; 0x5f
 8000722:	fa00 f203 	lsl.w	r2, r0, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
 800072e:	e01b      	b.n	8000768 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3b7d      	subs	r3, #125	; 0x7d
 8000742:	221f      	movs	r2, #31
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4019      	ands	r1, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3b7d      	subs	r3, #125	; 0x7d
 800075c:	fa00 f203 	lsl.w	r2, r0, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	430a      	orrs	r2, r1
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b09      	cmp	r3, #9
 800076e:	d81a      	bhi.n	80007a6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6959      	ldr	r1, [r3, #20]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4613      	mov	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	2207      	movs	r2, #7
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	4019      	ands	r1, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	6898      	ldr	r0, [r3, #8]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	fa00 f203 	lsl.w	r2, r0, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	e05d      	b.n	8000862 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b13      	cmp	r3, #19
 80007ac:	d81c      	bhi.n	80007e8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6919      	ldr	r1, [r3, #16]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	3b1e      	subs	r3, #30
 80007c0:	2207      	movs	r2, #7
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4019      	ands	r1, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	6898      	ldr	r0, [r3, #8]
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	3b1e      	subs	r3, #30
 80007da:	fa00 f203 	lsl.w	r2, r0, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	e03c      	b.n	8000862 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b1d      	cmp	r3, #29
 80007ee:	d81c      	bhi.n	800082a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68d9      	ldr	r1, [r3, #12]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	3b3c      	subs	r3, #60	; 0x3c
 8000802:	2207      	movs	r2, #7
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	4019      	ands	r1, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	3b3c      	subs	r3, #60	; 0x3c
 800081c:	fa00 f203 	lsl.w	r2, r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	430a      	orrs	r2, r1
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	e01b      	b.n	8000862 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	3b5a      	subs	r3, #90	; 0x5a
 800083c:	2207      	movs	r2, #7
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	4019      	ands	r1, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	6898      	ldr	r0, [r3, #8]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	3b5a      	subs	r3, #90	; 0x5a
 8000856:	fa00 f203 	lsl.w	r2, r0, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d003      	beq.n	8000872 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800086e:	2b11      	cmp	r3, #17
 8000870:	d121      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_ADC_ConfigChannel+0x2cc>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11b      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_ADC_ConfigChannel+0x2cc>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <HAL_ADC_ConfigChannel+0x2cc>)
 8000884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000888:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b10      	cmp	r3, #16
 8000890:	d111      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_ADC_ConfigChannel+0x2d0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_ADC_ConfigChannel+0x2d4>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	0c9a      	lsrs	r2, r3, #18
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80008a8:	e002      	b.n	80008b0 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f9      	bne.n	80008aa <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40012700 	.word	0x40012700
 80008d0:	20000008 	.word	0x20000008
 80008d4:	431bde83 	.word	0x431bde83

080008d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	2b40      	cmp	r3, #64	; 0x40
 80008f4:	d03c      	beq.n	8000970 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 0201 	orr.w	r2, r2, #1
 8000904:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <ADC_Enable+0xa4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <ADC_Enable+0xa8>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9a      	lsrs	r2, r3, #18
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800091a:	e002      	b.n	8000922 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3b01      	subs	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f9      	bne.n	800091c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8000928:	f7ff fc8c 	bl	8000244 <HAL_GetTick>
 800092c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800092e:	e018      	b.n	8000962 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000930:	f7ff fc88 	bl	8000244 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d911      	bls.n	8000962 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f043 0210 	orr.w	r2, r3, #16
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800094e:	f043 0201 	orr.w	r2, r3, #1
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e007      	b.n	8000972 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096c:	2b40      	cmp	r3, #64	; 0x40
 800096e:	d1df      	bne.n	8000930 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	431bde83 	.word	0x431bde83

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff49 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff5e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb0 	bl	8000aa0 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b62:	e160      	b.n	8000e26 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8152 	beq.w	8000e20 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b12      	cmp	r3, #18
 8000b8a:	d123      	bne.n	8000bd4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	6939      	ldr	r1, [r7, #16]
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0203 	and.w	r2, r3, #3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d00b      	beq.n	8000c28 <HAL_GPIO_Init+0xdc>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	2b11      	cmp	r3, #17
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b12      	cmp	r3, #18
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80ac 	beq.w	8000e20 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	4a5c      	ldr	r2, [pc, #368]	; (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6213      	str	r3, [r2, #32]
 8000cd4:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <HAL_GPIO_Init+0x2f4>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000ce0:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a50      	ldr	r2, [pc, #320]	; (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d025      	beq.n	8000d58 <HAL_GPIO_Init+0x20c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01f      	beq.n	8000d54 <HAL_GPIO_Init+0x208>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a4e      	ldr	r2, [pc, #312]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d019      	beq.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <HAL_GPIO_Init+0x308>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x200>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_GPIO_Init+0x30c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1fc>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4b      	ldr	r2, [pc, #300]	; (8000e5c <HAL_GPIO_Init+0x310>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <HAL_GPIO_Init+0x314>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1f4>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e00c      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d40:	2307      	movs	r3, #7
 8000d42:	e00a      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d44:	2305      	movs	r3, #5
 8000d46:	e008      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d6a:	4936      	ldr	r1, [pc, #216]	; (8000e44 <HAL_GPIO_Init+0x2f8>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d78:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d9c:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3301      	adds	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f47f ae97 	bne.w	8000b64 <HAL_GPIO_Init+0x18>
  } 
}
 8000e36:	bf00      	nop
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40010000 	.word	0x40010000
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40021800 	.word	0x40021800
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000eb2:	e003      	b.n	8000ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e31d      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eda:	4b94      	ldr	r3, [pc, #592]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee4:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d07b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d006      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d10f      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b87      	ldr	r3, [pc, #540]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x128>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d166      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e2f7      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d106      	bne.n	8000f3c <HAL_RCC_OscConfig+0x74>
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a7e      	ldr	r2, [pc, #504]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e02d      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x96>
 8000f44:	4b79      	ldr	r3, [pc, #484]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a78      	ldr	r2, [pc, #480]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a75      	ldr	r2, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e01c      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0xb8>
 8000f66:	4b71      	ldr	r3, [pc, #452]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a70      	ldr	r2, [pc, #448]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b6e      	ldr	r3, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6d      	ldr	r2, [pc, #436]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xd0>
 8000f80:	4b6a      	ldr	r3, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff f950 	bl	8000244 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff f94c 	bl	8000244 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e2ad      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe0>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff f93c 	bl	8000244 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff f938 	bl	8000244 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e299      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fe2:	4b52      	ldr	r3, [pc, #328]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x108>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d05a      	beq.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d119      	bne.n	800103e <HAL_RCC_OscConfig+0x176>
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d116      	bne.n	800103e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001010:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x160>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d001      	beq.n	8001028 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e276      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <HAL_RCC_OscConfig+0x264>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	493d      	ldr	r1, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103c:	e03a      	b.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d020      	beq.n	8001088 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <HAL_RCC_OscConfig+0x268>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff f8fa 	bl	8000244 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff f8f6 	bl	8000244 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e257      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	492a      	ldr	r1, [pc, #168]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001082:	4313      	orrs	r3, r2
 8001084:	604b      	str	r3, [r1, #4]
 8001086:	e015      	b.n	80010b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_RCC_OscConfig+0x268>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff f8d9 	bl	8000244 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff f8d5 	bl	8000244 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e236      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f0      	bne.n	8001096 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80b8 	beq.w	8001232 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d170      	bne.n	80011aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x218>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e21a      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_RCC_OscConfig+0x264>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d921      	bls.n	8001134 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fbd5 	bl	80018a4 <RCC_SetFlashLatencyFromMSIRange>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e208      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4906      	ldr	r1, [pc, #24]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	061b      	lsls	r3, r3, #24
 8001124:	4901      	ldr	r1, [pc, #4]	; (800112c <HAL_RCC_OscConfig+0x264>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
 800112a:	e020      	b.n	800116e <HAL_RCC_OscConfig+0x2a6>
 800112c:	40023800 	.word	0x40023800
 8001130:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001134:	4ba4      	ldr	r3, [pc, #656]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	49a1      	ldr	r1, [pc, #644]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	061b      	lsls	r3, r3, #24
 8001154:	499c      	ldr	r1, [pc, #624]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fba0 	bl	80018a4 <RCC_SetFlashLatencyFromMSIRange>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e1d3      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	0b5b      	lsrs	r3, r3, #13
 8001174:	3301      	adds	r3, #1
 8001176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800117e:	4a92      	ldr	r2, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	0912      	lsrs	r2, r2, #4
 8001184:	f002 020f 	and.w	r2, r2, #15
 8001188:	4990      	ldr	r1, [pc, #576]	; (80013cc <HAL_RCC_OscConfig+0x504>)
 800118a:	5c8a      	ldrb	r2, [r1, r2]
 800118c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <HAL_RCC_OscConfig+0x508>)
 8001190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001192:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x50c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f808 	bl	80001ac <HAL_InitTick>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d045      	beq.n	8001232 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	e1b5      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d029      	beq.n	8001206 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <HAL_RCC_OscConfig+0x510>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff f844 	bl	8000244 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff f840 	bl	8000244 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1a1      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011de:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4977      	ldr	r1, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4972      	ldr	r1, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e015      	b.n	8001232 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001206:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <HAL_RCC_OscConfig+0x510>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff f81a 	bl	8000244 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001214:	f7ff f816 	bl	8000244 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e177      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d030      	beq.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d016      	beq.n	8001274 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001246:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_RCC_OscConfig+0x514>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7fe fffa 	bl	8000244 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7fe fff6 	bl	8000244 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e157      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x38c>
 8001272:	e015      	b.n	80012a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_OscConfig+0x514>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7fe ffe3 	bl	8000244 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001282:	f7fe ffdf 	bl	8000244 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e140      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80b5 	beq.w	8001418 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10d      	bne.n	80012da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	4a41      	ldr	r2, [pc, #260]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d6:	2301      	movs	r3, #1
 80012d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f2:	f7fe ffa7 	bl	8000244 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fa:	f7fe ffa3 	bl	8000244 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e104      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x518>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x466>
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6353      	str	r3, [r2, #52]	; 0x34
 800132c:	e02d      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x488>
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800133c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001340:	6353      	str	r3, [r2, #52]	; 0x34
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800134c:	6353      	str	r3, [r2, #52]	; 0x34
 800134e:	e01c      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b05      	cmp	r3, #5
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x4aa>
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6353      	str	r3, [r2, #52]	; 0x34
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6353      	str	r3, [r2, #52]	; 0x34
 8001370:	e00b      	b.n	800138a <HAL_RCC_OscConfig+0x4c2>
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137c:	6353      	str	r3, [r2, #52]	; 0x34
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 8001384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001388:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7fe ff57 	bl	8000244 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7fe ff53 	bl	8000244 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0b2      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_RCC_OscConfig+0x500>)
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ee      	beq.n	800139a <HAL_RCC_OscConfig+0x4d2>
 80013bc:	e023      	b.n	8001406 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7fe ff41 	bl	8000244 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013c4:	e019      	b.n	80013fa <HAL_RCC_OscConfig+0x532>
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	08004774 	.word	0x08004774
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000000 	.word	0x20000000
 80013d8:	42470020 	.word	0x42470020
 80013dc:	42470680 	.word	0x42470680
 80013e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7fe ff2e 	bl	8000244 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e08d      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ee      	bne.n	80013e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	4a43      	ldr	r2, [pc, #268]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001416:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	d079      	beq.n	8001514 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d056      	beq.n	80014d4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2b02      	cmp	r3, #2
 800142c:	d13b      	bne.n	80014a6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7fe ff06 	bl	8000244 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7fe ff02 	bl	8000244 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e063      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	4319      	orrs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	430b      	orrs	r3, r1
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7fe fee1 	bl	8000244 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7fe fedd 	bl	8000244 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e03e      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x5be>
 80014a4:	e036      	b.n	8001514 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x65c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7fe feca 	bl	8000244 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7fe fec6 	bl	8000244 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e027      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x5ec>
 80014d2:	e01f      	b.n	8001514 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e01a      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_RCC_OscConfig+0x658>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d10d      	bne.n	8001510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	42470060 	.word	0x42470060

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e11a      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b8f      	ldr	r3, [pc, #572]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d919      	bls.n	800157e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_ClockConfig+0x34>
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a89      	ldr	r2, [pc, #548]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b87      	ldr	r3, [pc, #540]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 0201 	bic.w	r2, r3, #1
 8001564:	4985      	ldr	r1, [pc, #532]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156c:	4b83      	ldr	r3, [pc, #524]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0f9      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800158a:	4b7d      	ldr	r3, [pc, #500]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	497a      	ldr	r1, [pc, #488]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 808e 	beq.w	80016c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0d7      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0cb      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e2:	4b67      	ldr	r3, [pc, #412]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0bf      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0b7      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	495c      	ldr	r1, [pc, #368]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7fe fe16 	bl	8000244 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d112      	bne.n	8001648 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7fe fe0e 	bl	8000244 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e09b      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_ClockConfig+0xfc>
 8001646:	e03e      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d112      	bne.n	8001676 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7fe fdf7 	bl	8000244 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e084      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_ClockConfig+0x12a>
 8001674:	e027      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d11d      	bne.n	80016ba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7fe fde0 	bl	8000244 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e06d      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001696:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d1ee      	bne.n	8001680 <HAL_RCC_ClockConfig+0x158>
 80016a2:	e010      	b.n	80016c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7fe fdce 	bl	8000244 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e05b      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d219      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x1be>
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0201 	bic.w	r2, r3, #1
 80016ee:	4923      	ldr	r1, [pc, #140]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_ClockConfig+0x254>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e034      	b.n	8001772 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4917      	ldr	r1, [pc, #92]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490f      	ldr	r1, [pc, #60]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f823 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 800174a:	4601      	mov	r1, r0
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_ClockConfig+0x258>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x25c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	fa21 f303 	lsr.w	r3, r1, r3
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x260>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_ClockConfig+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fd20 	bl	80001ac <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001770:	7afb      	ldrb	r3, [r7, #11]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00
 8001780:	40023800 	.word	0x40023800
 8001784:	08004774 	.word	0x08004774
 8001788:	20000008 	.word	0x20000008
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d006      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x24>
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d007      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x2a>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d12c      	bne.n	8001808 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	e037      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017b6:	613b      	str	r3, [r7, #16]
      break;
 80017b8:	e034      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	0c9b      	lsrs	r3, r3, #18
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_RCC_GetSysClockFreq+0xac>)
 80017c4:	5cd3      	ldrb	r3, [r2, r3]
 80017c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	0d9b      	lsrs	r3, r3, #22
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	3301      	adds	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017e4:	fb02 f203 	mul.w	r2, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e007      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	4a0f      	ldr	r2, [pc, #60]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f6:	fb02 f203 	mul.w	r2, r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
      break;
 8001806:	e00d      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0b5b      	lsrs	r3, r3, #13
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	613b      	str	r3, [r7, #16]
      break;
 8001822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001824:	693b      	ldr	r3, [r7, #16]
}
 8001826:	4618      	mov	r0, r3
 8001828:	371c      	adds	r7, #28
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40023800 	.word	0x40023800
 8001834:	00f42400 	.word	0x00f42400
 8001838:	016e3600 	.word	0x016e3600
 800183c:	08004768 	.word	0x08004768

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_RCC_GetHCLKFreq+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001858:	f7ff fff2 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	08004784 	.word	0x08004784

0800187c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001880:	f7ff ffde 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001884:	4601      	mov	r1, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0adb      	lsrs	r3, r3, #11
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4a03      	ldr	r2, [pc, #12]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	08004784 	.word	0x08004784

080018a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12c      	bne.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e016      	b.n	8001902 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018de:	6253      	str	r3, [r2, #36]	; 0x24
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80018f4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001900:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001908:	d105      	bne.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001910:	d101      	bne.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001912:	2301      	movs	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 0201 	bic.w	r2, r3, #1
 8001930:	490b      	ldr	r1, [pc, #44]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e056      	b.n	8001a24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d106      	bne.n	8001996 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f001 fcc9 	bl	8003328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	ea42 0103 	orr.w	r1, r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	f003 0104 	and.w	r1, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_SPI_Transmit+0x22>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e11e      	b.n	8001c8c <HAL_SPI_Transmit+0x260>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a56:	f7fe fbf5 	bl	8000244 <HAL_GetTick>
 8001a5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d002      	beq.n	8001a72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a70:	e103      	b.n	8001c7a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_SPI_Transmit+0x52>
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a82:	e0fa      	b.n	8001c7a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2203      	movs	r2, #3
 8001a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aca:	d107      	bne.n	8001adc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ada:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d007      	beq.n	8001afa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b02:	d14b      	bne.n	8001b9c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_SPI_Transmit+0xe6>
 8001b0c:	8afb      	ldrh	r3, [r7, #22]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d13e      	bne.n	8001b90 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	1c9a      	adds	r2, r3, #2
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b36:	e02b      	b.n	8001b90 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d112      	bne.n	8001b6c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	1c9a      	adds	r2, r3, #2
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b6a:	e011      	b.n	8001b90 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b6c:	f7fe fb6a 	bl	8000244 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d803      	bhi.n	8001b84 <HAL_SPI_Transmit+0x158>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b82:	d102      	bne.n	8001b8a <HAL_SPI_Transmit+0x15e>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b8e:	e074      	b.n	8001c7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ce      	bne.n	8001b38 <HAL_SPI_Transmit+0x10c>
 8001b9a:	e04c      	b.n	8001c36 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_SPI_Transmit+0x17e>
 8001ba4:	8afb      	ldrh	r3, [r7, #22]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d140      	bne.n	8001c2c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bd0:	e02c      	b.n	8001c2c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d113      	bne.n	8001c08 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	330c      	adds	r3, #12
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c06:	e011      	b.n	8001c2c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c08:	f7fe fb1c 	bl	8000244 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d803      	bhi.n	8001c20 <HAL_SPI_Transmit+0x1f4>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1e:	d102      	bne.n	8001c26 <HAL_SPI_Transmit+0x1fa>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c2a:	e026      	b.n	8001c7a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1cd      	bne.n	8001bd2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f894 	bl	8001d68 <SPI_EndRxTxTransaction>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	77fb      	strb	r3, [r7, #31]
 8001c76:	e000      	b.n	8001c7a <HAL_SPI_Transmit+0x24e>
  }

error:
 8001c78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ca4:	e04c      	b.n	8001d40 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cac:	d048      	beq.n	8001d40 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001cae:	f7fe fac9 	bl	8000244 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d902      	bls.n	8001cc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d13d      	bne.n	8001d40 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cdc:	d111      	bne.n	8001d02 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce6:	d004      	beq.n	8001cf2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d107      	bne.n	8001d02 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0a:	d10f      	bne.n	8001d2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e00f      	b.n	8001d60 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d1a3      	bne.n	8001ca6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d7c:	d112      	bne.n	8001da4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ff83 	bl	8001c94 <SPI_WaitFlagStateUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e019      	b.n	8001dd8 <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d112      	bne.n	8001dd6 <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	2101      	movs	r1, #1
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff ff6a 	bl	8001c94 <SPI_WaitFlagStateUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	f043 0220 	orr.w	r2, r3, #32
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e000      	b.n	8001dd8 <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01d      	b.n	8001e2e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f001 fc58 	bl	80036bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 f916 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fa66 	bl	800231a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d007      	beq.n	8001e70 <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa44 	bl	800231a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_PWM_Stop+0x38>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e0b4      	b.n	8002048 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	f200 809f 	bhi.w	8002034 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08002035 	.word	0x08002035
 8001f04:	08002035 	.word	0x08002035
 8001f08:	08002035 	.word	0x08002035
 8001f0c:	08001f71 	.word	0x08001f71
 8001f10:	08002035 	.word	0x08002035
 8001f14:	08002035 	.word	0x08002035
 8001f18:	08002035 	.word	0x08002035
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08002035 	.word	0x08002035
 8001f24:	08002035 	.word	0x08002035
 8001f28:	08002035 	.word	0x08002035
 8001f2c:	08001ff3 	.word	0x08001ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f8fa 	bl	8002130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e062      	b.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f916 	bl	80021a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6999      	ldr	r1, [r3, #24]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
      break;
 8001fb0:	e041      	b.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f933 	bl	8002224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0208 	orr.w	r2, r2, #8
 8001fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0204 	bic.w	r2, r2, #4
 8001fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69d9      	ldr	r1, [r3, #28]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
      break;
 8001ff0:	e021      	b.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f950 	bl	800229e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
      break;
 8002032:	e000      	b.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002034:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d00f      	beq.n	8002088 <TIM_Base_SetConfig+0x38>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <TIM_Base_SetConfig+0xc8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00b      	beq.n	8002088 <TIM_Base_SetConfig+0x38>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <TIM_Base_SetConfig+0xcc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_Base_SetConfig+0x38>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a29      	ldr	r2, [pc, #164]	; (8002120 <TIM_Base_SetConfig+0xd0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0x38>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a28      	ldr	r2, [pc, #160]	; (8002124 <TIM_Base_SetConfig+0xd4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d108      	bne.n	800209a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d017      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <TIM_Base_SetConfig+0xc8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <TIM_Base_SetConfig+0xcc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00f      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <TIM_Base_SetConfig+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <TIM_Base_SetConfig+0xd4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <TIM_Base_SetConfig+0xd8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0x82>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <TIM_Base_SetConfig+0xdc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	615a      	str	r2, [r3, #20]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010800 	.word	0x40010800
 8002128:	40010c00 	.word	0x40010c00
 800212c:	40011000 	.word	0x40011000

08002130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0201 	bic.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f023 0302 	bic.w	r3, r3, #2
 8002178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f023 0210 	bic.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0320 	bic.w	r3, r3, #32
 80021f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	621a      	str	r2, [r3, #32]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800226c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	621a      	str	r2, [r3, #32]
}
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800229e:	b480      	push	{r7}
 80022a0:	b087      	sub	sp, #28
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	621a      	str	r2, [r3, #32]
}
 8002310:	bf00      	nop
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800231a:	b480      	push	{r7}
 800231c:	b087      	sub	sp, #28
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2201      	movs	r2, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	43db      	mvns	r3, r3
 800233c:	401a      	ands	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	431a      	orrs	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	621a      	str	r2, [r3, #32]
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002376:	2302      	movs	r3, #2
 8002378:	e032      	b.n	80023e0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e03f      	b.n	800247c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d106      	bne.n	8002416 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f001 f9f1 	bl	80037f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2224      	movs	r2, #36	; 0x24
 800241a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f90c 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002442:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002452:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002462:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	f040 8083 	bne.w	80025ac <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_UART_Transmit+0x2e>
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07b      	b.n	80025ae <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_UART_Transmit+0x40>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e074      	b.n	80025ae <HAL_UART_Transmit+0x12a>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024da:	f7fd feb3 	bl	8000244 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ec:	e042      	b.n	8002574 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	d122      	bne.n	800254c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f850 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e046      	b.n	80025ae <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002532:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3302      	adds	r3, #2
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e017      	b.n	8002574 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	e013      	b.n	8002574 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2200      	movs	r2, #0
 8002554:	2180      	movs	r1, #128	; 0x80
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f82d 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e023      	b.n	80025ae <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1b7      	bne.n	80024ee <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f814 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e00a      	b.n	80025ae <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	e02c      	b.n	8002622 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ce:	d028      	beq.n	8002622 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025d6:	f7fd fe35 	bl	8000244 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d21d      	bcs.n	8002622 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e00f      	b.n	8002642 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	429a      	cmp	r2, r3
 800263e:	d0c3      	beq.n	80025c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800268c:	f023 030c 	bic.w	r3, r3, #12
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	430b      	orrs	r3, r1
 8002698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	f040 80a5 	bne.w	8002806 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4aa4      	ldr	r2, [pc, #656]	; (8002954 <UART_SetConfig+0x308>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d14f      	bne.n	8002766 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c6:	f7ff f8d9 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 80026ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4a9d      	ldr	r2, [pc, #628]	; (8002958 <UART_SetConfig+0x30c>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	0119      	lsls	r1, r3, #4
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	009a      	lsls	r2, r3, #2
 80026f6:	441a      	add	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002702:	4b95      	ldr	r3, [pc, #596]	; (8002958 <UART_SetConfig+0x30c>)
 8002704:	fba3 0302 	umull	r0, r3, r3, r2
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	2064      	movs	r0, #100	; 0x64
 800270c:	fb00 f303 	mul.w	r3, r0, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	4a90      	ldr	r2, [pc, #576]	; (8002958 <UART_SetConfig+0x30c>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002724:	4419      	add	r1, r3
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fbb2 f2f3 	udiv	r2, r2, r3
 800273c:	4b86      	ldr	r3, [pc, #536]	; (8002958 <UART_SetConfig+0x30c>)
 800273e:	fba3 0302 	umull	r0, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a81      	ldr	r2, [pc, #516]	; (8002958 <UART_SetConfig+0x30c>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 0207 	and.w	r2, r3, #7
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	440a      	add	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002764:	e0f1      	b.n	800294a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002766:	f7ff f875 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 800276a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009a      	lsls	r2, r3, #2
 8002776:	441a      	add	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <UART_SetConfig+0x30c>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	0119      	lsls	r1, r3, #4
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009a      	lsls	r2, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a2:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <UART_SetConfig+0x30c>)
 80027a4:	fba3 0302 	umull	r0, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2064      	movs	r0, #100	; 0x64
 80027ac:	fb00 f303 	mul.w	r3, r0, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a68      	ldr	r2, [pc, #416]	; (8002958 <UART_SetConfig+0x30c>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c4:	4419      	add	r1, r3
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027dc:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <UART_SetConfig+0x30c>)
 80027de:	fba3 0302 	umull	r0, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2064      	movs	r0, #100	; 0x64
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a59      	ldr	r2, [pc, #356]	; (8002958 <UART_SetConfig+0x30c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 0207 	and.w	r2, r3, #7
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	440a      	add	r2, r1
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	e0a1      	b.n	800294a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a52      	ldr	r2, [pc, #328]	; (8002954 <UART_SetConfig+0x308>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d14e      	bne.n	80028ae <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002810:	f7ff f834 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002814:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <UART_SetConfig+0x30c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	0119      	lsls	r1, r3, #4
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <UART_SetConfig+0x30c>)
 800284e:	fba3 0302 	umull	r0, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a3d      	ldr	r2, [pc, #244]	; (8002958 <UART_SetConfig+0x30c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	4419      	add	r1, r3
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fbb2 f2f3 	udiv	r2, r2, r3
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <UART_SetConfig+0x30c>)
 8002886:	fba3 0302 	umull	r0, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2064      	movs	r0, #100	; 0x64
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <UART_SetConfig+0x30c>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	440a      	add	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	e04d      	b.n	800294a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ae:	f7fe ffd1 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 80028b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4a23      	ldr	r2, [pc, #140]	; (8002958 <UART_SetConfig+0x30c>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	0119      	lsls	r1, r3, #4
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <UART_SetConfig+0x30c>)
 80028ec:	fba3 0302 	umull	r0, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2064      	movs	r0, #100	; 0x64
 80028f4:	fb00 f303 	mul.w	r3, r0, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <UART_SetConfig+0x30c>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290a:	4419      	add	r1, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009a      	lsls	r2, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <UART_SetConfig+0x30c>)
 8002924:	fba3 0302 	umull	r0, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2064      	movs	r0, #100	; 0x64
 800292c:	fb00 f303 	mul.w	r3, r0, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <UART_SetConfig+0x30c>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	440a      	add	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40013800 	.word	0x40013800
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <MX_ADC_Init+0xa8>)
 800296e:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <MX_ADC_Init+0xac>)
 8002970:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <MX_ADC_Init+0xa8>)
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <MX_ADC_Init+0xa8>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_ADC_Init+0xa8>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <MX_ADC_Init+0xa8>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_ADC_Init+0xa8>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_ADC_Init+0xa8>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_ADC_Init+0xa8>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_ADC_Init+0xa8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029ba:	2210      	movs	r2, #16
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029ce:	f7fd fc65 	bl	800029c <HAL_ADC_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80029d8:	f000 fc69 	bl	80032ae <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029dc:	2301      	movs	r3, #1
 80029de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_ADC_Init+0xa8>)
 80029ee:	f7fd fe07 	bl	8000600 <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80029f8:	f000 fc59 	bl	80032ae <Error_Handler>
  }

}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200000a8 	.word	0x200000a8
 8002a08:	40012400 	.word	0x40012400

08002a0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_ADC_MspInit+0x74>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d123      	bne.n	8002a76 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_ADC_MspInit+0x78>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = RV2_Pin|RV1_Pin;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_ADC_MspInit+0x7c>)
 8002a72:	f7fe f86b 	bl	8000b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40012400 	.word	0x40012400
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000

08002a8c <SPI_write>:
 */

#include "../Inc/display.h"

void SPI_write(uint8_t add, uint8_t data)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	460a      	mov	r2, r1
 8002a96:	71fb      	strb	r3, [r7, #7]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa2:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <SPI_write+0x54>)
 8002aa4:	f7fe f9f7 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aae:	480c      	ldr	r0, [pc, #48]	; (8002ae0 <SPI_write+0x54>)
 8002ab0:	f7fe f9f1 	bl	8000e96 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1,&add, sizeof(uint8_t), 10);
 8002ab4:	1df9      	adds	r1, r7, #7
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	2201      	movs	r2, #1
 8002aba:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <SPI_write+0x58>)
 8002abc:	f7fe ffb6 	bl	8001a2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data, sizeof(uint8_t), 10);
 8002ac0:	1db9      	adds	r1, r7, #6
 8002ac2:	230a      	movs	r3, #10
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <SPI_write+0x58>)
 8002ac8:	f7fe ffb0 	bl	8001a2c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad2:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <SPI_write+0x54>)
 8002ad4:	f7fe f9df 	bl	8000e96 <HAL_GPIO_WritePin>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	200000fc 	.word	0x200000fc

08002ae8 <MAX7219_Config>:

void MAX7219_Config(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	/* Max 7219 configuration */

	SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8002aec:	2101      	movs	r1, #1
 8002aee:	200c      	movs	r0, #12
 8002af0:	f7ff ffcc 	bl	8002a8c <SPI_write>
	SPI_write(0x0A, 0x0F);//Intensité lumineuse au MAAAX
 8002af4:	210f      	movs	r1, #15
 8002af6:	200a      	movs	r0, #10
 8002af8:	f7ff ffc8 	bl	8002a8c <SPI_write>

	SPI_write(0x09, 0x0F);
 8002afc:	210f      	movs	r1, #15
 8002afe:	2009      	movs	r0, #9
 8002b00:	f7ff ffc4 	bl	8002a8c <SPI_write>
	SPI_write(0x0B, 0x03);//Utiliser 4 afficheurs (Scan limit à 0x03 : Afficher digits 0 1 2 3)
 8002b04:	2103      	movs	r1, #3
 8002b06:	200b      	movs	r0, #11
 8002b08:	f7ff ffc0 	bl	8002a8c <SPI_write>
	SPI_write(0x0F, 0x00);//Display Test à 0 : Mode test off, mode affichage normal on
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	200f      	movs	r0, #15
 8002b10:	f7ff ffbc 	bl	8002a8c <SPI_write>
	SPI_write(0x01, 0x0F);
 8002b14:	210f      	movs	r1, #15
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7ff ffb8 	bl	8002a8c <SPI_write>
	SPI_write(0x02, 0x0F);
 8002b1c:	210f      	movs	r1, #15
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7ff ffb4 	bl	8002a8c <SPI_write>
	SPI_write(0x03, 0x0F);
 8002b24:	210f      	movs	r1, #15
 8002b26:	2003      	movs	r0, #3
 8002b28:	f7ff ffb0 	bl	8002a8c <SPI_write>
	SPI_write(0x04, 0x0F);
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f7ff ffac 	bl	8002a8c <SPI_write>

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <Segment_Display>:

void Segment_Display(uint16_t fq)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
	uint8_t unite= 0, dizaine = 0, centaine = 0, millier = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	2300      	movs	r3, #0
 8002b48:	73bb      	strb	r3, [r7, #14]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	737b      	strb	r3, [r7, #13]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	733b      	strb	r3, [r7, #12]

	unite = (fq%10);
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <Segment_Display+0x118>)
 8002b56:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5a:	08d9      	lsrs	r1, r3, #3
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	73fb      	strb	r3, [r7, #15]
	dizaine = ((fq%100)-(fq%10))/10;
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <Segment_Display+0x11c>)
 8002b6e:	fba2 1203 	umull	r1, r2, r2, r3
 8002b72:	0952      	lsrs	r2, r2, #5
 8002b74:	2164      	movs	r1, #100	; 0x64
 8002b76:	fb01 f202 	mul.w	r2, r1, r2
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <Segment_Display+0x118>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	08d9      	lsrs	r1, r3, #3
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	1ac3      	subs	r3, r0, r3
 8002b98:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <Segment_Display+0x120>)
 8002b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b9e:	1092      	asrs	r2, r2, #2
 8002ba0:	17db      	asrs	r3, r3, #31
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	73bb      	strb	r3, [r7, #14]
	centaine = ((fq%1000)-(fq%100))/100;
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <Segment_Display+0x124>)
 8002baa:	fba2 1203 	umull	r1, r2, r2, r3
 8002bae:	0992      	lsrs	r2, r2, #6
 8002bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bb4:	fb01 f202 	mul.w	r2, r1, r2
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <Segment_Display+0x11c>)
 8002bc2:	fba2 1203 	umull	r1, r2, r2, r3
 8002bc6:	0952      	lsrs	r2, r2, #5
 8002bc8:	2164      	movs	r1, #100	; 0x64
 8002bca:	fb01 f202 	mul.w	r2, r1, r2
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	1ac3      	subs	r3, r0, r3
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <Segment_Display+0x11c>)
 8002bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8002bda:	1152      	asrs	r2, r2, #5
 8002bdc:	17db      	asrs	r3, r3, #31
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	737b      	strb	r3, [r7, #13]
	millier = ((fq%10000)-(fq%1000))/1000;
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <Segment_Display+0x128>)
 8002be6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bea:	0b52      	lsrs	r2, r2, #13
 8002bec:	f242 7110 	movw	r1, #10000	; 0x2710
 8002bf0:	fb01 f202 	mul.w	r2, r1, r2
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <Segment_Display+0x124>)
 8002bfe:	fba2 1203 	umull	r1, r2, r2, r3
 8002c02:	0992      	lsrs	r2, r2, #6
 8002c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c08:	fb01 f202 	mul.w	r2, r1, r2
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1ac3      	subs	r3, r0, r3
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <Segment_Display+0x124>)
 8002c14:	fb82 1203 	smull	r1, r2, r2, r3
 8002c18:	1192      	asrs	r2, r2, #6
 8002c1a:	17db      	asrs	r3, r3, #31
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	733b      	strb	r3, [r7, #12]


	//	printf("fq = %d%d%d%d\n",millier,centaine,dizaine,unite);

	SPI_write(0x04,unite);
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	4619      	mov	r1, r3
 8002c24:	2004      	movs	r0, #4
 8002c26:	f7ff ff31 	bl	8002a8c <SPI_write>
	SPI_write(0x03,dizaine);
 8002c2a:	7bbb      	ldrb	r3, [r7, #14]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	2003      	movs	r0, #3
 8002c30:	f7ff ff2c 	bl	8002a8c <SPI_write>
	SPI_write(0x02, centaine);
 8002c34:	7b7b      	ldrb	r3, [r7, #13]
 8002c36:	4619      	mov	r1, r3
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f7ff ff27 	bl	8002a8c <SPI_write>
	SPI_write(0x01, millier);
 8002c3e:	7b3b      	ldrb	r3, [r7, #12]
 8002c40:	4619      	mov	r1, r3
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff ff22 	bl	8002a8c <SPI_write>
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	cccccccd 	.word	0xcccccccd
 8002c54:	51eb851f 	.word	0x51eb851f
 8002c58:	66666667 	.word	0x66666667
 8002c5c:	10624dd3 	.word	0x10624dd3
 8002c60:	d1b71759 	.word	0xd1b71759

08002c64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c92:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a5a      	ldr	r2, [pc, #360]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002c98:	f043 0320 	orr.w	r3, r3, #32
 8002c9c:	61d3      	str	r3, [r2, #28]
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b52      	ldr	r3, [pc, #328]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a4e      	ldr	r2, [pc, #312]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a48      	ldr	r2, [pc, #288]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <MX_GPIO_Init+0x19c>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f64f 4106 	movw	r1, #64518	; 0xfc06
 8002cf8:	4842      	ldr	r0, [pc, #264]	; (8002e04 <MX_GPIO_Init+0x1a0>)
 8002cfa:	f7fe f8cc 	bl	8000e96 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d04:	4840      	ldr	r0, [pc, #256]	; (8002e08 <MX_GPIO_Init+0x1a4>)
 8002d06:	f7fe f8c6 	bl	8000e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC2 PC3 PC4 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002d0a:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8002d0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d10:	2303      	movs	r3, #3
 8002d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	483b      	ldr	r0, [pc, #236]	; (8002e0c <MX_GPIO_Init+0x1a8>)
 8002d20:	f7fd ff14 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d24:	2303      	movs	r3, #3
 8002d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4836      	ldr	r0, [pc, #216]	; (8002e10 <MX_GPIO_Init+0x1ac>)
 8002d38:	f7fd ff08 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 PA10 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
 8002d3c:	f24e 6310 	movw	r3, #58896	; 0xe610
 8002d40:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d42:	2303      	movs	r3, #3
 8002d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	482d      	ldr	r0, [pc, #180]	; (8002e08 <MX_GPIO_Init+0x1a4>)
 8002d52:	f7fd fefb 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8002d56:	2360      	movs	r3, #96	; 0x60
 8002d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4828      	ldr	r0, [pc, #160]	; (8002e0c <MX_GPIO_Init+0x1a8>)
 8002d6a:	f7fd feef 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
 8002d6e:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002d72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d74:	2303      	movs	r3, #3
 8002d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	4820      	ldr	r0, [pc, #128]	; (8002e04 <MX_GPIO_Init+0x1a0>)
 8002d84:	f7fd fee2 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
 8002d88:	f64f 4306 	movw	r3, #64518	; 0xfc06
 8002d8c:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4818      	ldr	r0, [pc, #96]	; (8002e04 <MX_GPIO_Init+0x1a0>)
 8002da2:	f7fd fed3 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4812      	ldr	r0, [pc, #72]	; (8002e08 <MX_GPIO_Init+0x1a4>)
 8002dc0:	f7fd fec4 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8002dc4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <MX_GPIO_Init+0x1a4>)
 8002dda:	f7fd feb7 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dde:	2304      	movs	r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de2:	2303      	movs	r3, #3
 8002de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	4808      	ldr	r0, [pc, #32]	; (8002e14 <MX_GPIO_Init+0x1b0>)
 8002df2:	f7fd feab 	bl	8000b4c <HAL_GPIO_Init>

}
 8002df6:	bf00      	nop
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40020c00 	.word	0x40020c00

08002e18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af02      	add	r7, sp, #8


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002e1e:	f7fd f9ad 	bl	800017c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002e22:	f000 f9e3 	bl	80031ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e26:	f7ff ff1d 	bl	8002c64 <MX_GPIO_Init>
	MX_ADC_Init();
 8002e2a:	f7ff fd97 	bl	800295c <MX_ADC_Init>
	MX_TIM3_Init();
 8002e2e:	f000 fbe1 	bl	80035f4 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8002e32:	f000 fcb7 	bl	80037a4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8002e36:	f000 fa41 	bl	80032bc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_ConfigChannel(&hadc, ADC_CHANNEL_0);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	487b      	ldr	r0, [pc, #492]	; (800302c <main+0x214>)
 8002e3e:	f7fd fbdf 	bl	8000600 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc);
 8002e42:	487a      	ldr	r0, [pc, #488]	; (800302c <main+0x214>)
 8002e44:	f7fd fb70 	bl	8000528 <HAL_ADC_Start>
	MAX7219_Config();
 8002e48:	f7ff fe4e 	bl	8002ae8 <MAX7219_Config>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8002e4c:	e044      	b.n	8002ed8 <main+0xc0>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8002e4e:	2101      	movs	r1, #1
 8002e50:	200c      	movs	r0, #12
 8002e52:	f7ff fe1b 	bl	8002a8c <SPI_write>
			adc = HAL_ADC_GetValue(&hadc);
 8002e56:	4875      	ldr	r0, [pc, #468]	; (800302c <main+0x214>)
 8002e58:	f7fd fbc6 	bl	80005e8 <HAL_ADC_GetValue>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <main+0x218>)
 8002e62:	601a      	str	r2, [r3, #0]
			psc = map(adc,0,4096,200,8000);
 8002e64:	4b72      	ldr	r3, [pc, #456]	; (8003030 <main+0x218>)
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	23c8      	movs	r3, #200	; 0xc8
 8002e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e74:	2100      	movs	r1, #0
 8002e76:	f000 f9ff 	bl	8003278 <map>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <main+0x21c>)
 8002e7e:	601a      	str	r2, [r3, #0]

			fq = (16000000/(psc+1))/10;
 8002e80:	4b6c      	ldr	r3, [pc, #432]	; (8003034 <main+0x21c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <main+0x220>)
 8002e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <main+0x224>)
 8002e90:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <main+0x224>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe4e 	bl	8002b38 <Segment_Display>

			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
 8002e9c:	4b65      	ldr	r3, [pc, #404]	; (8003034 <main+0x21c>)
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <main+0x224>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4866      	ldr	r0, [pc, #408]	; (8003040 <main+0x228>)
 8002ea8:	f000 fd54 	bl	8003954 <iprintf>

			__HAL_TIM_SET_PRESCALER(&htim3,psc);
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <main+0x21c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <main+0x22c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	4862      	ldr	r0, [pc, #392]	; (8003044 <main+0x22c>)
 8002eba:	f7fe ffbc 	bl	8001e36 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,1);
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4861      	ldr	r0, [pc, #388]	; (8003048 <main+0x230>)
 8002ec4:	f7fd ffe7 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	2104      	movs	r1, #4
 8002ecc:	485e      	ldr	r0, [pc, #376]	; (8003048 <main+0x230>)
 8002ece:	f7fd ffe2 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002ed2:	2064      	movs	r0, #100	; 0x64
 8002ed4:	f7fd f9c0 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8002ed8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002edc:	485b      	ldr	r0, [pc, #364]	; (800304c <main+0x234>)
 8002ede:	f7fd ffc3 	bl	8000e68 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0b2      	beq.n	8002e4e <main+0x36>
		}

		while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 0)
 8002ee8:	e047      	b.n	8002f7a <main+0x162>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8002eea:	2101      	movs	r1, #1
 8002eec:	200c      	movs	r0, #12
 8002eee:	f7ff fdcd 	bl	8002a8c <SPI_write>
			adc = HAL_ADC_GetValue(&hadc);
 8002ef2:	484e      	ldr	r0, [pc, #312]	; (800302c <main+0x214>)
 8002ef4:	f7fd fb78 	bl	80005e8 <HAL_ADC_GetValue>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <main+0x218>)
 8002efe:	601a      	str	r2, [r3, #0]
			psc = map(adc,0,4096,200,8000) + 100;
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <main+0x218>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	23c8      	movs	r3, #200	; 0xc8
 8002f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f10:	2100      	movs	r1, #0
 8002f12:	f000 f9b1 	bl	8003278 <map>
 8002f16:	4603      	mov	r3, r0
 8002f18:	3364      	adds	r3, #100	; 0x64
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <main+0x21c>)
 8002f1c:	6013      	str	r3, [r2, #0]

			fq = (16000000/(psc+1))/10;
 8002f1e:	4b45      	ldr	r3, [pc, #276]	; (8003034 <main+0x21c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a44      	ldr	r2, [pc, #272]	; (8003038 <main+0x220>)
 8002f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <main+0x224>)
 8002f2e:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <main+0x224>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fdff 	bl	8002b38 <Segment_Display>

			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <main+0x21c>)
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <main+0x224>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	483e      	ldr	r0, [pc, #248]	; (8003040 <main+0x228>)
 8002f46:	f000 fd05 	bl	8003954 <iprintf>
			__HAL_TIM_SET_PRESCALER(&htim3,psc);
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <main+0x21c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <main+0x22c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002f54:	2104      	movs	r1, #4
 8002f56:	483b      	ldr	r0, [pc, #236]	; (8003044 <main+0x22c>)
 8002f58:	f7fe ff6d 	bl	8001e36 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,1);
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f62:	4839      	ldr	r0, [pc, #228]	; (8003048 <main+0x230>)
 8002f64:	f7fd ff97 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f6e:	4836      	ldr	r0, [pc, #216]	; (8003048 <main+0x230>)
 8002f70:	f7fd ff91 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002f74:	2064      	movs	r0, #100	; 0x64
 8002f76:	f7fd f96f 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 0)
 8002f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f7e:	4833      	ldr	r0, [pc, #204]	; (800304c <main+0x234>)
 8002f80:	f7fd ff72 	bl	8000e68 <HAL_GPIO_ReadPin>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0af      	beq.n	8002eea <main+0xd2>
		}

		while (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 0)
 8002f8a:	e047      	b.n	800301c <main+0x204>
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	200c      	movs	r0, #12
 8002f90:	f7ff fd7c 	bl	8002a8c <SPI_write>
			adc = HAL_ADC_GetValue(&hadc);
 8002f94:	4825      	ldr	r0, [pc, #148]	; (800302c <main+0x214>)
 8002f96:	f7fd fb27 	bl	80005e8 <HAL_ADC_GetValue>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <main+0x218>)
 8002fa0:	601a      	str	r2, [r3, #0]
			psc = map(adc,0,4096,200,8000) + 150;
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <main+0x218>)
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	23c8      	movs	r3, #200	; 0xc8
 8002fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f000 f960 	bl	8003278 <map>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	3396      	adds	r3, #150	; 0x96
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <main+0x21c>)
 8002fbe:	6013      	str	r3, [r2, #0]

			fq = (16000000/(psc+1))/10;
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <main+0x21c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <main+0x220>)
 8002fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <main+0x224>)
 8002fd0:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <main+0x224>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fdae 	bl	8002b38 <Segment_Display>

			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <main+0x21c>)
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <main+0x224>)
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4816      	ldr	r0, [pc, #88]	; (8003040 <main+0x228>)
 8002fe8:	f000 fcb4 	bl	8003954 <iprintf>
			__HAL_TIM_SET_PRESCALER(&htim3,psc);
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <main+0x21c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <main+0x22c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	4812      	ldr	r0, [pc, #72]	; (8003044 <main+0x22c>)
 8002ffa:	f7fe ff1c 	bl	8001e36 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,1);
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4810      	ldr	r0, [pc, #64]	; (8003048 <main+0x230>)
 8003006:	f7fd ff46 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin,1);
 800300a:	2201      	movs	r2, #1
 800300c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <main+0x230>)
 8003012:	f7fd ff40 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8003016:	2064      	movs	r0, #100	; 0x64
 8003018:	f7fd f91e 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 0)
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	480c      	ldr	r0, [pc, #48]	; (8003050 <main+0x238>)
 8003020:	f7fd ff22 	bl	8000e68 <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0b0      	beq.n	8002f8c <main+0x174>
		}

		while (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 0)
 800302a:	e05b      	b.n	80030e4 <main+0x2cc>
 800302c:	200000a8 	.word	0x200000a8
 8003030:	2000008c 	.word	0x2000008c
 8003034:	20000094 	.word	0x20000094
 8003038:	00186a00 	.word	0x00186a00
 800303c:	20000090 	.word	0x20000090
 8003040:	08004748 	.word	0x08004748
 8003044:	20000154 	.word	0x20000154
 8003048:	40020400 	.word	0x40020400
 800304c:	40020000 	.word	0x40020000
 8003050:	40020800 	.word	0x40020800
		{
			SPI_write(0x0C, 0x01);//Shutdown à 1 (Mode activé)
 8003054:	2101      	movs	r1, #1
 8003056:	200c      	movs	r0, #12
 8003058:	f7ff fd18 	bl	8002a8c <SPI_write>
			adc = HAL_ADC_GetValue(&hadc);
 800305c:	4859      	ldr	r0, [pc, #356]	; (80031c4 <main+0x3ac>)
 800305e:	f7fd fac3 	bl	80005e8 <HAL_ADC_GetValue>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <main+0x3b0>)
 8003068:	601a      	str	r2, [r3, #0]
			psc = map(adc,0,4096,200,8000) +200;
 800306a:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <main+0x3b0>)
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	23c8      	movs	r3, #200	; 0xc8
 8003076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800307a:	2100      	movs	r1, #0
 800307c:	f000 f8fc 	bl	8003278 <map>
 8003080:	4603      	mov	r3, r0
 8003082:	33c8      	adds	r3, #200	; 0xc8
 8003084:	4a51      	ldr	r2, [pc, #324]	; (80031cc <main+0x3b4>)
 8003086:	6013      	str	r3, [r2, #0]

			fq = (16000000/(psc+1))/10;
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <main+0x3b4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a50      	ldr	r2, [pc, #320]	; (80031d0 <main+0x3b8>)
 8003090:	fb92 f3f3 	sdiv	r3, r2, r3
 8003094:	b29a      	uxth	r2, r3
 8003096:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <main+0x3bc>)
 8003098:	801a      	strh	r2, [r3, #0]

			Segment_Display(fq);
 800309a:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <main+0x3bc>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fd4a 	bl	8002b38 <Segment_Display>

			printf("PSC Value : %d\tFrequence : %d\n",psc,fq);
 80030a4:	4b49      	ldr	r3, [pc, #292]	; (80031cc <main+0x3b4>)
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <main+0x3bc>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	484a      	ldr	r0, [pc, #296]	; (80031d8 <main+0x3c0>)
 80030b0:	f000 fc50 	bl	8003954 <iprintf>
			__HAL_TIM_SET_PRESCALER(&htim3,psc);
 80030b4:	4b45      	ldr	r3, [pc, #276]	; (80031cc <main+0x3b4>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <main+0x3c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28

			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80030be:	2104      	movs	r1, #4
 80030c0:	4846      	ldr	r0, [pc, #280]	; (80031dc <main+0x3c4>)
 80030c2:	f7fe feb8 	bl	8001e36 <HAL_TIM_PWM_Start>

			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,1);
 80030c6:	2201      	movs	r2, #1
 80030c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030cc:	4844      	ldr	r0, [pc, #272]	; (80031e0 <main+0x3c8>)
 80030ce:	f7fd fee2 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin,1);
 80030d2:	2201      	movs	r2, #1
 80030d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d8:	4841      	ldr	r0, [pc, #260]	; (80031e0 <main+0x3c8>)
 80030da:	f7fd fedc 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80030de:	2064      	movs	r0, #100	; 0x64
 80030e0:	f7fd f8ba 	bl	8000258 <HAL_Delay>
		while (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 0)
 80030e4:	2120      	movs	r1, #32
 80030e6:	483f      	ldr	r0, [pc, #252]	; (80031e4 <main+0x3cc>)
 80030e8:	f7fd febe 	bl	8000e68 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0b0      	beq.n	8003054 <main+0x23c>
		}

		if ((HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1) | (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 1) | (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 1) | (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 1))
 80030f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030f6:	483c      	ldr	r0, [pc, #240]	; (80031e8 <main+0x3d0>)
 80030f8:	f7fd feb6 	bl	8000e68 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2dc      	uxtb	r4, r3
 8003108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800310c:	4836      	ldr	r0, [pc, #216]	; (80031e8 <main+0x3d0>)
 800310e:	f7fd feab 	bl	8000e68 <HAL_GPIO_ReadPin>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4323      	orrs	r3, r4
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461c      	mov	r4, r3
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	482f      	ldr	r0, [pc, #188]	; (80031e4 <main+0x3cc>)
 8003128:	f7fd fe9e 	bl	8000e68 <HAL_GPIO_ReadPin>
 800312c:	4603      	mov	r3, r0
 800312e:	2b01      	cmp	r3, #1
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	431c      	orrs	r4, r3
 800313a:	2120      	movs	r1, #32
 800313c:	4829      	ldr	r0, [pc, #164]	; (80031e4 <main+0x3cc>)
 800313e:	f7fd fe93 	bl	8000e68 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	4323      	orrs	r3, r4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f43f aec1 	beq.w	8002ed8 <main+0xc0>
		{
			SPI_write(0x0C, 0x00);//Shutdown à 1 (Mode activé)
 8003156:	2100      	movs	r1, #0
 8003158:	200c      	movs	r0, #12
 800315a:	f7ff fc97 	bl	8002a8c <SPI_write>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800315e:	2104      	movs	r1, #4
 8003160:	481e      	ldr	r0, [pc, #120]	; (80031dc <main+0x3c4>)
 8003162:	f7fe fe8a 	bl	8001e7a <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,0);
 8003166:	2200      	movs	r2, #0
 8003168:	2102      	movs	r1, #2
 800316a:	481d      	ldr	r0, [pc, #116]	; (80031e0 <main+0x3c8>)
 800316c:	f7fd fe93 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 8003170:	2200      	movs	r2, #0
 8003172:	2104      	movs	r1, #4
 8003174:	481a      	ldr	r0, [pc, #104]	; (80031e0 <main+0x3c8>)
 8003176:	f7fd fe8e 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 800317a:	2200      	movs	r2, #0
 800317c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003180:	4817      	ldr	r0, [pc, #92]	; (80031e0 <main+0x3c8>)
 8003182:	f7fd fe88 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8003186:	2200      	movs	r2, #0
 8003188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800318c:	4814      	ldr	r0, [pc, #80]	; (80031e0 <main+0x3c8>)
 800318e:	f7fd fe82 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,0);
 8003192:	2200      	movs	r2, #0
 8003194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003198:	4811      	ldr	r0, [pc, #68]	; (80031e0 <main+0x3c8>)
 800319a:	f7fd fe7c 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin,0);
 800319e:	2200      	movs	r2, #0
 80031a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a4:	480e      	ldr	r0, [pc, #56]	; (80031e0 <main+0x3c8>)
 80031a6:	f7fd fe76 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin,0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <main+0x3c8>)
 80031b2:	f7fd fe70 	bl	8000e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin,0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031bc:	4808      	ldr	r0, [pc, #32]	; (80031e0 <main+0x3c8>)
 80031be:	f7fd fe6a 	bl	8000e96 <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 80031c2:	e689      	b.n	8002ed8 <main+0xc0>
 80031c4:	200000a8 	.word	0x200000a8
 80031c8:	2000008c 	.word	0x2000008c
 80031cc:	20000094 	.word	0x20000094
 80031d0:	00186a00 	.word	0x00186a00
 80031d4:	20000090 	.word	0x20000090
 80031d8:	08004748 	.word	0x08004748
 80031dc:	20000154 	.word	0x20000154
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020000 	.word	0x40020000

080031ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b092      	sub	sp, #72	; 0x48
 80031f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	2234      	movs	r2, #52	; 0x34
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fba2 	bl	8003944 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003200:	463b      	mov	r3, r7
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800320e:	4b19      	ldr	r3, [pc, #100]	; (8003274 <SystemClock_Config+0x88>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <SystemClock_Config+0x88>)
 8003218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321c:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800321e:	2302      	movs	r3, #2
 8003220:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003222:	2301      	movs	r3, #1
 8003224:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003226:	2310      	movs	r3, #16
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800322a:	2300      	movs	r3, #0
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fe48 	bl	8000ec8 <HAL_RCC_OscConfig>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <SystemClock_Config+0x56>
	{
		Error_Handler();
 800323e:	f000 f836 	bl	80032ae <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003242:	230f      	movs	r3, #15
 8003244:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003246:	2301      	movs	r3, #1
 8003248:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003256:	463b      	mov	r3, r7
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f964 	bl	8001528 <HAL_RCC_ClockConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8003266:	f000 f822 	bl	80032ae <Error_Handler>
	}
}
 800326a:	bf00      	nop
 800326c:	3748      	adds	r7, #72	; 0x48
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40007000 	.word	0x40007000

08003278 <map>:

/* USER CODE BEGIN 4 */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	1a8a      	subs	r2, r1, r2
 8003292:	fb02 f203 	mul.w	r2, r2, r3
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	fb92 f2f3 	sdiv	r2, r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4413      	add	r3, r2
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <MX_SPI1_Init+0x64>)
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <MX_SPI1_Init+0x68>)
 80032c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <MX_SPI1_Init+0x64>)
 80032c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <MX_SPI1_Init+0x64>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <MX_SPI1_Init+0x64>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_SPI1_Init+0x64>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <MX_SPI1_Init+0x64>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <MX_SPI1_Init+0x64>)
 80032e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_SPI1_Init+0x64>)
 80032f0:	2210      	movs	r2, #16
 80032f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <MX_SPI1_Init+0x64>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <MX_SPI1_Init+0x64>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <MX_SPI1_Init+0x64>)
 8003302:	2200      	movs	r2, #0
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_SPI1_Init+0x64>)
 8003308:	220a      	movs	r2, #10
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800330c:	4804      	ldr	r0, [pc, #16]	; (8003320 <MX_SPI1_Init+0x64>)
 800330e:	f7fe fb29 	bl	8001964 <HAL_SPI_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003318:	f7ff ffc9 	bl	80032ae <Error_Handler>
  }

}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200000fc 	.word	0x200000fc
 8003324:	40013000 	.word	0x40013000

08003328 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_SPI_MspInit+0x7c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d127      	bne.n	800339a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	61d3      	str	r3, [r2, #28]
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_SPI_MspInit+0x80>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23e0      	movs	r3, #224	; 0xe0
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800338a:	2305      	movs	r3, #5
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	4805      	ldr	r0, [pc, #20]	; (80033ac <HAL_SPI_MspInit+0x84>)
 8003396:	f7fd fbd9 	bl	8000b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800339a:	bf00      	nop
 800339c:	3728      	adds	r7, #40	; 0x28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40013000 	.word	0x40013000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020000 	.word	0x40020000

080033b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <HAL_MspInit+0x58>)
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_MspInit+0x58>)
 80033bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c0:	6253      	str	r3, [r2, #36]	; 0x24
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_MspInit+0x58>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_MspInit+0x58>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_MspInit+0x58>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6213      	str	r3, [r2, #32]
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_MspInit+0x58>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_MspInit+0x58>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_MspInit+0x58>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6253      	str	r3, [r2, #36]	; 0x24
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_MspInit+0x58>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40023800 	.word	0x40023800

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <HardFault_Handler+0x4>

0800341e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <MemManage_Handler+0x4>

08003424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <BusFault_Handler+0x4>

0800342a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342e:	e7fe      	b.n	800342e <UsageFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003458:	f7fc fee2 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}

08003460 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e00a      	b.n	8003488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003472:	f3af 8000 	nop.w
 8003476:	4601      	mov	r1, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	60ba      	str	r2, [r7, #8]
 800347e:	b2ca      	uxtb	r2, r1
 8003480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	3301      	adds	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	dbf0      	blt.n	8003472 <_read+0x12>
	}

return len;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e009      	b.n	80034c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	60ba      	str	r2, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f9e3 	bl	8003880 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	dbf1      	blt.n	80034ac <_write+0x12>
	}
	return len;
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_close>:

int _close(int file)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	return -1;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034f8:	605a      	str	r2, [r3, #4]
	return 0;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <_isatty>:

int _isatty(int file)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
	return 1;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
	return 0;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
	...

08003534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <_sbrk+0x50>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x16>
		heap_end = &end;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <_sbrk+0x50>)
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <_sbrk+0x54>)
 8003548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <_sbrk+0x50>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <_sbrk+0x50>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	466a      	mov	r2, sp
 800355a:	4293      	cmp	r3, r2
 800355c:	d907      	bls.n	800356e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800355e:	f000 f9c7 	bl	80038f0 <__errno>
 8003562:	4602      	mov	r2, r0
 8003564:	230c      	movs	r3, #12
 8003566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800356c:	e006      	b.n	800357c <_sbrk+0x48>
	}

	heap_end += incr;
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <_sbrk+0x50>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <_sbrk+0x50>)
 8003578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000098 	.word	0x20000098
 8003588:	200001d8 	.word	0x200001d8

0800358c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <SystemInit+0x5c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <SystemInit+0x5c>)
 8003596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <SystemInit+0x5c>)
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	4911      	ldr	r1, [pc, #68]	; (80035e8 <SystemInit+0x5c>)
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <SystemInit+0x60>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <SystemInit+0x5c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <SystemInit+0x5c>)
 80035ae:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80035b2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80035b6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <SystemInit+0x5c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <SystemInit+0x5c>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <SystemInit+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <SystemInit+0x5c>)
 80035ca:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80035ce:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SystemInit+0x5c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <SystemInit+0x64>)
 80035d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035dc:	609a      	str	r2, [r3, #8]
#endif
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	88ffc00c 	.word	0x88ffc00c
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003604:	463b      	mov	r3, r7
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003612:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <MX_TIM3_Init+0xc4>)
 8003614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 665;
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003618:	f240 2299 	movw	r2, #665	; 0x299
 800361c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003626:	220a      	movs	r2, #10
 8003628:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <MX_TIM3_Init+0xc0>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003636:	481f      	ldr	r0, [pc, #124]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003638:	f7fe fbd2 	bl	8001de0 <HAL_TIM_PWM_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003642:	f7ff fe34 	bl	80032ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	4619      	mov	r1, r3
 8003654:	4817      	ldr	r0, [pc, #92]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003656:	f7fe fe84 	bl	8002362 <HAL_TIMEx_MasterConfigSynchronization>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003660:	f7ff fe25 	bl	80032ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003664:	2360      	movs	r3, #96	; 0x60
 8003666:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003674:	463b      	mov	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	4619      	mov	r1, r3
 800367a:	480e      	ldr	r0, [pc, #56]	; (80036b4 <MX_TIM3_Init+0xc0>)
 800367c:	f7fe fc22 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003686:	f7ff fe12 	bl	80032ae <Error_Handler>
  }
  sConfigOC.Pulse = 5;
 800368a:	2305      	movs	r3, #5
 800368c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800368e:	463b      	mov	r3, r7
 8003690:	2204      	movs	r2, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4807      	ldr	r0, [pc, #28]	; (80036b4 <MX_TIM3_Init+0xc0>)
 8003696:	f7fe fc15 	bl	8001ec4 <HAL_TIM_PWM_ConfigChannel>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80036a0:	f7ff fe05 	bl	80032ae <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80036a4:	4803      	ldr	r0, [pc, #12]	; (80036b4 <MX_TIM3_Init+0xc0>)
 80036a6:	f000 f827 	bl	80036f8 <HAL_TIM_MspPostInit>

}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000154 	.word	0x20000154
 80036b8:	40000400 	.word	0x40000400

080036bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_TIM_PWM_MspInit+0x34>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10b      	bne.n	80036e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_TIM_PWM_MspInit+0x38>)
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <HAL_TIM_PWM_MspInit+0x38>)
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	6253      	str	r3, [r2, #36]	; 0x24
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_TIM_PWM_MspInit+0x38>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_TIM_MspPostInit+0x9c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d137      	bne.n	800378a <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	61d3      	str	r3, [r2, #28]
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	61d3      	str	r3, [r2, #28]
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_TIM_MspPostInit+0xa0>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800375a:	2302      	movs	r3, #2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800375e:	f107 0314 	add.w	r3, r7, #20
 8003762:	4619      	mov	r1, r3
 8003764:	480d      	ldr	r0, [pc, #52]	; (800379c <HAL_TIM_MspPostInit+0xa4>)
 8003766:	f7fd f9f1 	bl	8000b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_Pin;
 800376a:	2310      	movs	r3, #16
 800376c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800377a:	2302      	movs	r3, #2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 800377e:	f107 0314 	add.w	r3, r7, #20
 8003782:	4619      	mov	r1, r3
 8003784:	4806      	ldr	r0, [pc, #24]	; (80037a0 <HAL_TIM_MspPostInit+0xa8>)
 8003786:	f7fd f9e1 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800378a:	bf00      	nop
 800378c:	3728      	adds	r7, #40	; 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40000400 	.word	0x40000400
 8003798:	40023800 	.word	0x40023800
 800379c:	40020800 	.word	0x40020800
 80037a0:	40020400 	.word	0x40020400

080037a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <MX_USART2_UART_Init+0x50>)
 80037ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_USART2_UART_Init+0x4c>)
 80037dc:	f7fe fe05 	bl	80023ea <HAL_UART_Init>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037e6:	f7ff fd62 	bl	80032ae <Error_Handler>
  }

}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000190 	.word	0x20000190
 80037f4:	40004400 	.word	0x40004400

080037f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_UART_MspInit+0x7c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d127      	bne.n	800386a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_UART_MspInit+0x80>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_UART_MspInit+0x80>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	6253      	str	r3, [r2, #36]	; 0x24
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_UART_MspInit+0x80>)
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_UART_MspInit+0x80>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <HAL_UART_MspInit+0x80>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	61d3      	str	r3, [r2, #28]
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_UART_MspInit+0x80>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800384a:	230c      	movs	r3, #12
 800384c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003852:	2301      	movs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800385a:	2307      	movs	r3, #7
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <HAL_UART_MspInit+0x84>)
 8003866:	f7fd f971 	bl	8000b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800386a:	bf00      	nop
 800386c:	3728      	adds	r7, #40	; 0x28
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40004400 	.word	0x40004400
 8003878:	40023800 	.word	0x40023800
 800387c:	40020000 	.word	0x40020000

08003880 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003888:	1d39      	adds	r1, r7, #4
 800388a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800388e:	2201      	movs	r2, #1
 8003890:	4803      	ldr	r0, [pc, #12]	; (80038a0 <__io_putchar+0x20>)
 8003892:	f7fe fdf7 	bl	8002484 <HAL_UART_Transmit>

  return ch;
 8003896:	687b      	ldr	r3, [r7, #4]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000190 	.word	0x20000190

080038a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038a6:	e003      	b.n	80038b0 <LoopCopyDataInit>

080038a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038ae:	3104      	adds	r1, #4

080038b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038b0:	480a      	ldr	r0, [pc, #40]	; (80038dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038b8:	d3f6      	bcc.n	80038a8 <CopyDataInit>
  ldr r2, =_sbss
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038bc:	e002      	b.n	80038c4 <LoopFillZerobss>

080038be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038c0:	f842 3b04 	str.w	r3, [r2], #4

080038c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038c8:	d3f9      	bcc.n	80038be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038ca:	f7ff fe5f 	bl	800358c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ce:	f000 f815 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038d2:	f7ff faa1 	bl	8002e18 <main>
  bx lr
 80038d6:	4770      	bx	lr
  ldr r3, =_sidata
 80038d8:	0800482c 	.word	0x0800482c
  ldr r0, =_sdata
 80038dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038e0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80038e4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80038e8:	200001d4 	.word	0x200001d4

080038ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038ec:	e7fe      	b.n	80038ec <ADC1_IRQHandler>
	...

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2000000c 	.word	0x2000000c

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	2500      	movs	r5, #0
 8003900:	4e0c      	ldr	r6, [pc, #48]	; (8003934 <__libc_init_array+0x38>)
 8003902:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003904:	1ba4      	subs	r4, r4, r6
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	42a5      	cmp	r5, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	f000 ff10 	bl	8004730 <_init>
 8003910:	2500      	movs	r5, #0
 8003912:	4e0a      	ldr	r6, [pc, #40]	; (800393c <__libc_init_array+0x40>)
 8003914:	4c0a      	ldr	r4, [pc, #40]	; (8003940 <__libc_init_array+0x44>)
 8003916:	1ba4      	subs	r4, r4, r6
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	42a5      	cmp	r5, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003924:	4798      	blx	r3
 8003926:	3501      	adds	r5, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392e:	4798      	blx	r3
 8003930:	3501      	adds	r5, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	08004824 	.word	0x08004824
 8003938:	08004824 	.word	0x08004824
 800393c:	08004824 	.word	0x08004824
 8003940:	08004828 	.word	0x08004828

08003944 <memset>:
 8003944:	4603      	mov	r3, r0
 8003946:	4402      	add	r2, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <iprintf>:
 8003954:	b40f      	push	{r0, r1, r2, r3}
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <iprintf+0x2c>)
 8003958:	b513      	push	{r0, r1, r4, lr}
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	b124      	cbz	r4, 8003968 <iprintf+0x14>
 800395e:	69a3      	ldr	r3, [r4, #24]
 8003960:	b913      	cbnz	r3, 8003968 <iprintf+0x14>
 8003962:	4620      	mov	r0, r4
 8003964:	f000 f84e 	bl	8003a04 <__sinit>
 8003968:	ab05      	add	r3, sp, #20
 800396a:	9a04      	ldr	r2, [sp, #16]
 800396c:	68a1      	ldr	r1, [r4, #8]
 800396e:	4620      	mov	r0, r4
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	f000 f953 	bl	8003c1c <_vfiprintf_r>
 8003976:	b002      	add	sp, #8
 8003978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397c:	b004      	add	sp, #16
 800397e:	4770      	bx	lr
 8003980:	2000000c 	.word	0x2000000c

08003984 <std>:
 8003984:	2300      	movs	r3, #0
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	e9c0 3300 	strd	r3, r3, [r0]
 800398e:	6083      	str	r3, [r0, #8]
 8003990:	8181      	strh	r1, [r0, #12]
 8003992:	6643      	str	r3, [r0, #100]	; 0x64
 8003994:	81c2      	strh	r2, [r0, #14]
 8003996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800399a:	6183      	str	r3, [r0, #24]
 800399c:	4619      	mov	r1, r3
 800399e:	2208      	movs	r2, #8
 80039a0:	305c      	adds	r0, #92	; 0x5c
 80039a2:	f7ff ffcf 	bl	8003944 <memset>
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <std+0x38>)
 80039a8:	6224      	str	r4, [r4, #32]
 80039aa:	6263      	str	r3, [r4, #36]	; 0x24
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <std+0x3c>)
 80039ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <std+0x40>)
 80039b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <std+0x44>)
 80039b6:	6323      	str	r3, [r4, #48]	; 0x30
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	bf00      	nop
 80039bc:	08004179 	.word	0x08004179
 80039c0:	0800419b 	.word	0x0800419b
 80039c4:	080041d3 	.word	0x080041d3
 80039c8:	080041f7 	.word	0x080041f7

080039cc <_cleanup_r>:
 80039cc:	4901      	ldr	r1, [pc, #4]	; (80039d4 <_cleanup_r+0x8>)
 80039ce:	f000 b885 	b.w	8003adc <_fwalk_reent>
 80039d2:	bf00      	nop
 80039d4:	080044d1 	.word	0x080044d1

080039d8 <__sfmoreglue>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	2568      	movs	r5, #104	; 0x68
 80039dc:	1e4a      	subs	r2, r1, #1
 80039de:	4355      	muls	r5, r2
 80039e0:	460e      	mov	r6, r1
 80039e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039e6:	f000 f897 	bl	8003b18 <_malloc_r>
 80039ea:	4604      	mov	r4, r0
 80039ec:	b140      	cbz	r0, 8003a00 <__sfmoreglue+0x28>
 80039ee:	2100      	movs	r1, #0
 80039f0:	e9c0 1600 	strd	r1, r6, [r0]
 80039f4:	300c      	adds	r0, #12
 80039f6:	60a0      	str	r0, [r4, #8]
 80039f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039fc:	f7ff ffa2 	bl	8003944 <memset>
 8003a00:	4620      	mov	r0, r4
 8003a02:	bd70      	pop	{r4, r5, r6, pc}

08003a04 <__sinit>:
 8003a04:	6983      	ldr	r3, [r0, #24]
 8003a06:	b510      	push	{r4, lr}
 8003a08:	4604      	mov	r4, r0
 8003a0a:	bb33      	cbnz	r3, 8003a5a <__sinit+0x56>
 8003a0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003a10:	6503      	str	r3, [r0, #80]	; 0x50
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <__sinit+0x58>)
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <__sinit+0x5c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6282      	str	r2, [r0, #40]	; 0x28
 8003a1a:	4298      	cmp	r0, r3
 8003a1c:	bf04      	itt	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	6183      	streq	r3, [r0, #24]
 8003a22:	f000 f81f 	bl	8003a64 <__sfp>
 8003a26:	6060      	str	r0, [r4, #4]
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f81b 	bl	8003a64 <__sfp>
 8003a2e:	60a0      	str	r0, [r4, #8]
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 f817 	bl	8003a64 <__sfp>
 8003a36:	2200      	movs	r2, #0
 8003a38:	60e0      	str	r0, [r4, #12]
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	6860      	ldr	r0, [r4, #4]
 8003a3e:	f7ff ffa1 	bl	8003984 <std>
 8003a42:	2201      	movs	r2, #1
 8003a44:	2109      	movs	r1, #9
 8003a46:	68a0      	ldr	r0, [r4, #8]
 8003a48:	f7ff ff9c 	bl	8003984 <std>
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	2112      	movs	r1, #18
 8003a50:	68e0      	ldr	r0, [r4, #12]
 8003a52:	f7ff ff97 	bl	8003984 <std>
 8003a56:	2301      	movs	r3, #1
 8003a58:	61a3      	str	r3, [r4, #24]
 8003a5a:	bd10      	pop	{r4, pc}
 8003a5c:	0800478c 	.word	0x0800478c
 8003a60:	080039cd 	.word	0x080039cd

08003a64 <__sfp>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <__sfp+0x70>)
 8003a68:	4607      	mov	r7, r0
 8003a6a:	681e      	ldr	r6, [r3, #0]
 8003a6c:	69b3      	ldr	r3, [r6, #24]
 8003a6e:	b913      	cbnz	r3, 8003a76 <__sfp+0x12>
 8003a70:	4630      	mov	r0, r6
 8003a72:	f7ff ffc7 	bl	8003a04 <__sinit>
 8003a76:	3648      	adds	r6, #72	; 0x48
 8003a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	d503      	bpl.n	8003a88 <__sfp+0x24>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	b133      	cbz	r3, 8003a92 <__sfp+0x2e>
 8003a84:	6836      	ldr	r6, [r6, #0]
 8003a86:	e7f7      	b.n	8003a78 <__sfp+0x14>
 8003a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a8c:	b16d      	cbz	r5, 8003aaa <__sfp+0x46>
 8003a8e:	3468      	adds	r4, #104	; 0x68
 8003a90:	e7f4      	b.n	8003a7c <__sfp+0x18>
 8003a92:	2104      	movs	r1, #4
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7ff ff9f 	bl	80039d8 <__sfmoreglue>
 8003a9a:	6030      	str	r0, [r6, #0]
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d1f1      	bne.n	8003a84 <__sfp+0x20>
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <__sfp+0x74>)
 8003aac:	6665      	str	r5, [r4, #100]	; 0x64
 8003aae:	e9c4 5500 	strd	r5, r5, [r4]
 8003ab2:	60a5      	str	r5, [r4, #8]
 8003ab4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ab8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ac4:	f7ff ff3e 	bl	8003944 <memset>
 8003ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ad0:	e7e9      	b.n	8003aa6 <__sfp+0x42>
 8003ad2:	bf00      	nop
 8003ad4:	0800478c 	.word	0x0800478c
 8003ad8:	ffff0001 	.word	0xffff0001

08003adc <_fwalk_reent>:
 8003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	4689      	mov	r9, r1
 8003ae4:	2600      	movs	r6, #0
 8003ae6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aea:	b914      	cbnz	r4, 8003af2 <_fwalk_reent+0x16>
 8003aec:	4630      	mov	r0, r6
 8003aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003af6:	3f01      	subs	r7, #1
 8003af8:	d501      	bpl.n	8003afe <_fwalk_reent+0x22>
 8003afa:	6824      	ldr	r4, [r4, #0]
 8003afc:	e7f5      	b.n	8003aea <_fwalk_reent+0xe>
 8003afe:	89ab      	ldrh	r3, [r5, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d907      	bls.n	8003b14 <_fwalk_reent+0x38>
 8003b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <_fwalk_reent+0x38>
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4640      	mov	r0, r8
 8003b10:	47c8      	blx	r9
 8003b12:	4306      	orrs	r6, r0
 8003b14:	3568      	adds	r5, #104	; 0x68
 8003b16:	e7ee      	b.n	8003af6 <_fwalk_reent+0x1a>

08003b18 <_malloc_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	1ccd      	adds	r5, r1, #3
 8003b1c:	f025 0503 	bic.w	r5, r5, #3
 8003b20:	3508      	adds	r5, #8
 8003b22:	2d0c      	cmp	r5, #12
 8003b24:	bf38      	it	cc
 8003b26:	250c      	movcc	r5, #12
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	db01      	blt.n	8003b32 <_malloc_r+0x1a>
 8003b2e:	42a9      	cmp	r1, r5
 8003b30:	d903      	bls.n	8003b3a <_malloc_r+0x22>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	2000      	movs	r0, #0
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	f000 fd77 	bl	800462c <__malloc_lock>
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <_malloc_r+0xac>)
 8003b40:	6814      	ldr	r4, [r2, #0]
 8003b42:	4621      	mov	r1, r4
 8003b44:	b991      	cbnz	r1, 8003b6c <_malloc_r+0x54>
 8003b46:	4c20      	ldr	r4, [pc, #128]	; (8003bc8 <_malloc_r+0xb0>)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	b91b      	cbnz	r3, 8003b54 <_malloc_r+0x3c>
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 fb03 	bl	8004158 <_sbrk_r>
 8003b52:	6020      	str	r0, [r4, #0]
 8003b54:	4629      	mov	r1, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 fafe 	bl	8004158 <_sbrk_r>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d124      	bne.n	8003baa <_malloc_r+0x92>
 8003b60:	230c      	movs	r3, #12
 8003b62:	4630      	mov	r0, r6
 8003b64:	6033      	str	r3, [r6, #0]
 8003b66:	f000 fd62 	bl	800462e <__malloc_unlock>
 8003b6a:	e7e4      	b.n	8003b36 <_malloc_r+0x1e>
 8003b6c:	680b      	ldr	r3, [r1, #0]
 8003b6e:	1b5b      	subs	r3, r3, r5
 8003b70:	d418      	bmi.n	8003ba4 <_malloc_r+0x8c>
 8003b72:	2b0b      	cmp	r3, #11
 8003b74:	d90f      	bls.n	8003b96 <_malloc_r+0x7e>
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	18cc      	adds	r4, r1, r3
 8003b7a:	50cd      	str	r5, [r1, r3]
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	f000 fd56 	bl	800462e <__malloc_unlock>
 8003b82:	f104 000b 	add.w	r0, r4, #11
 8003b86:	1d23      	adds	r3, r4, #4
 8003b88:	f020 0007 	bic.w	r0, r0, #7
 8003b8c:	1ac3      	subs	r3, r0, r3
 8003b8e:	d0d3      	beq.n	8003b38 <_malloc_r+0x20>
 8003b90:	425a      	negs	r2, r3
 8003b92:	50e2      	str	r2, [r4, r3]
 8003b94:	e7d0      	b.n	8003b38 <_malloc_r+0x20>
 8003b96:	684b      	ldr	r3, [r1, #4]
 8003b98:	428c      	cmp	r4, r1
 8003b9a:	bf16      	itet	ne
 8003b9c:	6063      	strne	r3, [r4, #4]
 8003b9e:	6013      	streq	r3, [r2, #0]
 8003ba0:	460c      	movne	r4, r1
 8003ba2:	e7eb      	b.n	8003b7c <_malloc_r+0x64>
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	6849      	ldr	r1, [r1, #4]
 8003ba8:	e7cc      	b.n	8003b44 <_malloc_r+0x2c>
 8003baa:	1cc4      	adds	r4, r0, #3
 8003bac:	f024 0403 	bic.w	r4, r4, #3
 8003bb0:	42a0      	cmp	r0, r4
 8003bb2:	d005      	beq.n	8003bc0 <_malloc_r+0xa8>
 8003bb4:	1a21      	subs	r1, r4, r0
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 face 	bl	8004158 <_sbrk_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d0cf      	beq.n	8003b60 <_malloc_r+0x48>
 8003bc0:	6025      	str	r5, [r4, #0]
 8003bc2:	e7db      	b.n	8003b7c <_malloc_r+0x64>
 8003bc4:	2000009c 	.word	0x2000009c
 8003bc8:	200000a0 	.word	0x200000a0

08003bcc <__sfputc_r>:
 8003bcc:	6893      	ldr	r3, [r2, #8]
 8003bce:	b410      	push	{r4}
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	da07      	bge.n	8003be8 <__sfputc_r+0x1c>
 8003bd8:	6994      	ldr	r4, [r2, #24]
 8003bda:	42a3      	cmp	r3, r4
 8003bdc:	db01      	blt.n	8003be2 <__sfputc_r+0x16>
 8003bde:	290a      	cmp	r1, #10
 8003be0:	d102      	bne.n	8003be8 <__sfputc_r+0x1c>
 8003be2:	bc10      	pop	{r4}
 8003be4:	f000 bb0c 	b.w	8004200 <__swbuf_r>
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	1c58      	adds	r0, r3, #1
 8003bec:	6010      	str	r0, [r2, #0]
 8003bee:	7019      	strb	r1, [r3, #0]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	bc10      	pop	{r4}
 8003bf4:	4770      	bx	lr

08003bf6 <__sfputs_r>:
 8003bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	460f      	mov	r7, r1
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	18d5      	adds	r5, r2, r3
 8003c00:	42ac      	cmp	r4, r5
 8003c02:	d101      	bne.n	8003c08 <__sfputs_r+0x12>
 8003c04:	2000      	movs	r0, #0
 8003c06:	e007      	b.n	8003c18 <__sfputs_r+0x22>
 8003c08:	463a      	mov	r2, r7
 8003c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0e:	4630      	mov	r0, r6
 8003c10:	f7ff ffdc 	bl	8003bcc <__sfputc_r>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d1f3      	bne.n	8003c00 <__sfputs_r+0xa>
 8003c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c1c <_vfiprintf_r>:
 8003c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c20:	460c      	mov	r4, r1
 8003c22:	b09d      	sub	sp, #116	; 0x74
 8003c24:	4617      	mov	r7, r2
 8003c26:	461d      	mov	r5, r3
 8003c28:	4606      	mov	r6, r0
 8003c2a:	b118      	cbz	r0, 8003c34 <_vfiprintf_r+0x18>
 8003c2c:	6983      	ldr	r3, [r0, #24]
 8003c2e:	b90b      	cbnz	r3, 8003c34 <_vfiprintf_r+0x18>
 8003c30:	f7ff fee8 	bl	8003a04 <__sinit>
 8003c34:	4b7c      	ldr	r3, [pc, #496]	; (8003e28 <_vfiprintf_r+0x20c>)
 8003c36:	429c      	cmp	r4, r3
 8003c38:	d158      	bne.n	8003cec <_vfiprintf_r+0xd0>
 8003c3a:	6874      	ldr	r4, [r6, #4]
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	0718      	lsls	r0, r3, #28
 8003c40:	d55e      	bpl.n	8003d00 <_vfiprintf_r+0xe4>
 8003c42:	6923      	ldr	r3, [r4, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05b      	beq.n	8003d00 <_vfiprintf_r+0xe4>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c52:	2330      	movs	r3, #48	; 0x30
 8003c54:	f04f 0b01 	mov.w	fp, #1
 8003c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c5c:	9503      	str	r5, [sp, #12]
 8003c5e:	46b8      	mov	r8, r7
 8003c60:	4645      	mov	r5, r8
 8003c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c66:	b10b      	cbz	r3, 8003c6c <_vfiprintf_r+0x50>
 8003c68:	2b25      	cmp	r3, #37	; 0x25
 8003c6a:	d154      	bne.n	8003d16 <_vfiprintf_r+0xfa>
 8003c6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c70:	d00b      	beq.n	8003c8a <_vfiprintf_r+0x6e>
 8003c72:	4653      	mov	r3, sl
 8003c74:	463a      	mov	r2, r7
 8003c76:	4621      	mov	r1, r4
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff ffbc 	bl	8003bf6 <__sfputs_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f000 80c2 	beq.w	8003e08 <_vfiprintf_r+0x1ec>
 8003c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c86:	4453      	add	r3, sl
 8003c88:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8a:	f898 3000 	ldrb.w	r3, [r8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80ba 	beq.w	8003e08 <_vfiprintf_r+0x1ec>
 8003c94:	2300      	movs	r3, #0
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c9e:	9304      	str	r3, [sp, #16]
 8003ca0:	9307      	str	r3, [sp, #28]
 8003ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ca8:	46a8      	mov	r8, r5
 8003caa:	2205      	movs	r2, #5
 8003cac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003cb0:	485e      	ldr	r0, [pc, #376]	; (8003e2c <_vfiprintf_r+0x210>)
 8003cb2:	f000 fcad 	bl	8004610 <memchr>
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	bb78      	cbnz	r0, 8003d1a <_vfiprintf_r+0xfe>
 8003cba:	06d9      	lsls	r1, r3, #27
 8003cbc:	bf44      	itt	mi
 8003cbe:	2220      	movmi	r2, #32
 8003cc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cc4:	071a      	lsls	r2, r3, #28
 8003cc6:	bf44      	itt	mi
 8003cc8:	222b      	movmi	r2, #43	; 0x2b
 8003cca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cce:	782a      	ldrb	r2, [r5, #0]
 8003cd0:	2a2a      	cmp	r2, #42	; 0x2a
 8003cd2:	d02a      	beq.n	8003d2a <_vfiprintf_r+0x10e>
 8003cd4:	46a8      	mov	r8, r5
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	250a      	movs	r5, #10
 8003cda:	9a07      	ldr	r2, [sp, #28]
 8003cdc:	4641      	mov	r1, r8
 8003cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ce2:	3b30      	subs	r3, #48	; 0x30
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d969      	bls.n	8003dbc <_vfiprintf_r+0x1a0>
 8003ce8:	b360      	cbz	r0, 8003d44 <_vfiprintf_r+0x128>
 8003cea:	e024      	b.n	8003d36 <_vfiprintf_r+0x11a>
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <_vfiprintf_r+0x214>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d101      	bne.n	8003cf6 <_vfiprintf_r+0xda>
 8003cf2:	68b4      	ldr	r4, [r6, #8]
 8003cf4:	e7a2      	b.n	8003c3c <_vfiprintf_r+0x20>
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <_vfiprintf_r+0x218>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	bf08      	it	eq
 8003cfc:	68f4      	ldreq	r4, [r6, #12]
 8003cfe:	e79d      	b.n	8003c3c <_vfiprintf_r+0x20>
 8003d00:	4621      	mov	r1, r4
 8003d02:	4630      	mov	r0, r6
 8003d04:	f000 fae0 	bl	80042c8 <__swsetup_r>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d09d      	beq.n	8003c48 <_vfiprintf_r+0x2c>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d10:	b01d      	add	sp, #116	; 0x74
 8003d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d16:	46a8      	mov	r8, r5
 8003d18:	e7a2      	b.n	8003c60 <_vfiprintf_r+0x44>
 8003d1a:	4a44      	ldr	r2, [pc, #272]	; (8003e2c <_vfiprintf_r+0x210>)
 8003d1c:	4645      	mov	r5, r8
 8003d1e:	1a80      	subs	r0, r0, r2
 8003d20:	fa0b f000 	lsl.w	r0, fp, r0
 8003d24:	4318      	orrs	r0, r3
 8003d26:	9004      	str	r0, [sp, #16]
 8003d28:	e7be      	b.n	8003ca8 <_vfiprintf_r+0x8c>
 8003d2a:	9a03      	ldr	r2, [sp, #12]
 8003d2c:	1d11      	adds	r1, r2, #4
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	9103      	str	r1, [sp, #12]
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	db01      	blt.n	8003d3a <_vfiprintf_r+0x11e>
 8003d36:	9207      	str	r2, [sp, #28]
 8003d38:	e004      	b.n	8003d44 <_vfiprintf_r+0x128>
 8003d3a:	4252      	negs	r2, r2
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	9207      	str	r2, [sp, #28]
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	f898 3000 	ldrb.w	r3, [r8]
 8003d48:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4a:	d10e      	bne.n	8003d6a <_vfiprintf_r+0x14e>
 8003d4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d50:	2b2a      	cmp	r3, #42	; 0x2a
 8003d52:	d138      	bne.n	8003dc6 <_vfiprintf_r+0x1aa>
 8003d54:	9b03      	ldr	r3, [sp, #12]
 8003d56:	f108 0802 	add.w	r8, r8, #2
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	9203      	str	r2, [sp, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfb8      	it	lt
 8003d64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d68:	9305      	str	r3, [sp, #20]
 8003d6a:	4d33      	ldr	r5, [pc, #204]	; (8003e38 <_vfiprintf_r+0x21c>)
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	f898 1000 	ldrb.w	r1, [r8]
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 fc4c 	bl	8004610 <memchr>
 8003d78:	b140      	cbz	r0, 8003d8c <_vfiprintf_r+0x170>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	1b40      	subs	r0, r0, r5
 8003d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d82:	9b04      	ldr	r3, [sp, #16]
 8003d84:	f108 0801 	add.w	r8, r8, #1
 8003d88:	4303      	orrs	r3, r0
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	f898 1000 	ldrb.w	r1, [r8]
 8003d90:	2206      	movs	r2, #6
 8003d92:	482a      	ldr	r0, [pc, #168]	; (8003e3c <_vfiprintf_r+0x220>)
 8003d94:	f108 0701 	add.w	r7, r8, #1
 8003d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d9c:	f000 fc38 	bl	8004610 <memchr>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d037      	beq.n	8003e14 <_vfiprintf_r+0x1f8>
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <_vfiprintf_r+0x224>)
 8003da6:	bb1b      	cbnz	r3, 8003df0 <_vfiprintf_r+0x1d4>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	3307      	adds	r3, #7
 8003dac:	f023 0307 	bic.w	r3, r3, #7
 8003db0:	3308      	adds	r3, #8
 8003db2:	9303      	str	r3, [sp, #12]
 8003db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db6:	444b      	add	r3, r9
 8003db8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dba:	e750      	b.n	8003c5e <_vfiprintf_r+0x42>
 8003dbc:	fb05 3202 	mla	r2, r5, r2, r3
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	4688      	mov	r8, r1
 8003dc4:	e78a      	b.n	8003cdc <_vfiprintf_r+0xc0>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	250a      	movs	r5, #10
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f108 0801 	add.w	r8, r8, #1
 8003dd0:	9305      	str	r3, [sp, #20]
 8003dd2:	4640      	mov	r0, r8
 8003dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dd8:	3a30      	subs	r2, #48	; 0x30
 8003dda:	2a09      	cmp	r2, #9
 8003ddc:	d903      	bls.n	8003de6 <_vfiprintf_r+0x1ca>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0c3      	beq.n	8003d6a <_vfiprintf_r+0x14e>
 8003de2:	9105      	str	r1, [sp, #20]
 8003de4:	e7c1      	b.n	8003d6a <_vfiprintf_r+0x14e>
 8003de6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dea:	2301      	movs	r3, #1
 8003dec:	4680      	mov	r8, r0
 8003dee:	e7f0      	b.n	8003dd2 <_vfiprintf_r+0x1b6>
 8003df0:	ab03      	add	r3, sp, #12
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	4622      	mov	r2, r4
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <_vfiprintf_r+0x228>)
 8003df8:	a904      	add	r1, sp, #16
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f3af 8000 	nop.w
 8003e00:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003e04:	4681      	mov	r9, r0
 8003e06:	d1d5      	bne.n	8003db4 <_vfiprintf_r+0x198>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	065b      	lsls	r3, r3, #25
 8003e0c:	f53f af7e 	bmi.w	8003d0c <_vfiprintf_r+0xf0>
 8003e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e12:	e77d      	b.n	8003d10 <_vfiprintf_r+0xf4>
 8003e14:	ab03      	add	r3, sp, #12
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4622      	mov	r2, r4
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <_vfiprintf_r+0x228>)
 8003e1c:	a904      	add	r1, sp, #16
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 f888 	bl	8003f34 <_printf_i>
 8003e24:	e7ec      	b.n	8003e00 <_vfiprintf_r+0x1e4>
 8003e26:	bf00      	nop
 8003e28:	080047b0 	.word	0x080047b0
 8003e2c:	080047f0 	.word	0x080047f0
 8003e30:	080047d0 	.word	0x080047d0
 8003e34:	08004790 	.word	0x08004790
 8003e38:	080047f6 	.word	0x080047f6
 8003e3c:	080047fa 	.word	0x080047fa
 8003e40:	00000000 	.word	0x00000000
 8003e44:	08003bf7 	.word	0x08003bf7

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4691      	mov	r9, r2
 8003e4e:	461f      	mov	r7, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	4606      	mov	r6, r0
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bfb8      	it	lt
 8003e5a:	4613      	movlt	r3, r2
 8003e5c:	f8c9 3000 	str.w	r3, [r9]
 8003e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e64:	460c      	mov	r4, r1
 8003e66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e6a:	b112      	cbz	r2, 8003e72 <_printf_common+0x2a>
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f8c9 3000 	str.w	r3, [r9]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	0699      	lsls	r1, r3, #26
 8003e76:	bf42      	ittt	mi
 8003e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e7c:	3302      	addmi	r3, #2
 8003e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e82:	6825      	ldr	r5, [r4, #0]
 8003e84:	f015 0506 	ands.w	r5, r5, #6
 8003e88:	d107      	bne.n	8003e9a <_printf_common+0x52>
 8003e8a:	f104 0a19 	add.w	sl, r4, #25
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	f8d9 2000 	ldr.w	r2, [r9]
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	42ab      	cmp	r3, r5
 8003e98:	dc29      	bgt.n	8003eee <_printf_common+0xa6>
 8003e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	3300      	adds	r3, #0
 8003ea2:	bf18      	it	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	0692      	lsls	r2, r2, #26
 8003ea8:	d42e      	bmi.n	8003f08 <_printf_common+0xc0>
 8003eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eae:	4639      	mov	r1, r7
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	47c0      	blx	r8
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d021      	beq.n	8003efc <_printf_common+0xb4>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	68e5      	ldr	r5, [r4, #12]
 8003ebc:	f003 0306 	and.w	r3, r3, #6
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	bf18      	it	ne
 8003ec4:	2500      	movne	r5, #0
 8003ec6:	f8d9 2000 	ldr.w	r2, [r9]
 8003eca:	f04f 0900 	mov.w	r9, #0
 8003ece:	bf08      	it	eq
 8003ed0:	1aad      	subeq	r5, r5, r2
 8003ed2:	68a3      	ldr	r3, [r4, #8]
 8003ed4:	6922      	ldr	r2, [r4, #16]
 8003ed6:	bf08      	it	eq
 8003ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003edc:	4293      	cmp	r3, r2
 8003ede:	bfc4      	itt	gt
 8003ee0:	1a9b      	subgt	r3, r3, r2
 8003ee2:	18ed      	addgt	r5, r5, r3
 8003ee4:	341a      	adds	r4, #26
 8003ee6:	454d      	cmp	r5, r9
 8003ee8:	d11a      	bne.n	8003f20 <_printf_common+0xd8>
 8003eea:	2000      	movs	r0, #0
 8003eec:	e008      	b.n	8003f00 <_printf_common+0xb8>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4652      	mov	r2, sl
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	47c0      	blx	r8
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d103      	bne.n	8003f04 <_printf_common+0xbc>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7c2      	b.n	8003e8e <_printf_common+0x46>
 8003f08:	2030      	movs	r0, #48	; 0x30
 8003f0a:	18e1      	adds	r1, r4, r3
 8003f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f16:	4422      	add	r2, r4
 8003f18:	3302      	adds	r3, #2
 8003f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f1e:	e7c4      	b.n	8003eaa <_printf_common+0x62>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4622      	mov	r2, r4
 8003f24:	4639      	mov	r1, r7
 8003f26:	4630      	mov	r0, r6
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0e6      	beq.n	8003efc <_printf_common+0xb4>
 8003f2e:	f109 0901 	add.w	r9, r9, #1
 8003f32:	e7d8      	b.n	8003ee6 <_printf_common+0x9e>

08003f34 <_printf_i>:
 8003f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	7e09      	ldrb	r1, [r1, #24]
 8003f40:	b085      	sub	sp, #20
 8003f42:	296e      	cmp	r1, #110	; 0x6e
 8003f44:	4617      	mov	r7, r2
 8003f46:	4606      	mov	r6, r0
 8003f48:	4698      	mov	r8, r3
 8003f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f4c:	f000 80b3 	beq.w	80040b6 <_printf_i+0x182>
 8003f50:	d822      	bhi.n	8003f98 <_printf_i+0x64>
 8003f52:	2963      	cmp	r1, #99	; 0x63
 8003f54:	d036      	beq.n	8003fc4 <_printf_i+0x90>
 8003f56:	d80a      	bhi.n	8003f6e <_printf_i+0x3a>
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	f000 80b9 	beq.w	80040d0 <_printf_i+0x19c>
 8003f5e:	2958      	cmp	r1, #88	; 0x58
 8003f60:	f000 8083 	beq.w	800406a <_printf_i+0x136>
 8003f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f6c:	e032      	b.n	8003fd4 <_printf_i+0xa0>
 8003f6e:	2964      	cmp	r1, #100	; 0x64
 8003f70:	d001      	beq.n	8003f76 <_printf_i+0x42>
 8003f72:	2969      	cmp	r1, #105	; 0x69
 8003f74:	d1f6      	bne.n	8003f64 <_printf_i+0x30>
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	0605      	lsls	r5, r0, #24
 8003f7c:	f103 0104 	add.w	r1, r3, #4
 8003f80:	d52a      	bpl.n	8003fd8 <_printf_i+0xa4>
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	da03      	bge.n	8003f92 <_printf_i+0x5e>
 8003f8a:	222d      	movs	r2, #45	; 0x2d
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f92:	486f      	ldr	r0, [pc, #444]	; (8004150 <_printf_i+0x21c>)
 8003f94:	220a      	movs	r2, #10
 8003f96:	e039      	b.n	800400c <_printf_i+0xd8>
 8003f98:	2973      	cmp	r1, #115	; 0x73
 8003f9a:	f000 809d 	beq.w	80040d8 <_printf_i+0x1a4>
 8003f9e:	d808      	bhi.n	8003fb2 <_printf_i+0x7e>
 8003fa0:	296f      	cmp	r1, #111	; 0x6f
 8003fa2:	d020      	beq.n	8003fe6 <_printf_i+0xb2>
 8003fa4:	2970      	cmp	r1, #112	; 0x70
 8003fa6:	d1dd      	bne.n	8003f64 <_printf_i+0x30>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	e003      	b.n	8003fba <_printf_i+0x86>
 8003fb2:	2975      	cmp	r1, #117	; 0x75
 8003fb4:	d017      	beq.n	8003fe6 <_printf_i+0xb2>
 8003fb6:	2978      	cmp	r1, #120	; 0x78
 8003fb8:	d1d4      	bne.n	8003f64 <_printf_i+0x30>
 8003fba:	2378      	movs	r3, #120	; 0x78
 8003fbc:	4865      	ldr	r0, [pc, #404]	; (8004154 <_printf_i+0x220>)
 8003fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fc2:	e055      	b.n	8004070 <_printf_i+0x13c>
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6011      	str	r1, [r2, #0]
 8003fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e08c      	b.n	80040f2 <_printf_i+0x1be>
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fde:	6011      	str	r1, [r2, #0]
 8003fe0:	bf18      	it	ne
 8003fe2:	b21b      	sxthne	r3, r3
 8003fe4:	e7cf      	b.n	8003f86 <_printf_i+0x52>
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	6825      	ldr	r5, [r4, #0]
 8003fea:	1d18      	adds	r0, r3, #4
 8003fec:	6010      	str	r0, [r2, #0]
 8003fee:	0628      	lsls	r0, r5, #24
 8003ff0:	d501      	bpl.n	8003ff6 <_printf_i+0xc2>
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	e002      	b.n	8003ffc <_printf_i+0xc8>
 8003ff6:	0668      	lsls	r0, r5, #25
 8003ff8:	d5fb      	bpl.n	8003ff2 <_printf_i+0xbe>
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	296f      	cmp	r1, #111	; 0x6f
 8003ffe:	bf14      	ite	ne
 8004000:	220a      	movne	r2, #10
 8004002:	2208      	moveq	r2, #8
 8004004:	4852      	ldr	r0, [pc, #328]	; (8004150 <_printf_i+0x21c>)
 8004006:	2100      	movs	r1, #0
 8004008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800400c:	6865      	ldr	r5, [r4, #4]
 800400e:	2d00      	cmp	r5, #0
 8004010:	60a5      	str	r5, [r4, #8]
 8004012:	f2c0 8095 	blt.w	8004140 <_printf_i+0x20c>
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	f021 0104 	bic.w	r1, r1, #4
 800401c:	6021      	str	r1, [r4, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13d      	bne.n	800409e <_printf_i+0x16a>
 8004022:	2d00      	cmp	r5, #0
 8004024:	f040 808e 	bne.w	8004144 <_printf_i+0x210>
 8004028:	4665      	mov	r5, ip
 800402a:	2a08      	cmp	r2, #8
 800402c:	d10b      	bne.n	8004046 <_printf_i+0x112>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	07db      	lsls	r3, r3, #31
 8004032:	d508      	bpl.n	8004046 <_printf_i+0x112>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	bfde      	ittt	le
 800403c:	2330      	movle	r3, #48	; 0x30
 800403e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004042:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004046:	ebac 0305 	sub.w	r3, ip, r5
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	f8cd 8000 	str.w	r8, [sp]
 8004050:	463b      	mov	r3, r7
 8004052:	aa03      	add	r2, sp, #12
 8004054:	4621      	mov	r1, r4
 8004056:	4630      	mov	r0, r6
 8004058:	f7ff fef6 	bl	8003e48 <_printf_common>
 800405c:	3001      	adds	r0, #1
 800405e:	d14d      	bne.n	80040fc <_printf_i+0x1c8>
 8004060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004064:	b005      	add	sp, #20
 8004066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800406a:	4839      	ldr	r0, [pc, #228]	; (8004150 <_printf_i+0x21c>)
 800406c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	6821      	ldr	r1, [r4, #0]
 8004074:	1d1d      	adds	r5, r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6015      	str	r5, [r2, #0]
 800407a:	060a      	lsls	r2, r1, #24
 800407c:	d50b      	bpl.n	8004096 <_printf_i+0x162>
 800407e:	07ca      	lsls	r2, r1, #31
 8004080:	bf44      	itt	mi
 8004082:	f041 0120 	orrmi.w	r1, r1, #32
 8004086:	6021      	strmi	r1, [r4, #0]
 8004088:	b91b      	cbnz	r3, 8004092 <_printf_i+0x15e>
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	f022 0220 	bic.w	r2, r2, #32
 8004090:	6022      	str	r2, [r4, #0]
 8004092:	2210      	movs	r2, #16
 8004094:	e7b7      	b.n	8004006 <_printf_i+0xd2>
 8004096:	064d      	lsls	r5, r1, #25
 8004098:	bf48      	it	mi
 800409a:	b29b      	uxthmi	r3, r3
 800409c:	e7ef      	b.n	800407e <_printf_i+0x14a>
 800409e:	4665      	mov	r5, ip
 80040a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040a4:	fb02 3311 	mls	r3, r2, r1, r3
 80040a8:	5cc3      	ldrb	r3, [r0, r3]
 80040aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040ae:	460b      	mov	r3, r1
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d1f5      	bne.n	80040a0 <_printf_i+0x16c>
 80040b4:	e7b9      	b.n	800402a <_printf_i+0xf6>
 80040b6:	6813      	ldr	r3, [r2, #0]
 80040b8:	6825      	ldr	r5, [r4, #0]
 80040ba:	1d18      	adds	r0, r3, #4
 80040bc:	6961      	ldr	r1, [r4, #20]
 80040be:	6010      	str	r0, [r2, #0]
 80040c0:	0628      	lsls	r0, r5, #24
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	d501      	bpl.n	80040ca <_printf_i+0x196>
 80040c6:	6019      	str	r1, [r3, #0]
 80040c8:	e002      	b.n	80040d0 <_printf_i+0x19c>
 80040ca:	066a      	lsls	r2, r5, #25
 80040cc:	d5fb      	bpl.n	80040c6 <_printf_i+0x192>
 80040ce:	8019      	strh	r1, [r3, #0]
 80040d0:	2300      	movs	r3, #0
 80040d2:	4665      	mov	r5, ip
 80040d4:	6123      	str	r3, [r4, #16]
 80040d6:	e7b9      	b.n	800404c <_printf_i+0x118>
 80040d8:	6813      	ldr	r3, [r2, #0]
 80040da:	1d19      	adds	r1, r3, #4
 80040dc:	6011      	str	r1, [r2, #0]
 80040de:	681d      	ldr	r5, [r3, #0]
 80040e0:	6862      	ldr	r2, [r4, #4]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 fa93 	bl	8004610 <memchr>
 80040ea:	b108      	cbz	r0, 80040f0 <_printf_i+0x1bc>
 80040ec:	1b40      	subs	r0, r0, r5
 80040ee:	6060      	str	r0, [r4, #4]
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	2300      	movs	r3, #0
 80040f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fa:	e7a7      	b.n	800404c <_printf_i+0x118>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	462a      	mov	r2, r5
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d0aa      	beq.n	8004060 <_printf_i+0x12c>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	079b      	lsls	r3, r3, #30
 800410e:	d413      	bmi.n	8004138 <_printf_i+0x204>
 8004110:	68e0      	ldr	r0, [r4, #12]
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	4298      	cmp	r0, r3
 8004116:	bfb8      	it	lt
 8004118:	4618      	movlt	r0, r3
 800411a:	e7a3      	b.n	8004064 <_printf_i+0x130>
 800411c:	2301      	movs	r3, #1
 800411e:	464a      	mov	r2, r9
 8004120:	4639      	mov	r1, r7
 8004122:	4630      	mov	r0, r6
 8004124:	47c0      	blx	r8
 8004126:	3001      	adds	r0, #1
 8004128:	d09a      	beq.n	8004060 <_printf_i+0x12c>
 800412a:	3501      	adds	r5, #1
 800412c:	68e3      	ldr	r3, [r4, #12]
 800412e:	9a03      	ldr	r2, [sp, #12]
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	42ab      	cmp	r3, r5
 8004134:	dcf2      	bgt.n	800411c <_printf_i+0x1e8>
 8004136:	e7eb      	b.n	8004110 <_printf_i+0x1dc>
 8004138:	2500      	movs	r5, #0
 800413a:	f104 0919 	add.w	r9, r4, #25
 800413e:	e7f5      	b.n	800412c <_printf_i+0x1f8>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ac      	bne.n	800409e <_printf_i+0x16a>
 8004144:	7803      	ldrb	r3, [r0, #0]
 8004146:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800414a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414e:	e76c      	b.n	800402a <_printf_i+0xf6>
 8004150:	08004801 	.word	0x08004801
 8004154:	08004812 	.word	0x08004812

08004158 <_sbrk_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	2300      	movs	r3, #0
 800415c:	4c05      	ldr	r4, [pc, #20]	; (8004174 <_sbrk_r+0x1c>)
 800415e:	4605      	mov	r5, r0
 8004160:	4608      	mov	r0, r1
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	f7ff f9e6 	bl	8003534 <_sbrk>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_sbrk_r+0x1a>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	b103      	cbz	r3, 8004172 <_sbrk_r+0x1a>
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	200001d0 	.word	0x200001d0

08004178 <__sread>:
 8004178:	b510      	push	{r4, lr}
 800417a:	460c      	mov	r4, r1
 800417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004180:	f000 faa2 	bl	80046c8 <_read_r>
 8004184:	2800      	cmp	r0, #0
 8004186:	bfab      	itete	ge
 8004188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800418a:	89a3      	ldrhlt	r3, [r4, #12]
 800418c:	181b      	addge	r3, r3, r0
 800418e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004192:	bfac      	ite	ge
 8004194:	6563      	strge	r3, [r4, #84]	; 0x54
 8004196:	81a3      	strhlt	r3, [r4, #12]
 8004198:	bd10      	pop	{r4, pc}

0800419a <__swrite>:
 800419a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419e:	461f      	mov	r7, r3
 80041a0:	898b      	ldrh	r3, [r1, #12]
 80041a2:	4605      	mov	r5, r0
 80041a4:	05db      	lsls	r3, r3, #23
 80041a6:	460c      	mov	r4, r1
 80041a8:	4616      	mov	r6, r2
 80041aa:	d505      	bpl.n	80041b8 <__swrite+0x1e>
 80041ac:	2302      	movs	r3, #2
 80041ae:	2200      	movs	r2, #0
 80041b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b4:	f000 f9b6 	bl	8004524 <_lseek_r>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	4632      	mov	r2, r6
 80041bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c0:	81a3      	strh	r3, [r4, #12]
 80041c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041c6:	463b      	mov	r3, r7
 80041c8:	4628      	mov	r0, r5
 80041ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ce:	f000 b869 	b.w	80042a4 <_write_r>

080041d2 <__sseek>:
 80041d2:	b510      	push	{r4, lr}
 80041d4:	460c      	mov	r4, r1
 80041d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041da:	f000 f9a3 	bl	8004524 <_lseek_r>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	bf15      	itete	ne
 80041e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ee:	81a3      	strheq	r3, [r4, #12]
 80041f0:	bf18      	it	ne
 80041f2:	81a3      	strhne	r3, [r4, #12]
 80041f4:	bd10      	pop	{r4, pc}

080041f6 <__sclose>:
 80041f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fa:	f000 b8d3 	b.w	80043a4 <_close_r>
	...

08004200 <__swbuf_r>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	460e      	mov	r6, r1
 8004204:	4614      	mov	r4, r2
 8004206:	4605      	mov	r5, r0
 8004208:	b118      	cbz	r0, 8004212 <__swbuf_r+0x12>
 800420a:	6983      	ldr	r3, [r0, #24]
 800420c:	b90b      	cbnz	r3, 8004212 <__swbuf_r+0x12>
 800420e:	f7ff fbf9 	bl	8003a04 <__sinit>
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <__swbuf_r+0x98>)
 8004214:	429c      	cmp	r4, r3
 8004216:	d12a      	bne.n	800426e <__swbuf_r+0x6e>
 8004218:	686c      	ldr	r4, [r5, #4]
 800421a:	69a3      	ldr	r3, [r4, #24]
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	071a      	lsls	r2, r3, #28
 8004222:	d52e      	bpl.n	8004282 <__swbuf_r+0x82>
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	b363      	cbz	r3, 8004282 <__swbuf_r+0x82>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	b2f6      	uxtb	r6, r6
 800422e:	1ac0      	subs	r0, r0, r3
 8004230:	6963      	ldr	r3, [r4, #20]
 8004232:	4637      	mov	r7, r6
 8004234:	4283      	cmp	r3, r0
 8004236:	dc04      	bgt.n	8004242 <__swbuf_r+0x42>
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 f948 	bl	80044d0 <_fflush_r>
 8004240:	bb28      	cbnz	r0, 800428e <__swbuf_r+0x8e>
 8004242:	68a3      	ldr	r3, [r4, #8]
 8004244:	3001      	adds	r0, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	60a3      	str	r3, [r4, #8]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	6022      	str	r2, [r4, #0]
 8004250:	701e      	strb	r6, [r3, #0]
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	4283      	cmp	r3, r0
 8004256:	d004      	beq.n	8004262 <__swbuf_r+0x62>
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	07db      	lsls	r3, r3, #31
 800425c:	d519      	bpl.n	8004292 <__swbuf_r+0x92>
 800425e:	2e0a      	cmp	r6, #10
 8004260:	d117      	bne.n	8004292 <__swbuf_r+0x92>
 8004262:	4621      	mov	r1, r4
 8004264:	4628      	mov	r0, r5
 8004266:	f000 f933 	bl	80044d0 <_fflush_r>
 800426a:	b190      	cbz	r0, 8004292 <__swbuf_r+0x92>
 800426c:	e00f      	b.n	800428e <__swbuf_r+0x8e>
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <__swbuf_r+0x9c>)
 8004270:	429c      	cmp	r4, r3
 8004272:	d101      	bne.n	8004278 <__swbuf_r+0x78>
 8004274:	68ac      	ldr	r4, [r5, #8]
 8004276:	e7d0      	b.n	800421a <__swbuf_r+0x1a>
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <__swbuf_r+0xa0>)
 800427a:	429c      	cmp	r4, r3
 800427c:	bf08      	it	eq
 800427e:	68ec      	ldreq	r4, [r5, #12]
 8004280:	e7cb      	b.n	800421a <__swbuf_r+0x1a>
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 f81f 	bl	80042c8 <__swsetup_r>
 800428a:	2800      	cmp	r0, #0
 800428c:	d0cc      	beq.n	8004228 <__swbuf_r+0x28>
 800428e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004292:	4638      	mov	r0, r7
 8004294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004296:	bf00      	nop
 8004298:	080047b0 	.word	0x080047b0
 800429c:	080047d0 	.word	0x080047d0
 80042a0:	08004790 	.word	0x08004790

080042a4 <_write_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4605      	mov	r5, r0
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	4c05      	ldr	r4, [pc, #20]	; (80042c4 <_write_r+0x20>)
 80042b0:	6022      	str	r2, [r4, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7ff f8f1 	bl	800349a <_write>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d102      	bne.n	80042c2 <_write_r+0x1e>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	b103      	cbz	r3, 80042c2 <_write_r+0x1e>
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	bd38      	pop	{r3, r4, r5, pc}
 80042c4:	200001d0 	.word	0x200001d0

080042c8 <__swsetup_r>:
 80042c8:	4b32      	ldr	r3, [pc, #200]	; (8004394 <__swsetup_r+0xcc>)
 80042ca:	b570      	push	{r4, r5, r6, lr}
 80042cc:	681d      	ldr	r5, [r3, #0]
 80042ce:	4606      	mov	r6, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	b125      	cbz	r5, 80042de <__swsetup_r+0x16>
 80042d4:	69ab      	ldr	r3, [r5, #24]
 80042d6:	b913      	cbnz	r3, 80042de <__swsetup_r+0x16>
 80042d8:	4628      	mov	r0, r5
 80042da:	f7ff fb93 	bl	8003a04 <__sinit>
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <__swsetup_r+0xd0>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	d10f      	bne.n	8004304 <__swsetup_r+0x3c>
 80042e4:	686c      	ldr	r4, [r5, #4]
 80042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	0715      	lsls	r5, r2, #28
 80042ee:	d42c      	bmi.n	800434a <__swsetup_r+0x82>
 80042f0:	06d0      	lsls	r0, r2, #27
 80042f2:	d411      	bmi.n	8004318 <__swsetup_r+0x50>
 80042f4:	2209      	movs	r2, #9
 80042f6:	6032      	str	r2, [r6, #0]
 80042f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004302:	e03e      	b.n	8004382 <__swsetup_r+0xba>
 8004304:	4b25      	ldr	r3, [pc, #148]	; (800439c <__swsetup_r+0xd4>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d101      	bne.n	800430e <__swsetup_r+0x46>
 800430a:	68ac      	ldr	r4, [r5, #8]
 800430c:	e7eb      	b.n	80042e6 <__swsetup_r+0x1e>
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <__swsetup_r+0xd8>)
 8004310:	429c      	cmp	r4, r3
 8004312:	bf08      	it	eq
 8004314:	68ec      	ldreq	r4, [r5, #12]
 8004316:	e7e6      	b.n	80042e6 <__swsetup_r+0x1e>
 8004318:	0751      	lsls	r1, r2, #29
 800431a:	d512      	bpl.n	8004342 <__swsetup_r+0x7a>
 800431c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800431e:	b141      	cbz	r1, 8004332 <__swsetup_r+0x6a>
 8004320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004324:	4299      	cmp	r1, r3
 8004326:	d002      	beq.n	800432e <__swsetup_r+0x66>
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f981 	bl	8004630 <_free_r>
 800432e:	2300      	movs	r3, #0
 8004330:	6363      	str	r3, [r4, #52]	; 0x34
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	b94b      	cbnz	r3, 8004362 <__swsetup_r+0x9a>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004358:	d003      	beq.n	8004362 <__swsetup_r+0x9a>
 800435a:	4621      	mov	r1, r4
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f917 	bl	8004590 <__smakebuf_r>
 8004362:	89a2      	ldrh	r2, [r4, #12]
 8004364:	f012 0301 	ands.w	r3, r2, #1
 8004368:	d00c      	beq.n	8004384 <__swsetup_r+0xbc>
 800436a:	2300      	movs	r3, #0
 800436c:	60a3      	str	r3, [r4, #8]
 800436e:	6963      	ldr	r3, [r4, #20]
 8004370:	425b      	negs	r3, r3
 8004372:	61a3      	str	r3, [r4, #24]
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	b953      	cbnz	r3, 800438e <__swsetup_r+0xc6>
 8004378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004380:	d1ba      	bne.n	80042f8 <__swsetup_r+0x30>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	0792      	lsls	r2, r2, #30
 8004386:	bf58      	it	pl
 8004388:	6963      	ldrpl	r3, [r4, #20]
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	e7f2      	b.n	8004374 <__swsetup_r+0xac>
 800438e:	2000      	movs	r0, #0
 8004390:	e7f7      	b.n	8004382 <__swsetup_r+0xba>
 8004392:	bf00      	nop
 8004394:	2000000c 	.word	0x2000000c
 8004398:	080047b0 	.word	0x080047b0
 800439c:	080047d0 	.word	0x080047d0
 80043a0:	08004790 	.word	0x08004790

080043a4 <_close_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4c05      	ldr	r4, [pc, #20]	; (80043c0 <_close_r+0x1c>)
 80043aa:	4605      	mov	r5, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	f7ff f88f 	bl	80034d2 <_close>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_close_r+0x1a>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	b103      	cbz	r3, 80043be <_close_r+0x1a>
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200001d0 	.word	0x200001d0

080043c4 <__sflush_r>:
 80043c4:	898a      	ldrh	r2, [r1, #12]
 80043c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	4605      	mov	r5, r0
 80043cc:	0710      	lsls	r0, r2, #28
 80043ce:	460c      	mov	r4, r1
 80043d0:	d458      	bmi.n	8004484 <__sflush_r+0xc0>
 80043d2:	684b      	ldr	r3, [r1, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dc05      	bgt.n	80043e4 <__sflush_r+0x20>
 80043d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	dc02      	bgt.n	80043e4 <__sflush_r+0x20>
 80043de:	2000      	movs	r0, #0
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	d0f9      	beq.n	80043de <__sflush_r+0x1a>
 80043ea:	2300      	movs	r3, #0
 80043ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f0:	682f      	ldr	r7, [r5, #0]
 80043f2:	6a21      	ldr	r1, [r4, #32]
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	d032      	beq.n	800445e <__sflush_r+0x9a>
 80043f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	075a      	lsls	r2, r3, #29
 80043fe:	d505      	bpl.n	800440c <__sflush_r+0x48>
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	1ac0      	subs	r0, r0, r3
 8004404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004406:	b10b      	cbz	r3, 800440c <__sflush_r+0x48>
 8004408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800440a:	1ac0      	subs	r0, r0, r3
 800440c:	2300      	movs	r3, #0
 800440e:	4602      	mov	r2, r0
 8004410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004412:	6a21      	ldr	r1, [r4, #32]
 8004414:	4628      	mov	r0, r5
 8004416:	47b0      	blx	r6
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	d106      	bne.n	800442c <__sflush_r+0x68>
 800441e:	6829      	ldr	r1, [r5, #0]
 8004420:	291d      	cmp	r1, #29
 8004422:	d848      	bhi.n	80044b6 <__sflush_r+0xf2>
 8004424:	4a29      	ldr	r2, [pc, #164]	; (80044cc <__sflush_r+0x108>)
 8004426:	40ca      	lsrs	r2, r1
 8004428:	07d6      	lsls	r6, r2, #31
 800442a:	d544      	bpl.n	80044b6 <__sflush_r+0xf2>
 800442c:	2200      	movs	r2, #0
 800442e:	6062      	str	r2, [r4, #4]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	04d9      	lsls	r1, r3, #19
 8004434:	6022      	str	r2, [r4, #0]
 8004436:	d504      	bpl.n	8004442 <__sflush_r+0x7e>
 8004438:	1c42      	adds	r2, r0, #1
 800443a:	d101      	bne.n	8004440 <__sflush_r+0x7c>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b903      	cbnz	r3, 8004442 <__sflush_r+0x7e>
 8004440:	6560      	str	r0, [r4, #84]	; 0x54
 8004442:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004444:	602f      	str	r7, [r5, #0]
 8004446:	2900      	cmp	r1, #0
 8004448:	d0c9      	beq.n	80043de <__sflush_r+0x1a>
 800444a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800444e:	4299      	cmp	r1, r3
 8004450:	d002      	beq.n	8004458 <__sflush_r+0x94>
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f8ec 	bl	8004630 <_free_r>
 8004458:	2000      	movs	r0, #0
 800445a:	6360      	str	r0, [r4, #52]	; 0x34
 800445c:	e7c0      	b.n	80043e0 <__sflush_r+0x1c>
 800445e:	2301      	movs	r3, #1
 8004460:	4628      	mov	r0, r5
 8004462:	47b0      	blx	r6
 8004464:	1c41      	adds	r1, r0, #1
 8004466:	d1c8      	bne.n	80043fa <__sflush_r+0x36>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0c5      	beq.n	80043fa <__sflush_r+0x36>
 800446e:	2b1d      	cmp	r3, #29
 8004470:	d001      	beq.n	8004476 <__sflush_r+0xb2>
 8004472:	2b16      	cmp	r3, #22
 8004474:	d101      	bne.n	800447a <__sflush_r+0xb6>
 8004476:	602f      	str	r7, [r5, #0]
 8004478:	e7b1      	b.n	80043de <__sflush_r+0x1a>
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	e7ad      	b.n	80043e0 <__sflush_r+0x1c>
 8004484:	690f      	ldr	r7, [r1, #16]
 8004486:	2f00      	cmp	r7, #0
 8004488:	d0a9      	beq.n	80043de <__sflush_r+0x1a>
 800448a:	0793      	lsls	r3, r2, #30
 800448c:	bf18      	it	ne
 800448e:	2300      	movne	r3, #0
 8004490:	680e      	ldr	r6, [r1, #0]
 8004492:	bf08      	it	eq
 8004494:	694b      	ldreq	r3, [r1, #20]
 8004496:	eba6 0807 	sub.w	r8, r6, r7
 800449a:	600f      	str	r7, [r1, #0]
 800449c:	608b      	str	r3, [r1, #8]
 800449e:	f1b8 0f00 	cmp.w	r8, #0
 80044a2:	dd9c      	ble.n	80043de <__sflush_r+0x1a>
 80044a4:	4643      	mov	r3, r8
 80044a6:	463a      	mov	r2, r7
 80044a8:	6a21      	ldr	r1, [r4, #32]
 80044aa:	4628      	mov	r0, r5
 80044ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044ae:	47b0      	blx	r6
 80044b0:	2800      	cmp	r0, #0
 80044b2:	dc06      	bgt.n	80044c2 <__sflush_r+0xfe>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044c0:	e78e      	b.n	80043e0 <__sflush_r+0x1c>
 80044c2:	4407      	add	r7, r0
 80044c4:	eba8 0800 	sub.w	r8, r8, r0
 80044c8:	e7e9      	b.n	800449e <__sflush_r+0xda>
 80044ca:	bf00      	nop
 80044cc:	20400001 	.word	0x20400001

080044d0 <_fflush_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	4605      	mov	r5, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	b1db      	cbz	r3, 8004512 <_fflush_r+0x42>
 80044da:	b118      	cbz	r0, 80044e4 <_fflush_r+0x14>
 80044dc:	6983      	ldr	r3, [r0, #24]
 80044de:	b90b      	cbnz	r3, 80044e4 <_fflush_r+0x14>
 80044e0:	f7ff fa90 	bl	8003a04 <__sinit>
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <_fflush_r+0x48>)
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d109      	bne.n	80044fe <_fflush_r+0x2e>
 80044ea:	686c      	ldr	r4, [r5, #4]
 80044ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f0:	b17b      	cbz	r3, 8004512 <_fflush_r+0x42>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fa:	f7ff bf63 	b.w	80043c4 <__sflush_r>
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <_fflush_r+0x4c>)
 8004500:	429c      	cmp	r4, r3
 8004502:	d101      	bne.n	8004508 <_fflush_r+0x38>
 8004504:	68ac      	ldr	r4, [r5, #8]
 8004506:	e7f1      	b.n	80044ec <_fflush_r+0x1c>
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <_fflush_r+0x50>)
 800450a:	429c      	cmp	r4, r3
 800450c:	bf08      	it	eq
 800450e:	68ec      	ldreq	r4, [r5, #12]
 8004510:	e7ec      	b.n	80044ec <_fflush_r+0x1c>
 8004512:	2000      	movs	r0, #0
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	bf00      	nop
 8004518:	080047b0 	.word	0x080047b0
 800451c:	080047d0 	.word	0x080047d0
 8004520:	08004790 	.word	0x08004790

08004524 <_lseek_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	2200      	movs	r2, #0
 800452e:	4c05      	ldr	r4, [pc, #20]	; (8004544 <_lseek_r+0x20>)
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fe fff1 	bl	800351a <_lseek>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_lseek_r+0x1e>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	b103      	cbz	r3, 8004542 <_lseek_r+0x1e>
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200001d0 	.word	0x200001d0

08004548 <__swhatbuf_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	460e      	mov	r6, r1
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	b096      	sub	sp, #88	; 0x58
 8004552:	2900      	cmp	r1, #0
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	da07      	bge.n	800456a <__swhatbuf_r+0x22>
 800455a:	2300      	movs	r3, #0
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	89b3      	ldrh	r3, [r6, #12]
 8004560:	061a      	lsls	r2, r3, #24
 8004562:	d410      	bmi.n	8004586 <__swhatbuf_r+0x3e>
 8004564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004568:	e00e      	b.n	8004588 <__swhatbuf_r+0x40>
 800456a:	466a      	mov	r2, sp
 800456c:	f000 f8be 	bl	80046ec <_fstat_r>
 8004570:	2800      	cmp	r0, #0
 8004572:	dbf2      	blt.n	800455a <__swhatbuf_r+0x12>
 8004574:	9a01      	ldr	r2, [sp, #4]
 8004576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800457a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800457e:	425a      	negs	r2, r3
 8004580:	415a      	adcs	r2, r3
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	e7ee      	b.n	8004564 <__swhatbuf_r+0x1c>
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	2000      	movs	r0, #0
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	b016      	add	sp, #88	; 0x58
 800458e:	bd70      	pop	{r4, r5, r6, pc}

08004590 <__smakebuf_r>:
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004594:	079d      	lsls	r5, r3, #30
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	d507      	bpl.n	80045ac <__smakebuf_r+0x1c>
 800459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	2301      	movs	r3, #1
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	b002      	add	sp, #8
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	ab01      	add	r3, sp, #4
 80045ae:	466a      	mov	r2, sp
 80045b0:	f7ff ffca 	bl	8004548 <__swhatbuf_r>
 80045b4:	9900      	ldr	r1, [sp, #0]
 80045b6:	4605      	mov	r5, r0
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff faad 	bl	8003b18 <_malloc_r>
 80045be:	b948      	cbnz	r0, 80045d4 <__smakebuf_r+0x44>
 80045c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c4:	059a      	lsls	r2, r3, #22
 80045c6:	d4ef      	bmi.n	80045a8 <__smakebuf_r+0x18>
 80045c8:	f023 0303 	bic.w	r3, r3, #3
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	e7e3      	b.n	800459c <__smakebuf_r+0xc>
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <__smakebuf_r+0x7c>)
 80045d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	6120      	str	r0, [r4, #16]
 80045e6:	6163      	str	r3, [r4, #20]
 80045e8:	9b01      	ldr	r3, [sp, #4]
 80045ea:	b15b      	cbz	r3, 8004604 <__smakebuf_r+0x74>
 80045ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f88d 	bl	8004710 <_isatty_r>
 80045f6:	b128      	cbz	r0, 8004604 <__smakebuf_r+0x74>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	431d      	orrs	r5, r3
 8004608:	81a5      	strh	r5, [r4, #12]
 800460a:	e7cd      	b.n	80045a8 <__smakebuf_r+0x18>
 800460c:	080039cd 	.word	0x080039cd

08004610 <memchr>:
 8004610:	b510      	push	{r4, lr}
 8004612:	b2c9      	uxtb	r1, r1
 8004614:	4402      	add	r2, r0
 8004616:	4290      	cmp	r0, r2
 8004618:	4603      	mov	r3, r0
 800461a:	d101      	bne.n	8004620 <memchr+0x10>
 800461c:	2300      	movs	r3, #0
 800461e:	e003      	b.n	8004628 <memchr+0x18>
 8004620:	781c      	ldrb	r4, [r3, #0]
 8004622:	3001      	adds	r0, #1
 8004624:	428c      	cmp	r4, r1
 8004626:	d1f6      	bne.n	8004616 <memchr+0x6>
 8004628:	4618      	mov	r0, r3
 800462a:	bd10      	pop	{r4, pc}

0800462c <__malloc_lock>:
 800462c:	4770      	bx	lr

0800462e <__malloc_unlock>:
 800462e:	4770      	bx	lr

08004630 <_free_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4605      	mov	r5, r0
 8004634:	2900      	cmp	r1, #0
 8004636:	d043      	beq.n	80046c0 <_free_r+0x90>
 8004638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463c:	1f0c      	subs	r4, r1, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	bfb8      	it	lt
 8004642:	18e4      	addlt	r4, r4, r3
 8004644:	f7ff fff2 	bl	800462c <__malloc_lock>
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <_free_r+0x94>)
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	4610      	mov	r0, r2
 800464e:	b933      	cbnz	r3, 800465e <_free_r+0x2e>
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6014      	str	r4, [r2, #0]
 8004654:	4628      	mov	r0, r5
 8004656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465a:	f7ff bfe8 	b.w	800462e <__malloc_unlock>
 800465e:	42a3      	cmp	r3, r4
 8004660:	d90b      	bls.n	800467a <_free_r+0x4a>
 8004662:	6821      	ldr	r1, [r4, #0]
 8004664:	1862      	adds	r2, r4, r1
 8004666:	4293      	cmp	r3, r2
 8004668:	bf01      	itttt	eq
 800466a:	681a      	ldreq	r2, [r3, #0]
 800466c:	685b      	ldreq	r3, [r3, #4]
 800466e:	1852      	addeq	r2, r2, r1
 8004670:	6022      	streq	r2, [r4, #0]
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	6004      	str	r4, [r0, #0]
 8004676:	e7ed      	b.n	8004654 <_free_r+0x24>
 8004678:	4613      	mov	r3, r2
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	b10a      	cbz	r2, 8004682 <_free_r+0x52>
 800467e:	42a2      	cmp	r2, r4
 8004680:	d9fa      	bls.n	8004678 <_free_r+0x48>
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	1858      	adds	r0, r3, r1
 8004686:	42a0      	cmp	r0, r4
 8004688:	d10b      	bne.n	80046a2 <_free_r+0x72>
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	4401      	add	r1, r0
 800468e:	1858      	adds	r0, r3, r1
 8004690:	4282      	cmp	r2, r0
 8004692:	6019      	str	r1, [r3, #0]
 8004694:	d1de      	bne.n	8004654 <_free_r+0x24>
 8004696:	6810      	ldr	r0, [r2, #0]
 8004698:	6852      	ldr	r2, [r2, #4]
 800469a:	4401      	add	r1, r0
 800469c:	6019      	str	r1, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	e7d8      	b.n	8004654 <_free_r+0x24>
 80046a2:	d902      	bls.n	80046aa <_free_r+0x7a>
 80046a4:	230c      	movs	r3, #12
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	e7d4      	b.n	8004654 <_free_r+0x24>
 80046aa:	6820      	ldr	r0, [r4, #0]
 80046ac:	1821      	adds	r1, r4, r0
 80046ae:	428a      	cmp	r2, r1
 80046b0:	bf01      	itttt	eq
 80046b2:	6811      	ldreq	r1, [r2, #0]
 80046b4:	6852      	ldreq	r2, [r2, #4]
 80046b6:	1809      	addeq	r1, r1, r0
 80046b8:	6021      	streq	r1, [r4, #0]
 80046ba:	6062      	str	r2, [r4, #4]
 80046bc:	605c      	str	r4, [r3, #4]
 80046be:	e7c9      	b.n	8004654 <_free_r+0x24>
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	2000009c 	.word	0x2000009c

080046c8 <_read_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4605      	mov	r5, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	2200      	movs	r2, #0
 80046d2:	4c05      	ldr	r4, [pc, #20]	; (80046e8 <_read_r+0x20>)
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fe fec2 	bl	8003460 <_read>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_read_r+0x1e>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_read_r+0x1e>
 80046e4:	602b      	str	r3, [r5, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	200001d0 	.word	0x200001d0

080046ec <_fstat_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	2300      	movs	r3, #0
 80046f0:	4c06      	ldr	r4, [pc, #24]	; (800470c <_fstat_r+0x20>)
 80046f2:	4605      	mov	r5, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	f7fe fef5 	bl	80034e8 <_fstat>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d102      	bne.n	8004708 <_fstat_r+0x1c>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	b103      	cbz	r3, 8004708 <_fstat_r+0x1c>
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	bf00      	nop
 800470c:	200001d0 	.word	0x200001d0

08004710 <_isatty_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	2300      	movs	r3, #0
 8004714:	4c05      	ldr	r4, [pc, #20]	; (800472c <_isatty_r+0x1c>)
 8004716:	4605      	mov	r5, r0
 8004718:	4608      	mov	r0, r1
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	f7fe fef3 	bl	8003506 <_isatty>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_isatty_r+0x1a>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	b103      	cbz	r3, 800472a <_isatty_r+0x1a>
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200001d0 	.word	0x200001d0

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
